
SignalReaderFirmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004388  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  08004510  08004510  00014510  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004548  08004548  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08004548  08004548  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004548  08004548  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004548  08004548  00014548  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800454c  0800454c  0001454c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08004550  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000184  2000000c  0800455c  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000190  0800455c  00020190  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ff6b  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002248  00000000  00000000  0002ffa7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ef0  00000000  00000000  000321f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000e18  00000000  00000000  000330e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001bdc9  00000000  00000000  00033ef8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001167b  00000000  00000000  0004fcc1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a9d55  00000000  00000000  0006133c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0010b091  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003f00  00000000  00000000  0010b0e4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080044f8 	.word	0x080044f8

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	080044f8 	.word	0x080044f8

080001c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001c8:	b580      	push	{r7, lr}
 80001ca:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001cc:	f000 fc62 	bl	8000a94 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001d0:	f000 f82e 	bl	8000230 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001d4:	f000 f9f6 	bl	80005c4 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80001d8:	f000 f9c4 	bl	8000564 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 80001dc:	f000 f88c 	bl	80002f8 <MX_ADC1_Init>
  MX_DAC1_Init();
 80001e0:	f000 f8fa 	bl	80003d8 <MX_DAC1_Init>
  MX_DAC2_Init();
 80001e4:	f000 f922 	bl	800042c <MX_DAC2_Init>
  MX_IWDG_Init();
 80001e8:	f000 f94a 	bl	8000480 <MX_IWDG_Init>
  MX_TIM1_Init();
 80001ec:	f000 f966 	bl	80004bc <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  signalCount = 0;
 80001f0:	4b09      	ldr	r3, [pc, #36]	; (8000218 <main+0x50>)
 80001f2:	2200      	movs	r2, #0
 80001f4:	601a      	str	r2, [r3, #0]

  HAL_TIM_Base_Start_IT(&htim1);
 80001f6:	4809      	ldr	r0, [pc, #36]	; (800021c <main+0x54>)
 80001f8:	f003 f8ee 	bl	80033d8 <HAL_TIM_Base_Start_IT>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  HAL_IWDG_Refresh(&hiwdg);
 80001fc:	4808      	ldr	r0, [pc, #32]	; (8000220 <main+0x58>)
 80001fe:	f001 fdea 	bl	8001dd6 <HAL_IWDG_Refresh>

	  if(HAL_UART_Receive(&huart2, uartDataIn, sizeof(uartDataIn), 100) == HAL_OK){
 8000202:	2364      	movs	r3, #100	; 0x64
 8000204:	2204      	movs	r2, #4
 8000206:	4907      	ldr	r1, [pc, #28]	; (8000224 <main+0x5c>)
 8000208:	4807      	ldr	r0, [pc, #28]	; (8000228 <main+0x60>)
 800020a:	f003 fdd9 	bl	8003dc0 <HAL_UART_Receive>

	  }
	  HAL_GPIO_TogglePin(B4_GPIO_Port, B4_Pin);
 800020e:	2110      	movs	r1, #16
 8000210:	4806      	ldr	r0, [pc, #24]	; (800022c <main+0x64>)
 8000212:	f001 fd5d 	bl	8001cd0 <HAL_GPIO_TogglePin>
	  HAL_IWDG_Refresh(&hiwdg);
 8000216:	e7f1      	b.n	80001fc <main+0x34>
 8000218:	200000b8 	.word	0x200000b8
 800021c:	200000bc 	.word	0x200000bc
 8000220:	20000050 	.word	0x20000050
 8000224:	20000060 	.word	0x20000060
 8000228:	20000108 	.word	0x20000108
 800022c:	48000400 	.word	0x48000400

08000230 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000230:	b580      	push	{r7, lr}
 8000232:	b096      	sub	sp, #88	; 0x58
 8000234:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000236:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800023a:	2228      	movs	r2, #40	; 0x28
 800023c:	2100      	movs	r1, #0
 800023e:	4618      	mov	r0, r3
 8000240:	f004 f952 	bl	80044e8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000244:	f107 031c 	add.w	r3, r7, #28
 8000248:	2200      	movs	r2, #0
 800024a:	601a      	str	r2, [r3, #0]
 800024c:	605a      	str	r2, [r3, #4]
 800024e:	609a      	str	r2, [r3, #8]
 8000250:	60da      	str	r2, [r3, #12]
 8000252:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000254:	1d3b      	adds	r3, r7, #4
 8000256:	2200      	movs	r2, #0
 8000258:	601a      	str	r2, [r3, #0]
 800025a:	605a      	str	r2, [r3, #4]
 800025c:	609a      	str	r2, [r3, #8]
 800025e:	60da      	str	r2, [r3, #12]
 8000260:	611a      	str	r2, [r3, #16]
 8000262:	615a      	str	r2, [r3, #20]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 8000264:	230a      	movs	r3, #10
 8000266:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000268:	2301      	movs	r3, #1
 800026a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800026c:	2310      	movs	r3, #16
 800026e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000270:	2301      	movs	r3, #1
 8000272:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000274:	2302      	movs	r3, #2
 8000276:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000278:	2300      	movs	r3, #0
 800027a:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800027c:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000280:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000282:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000286:	4618      	mov	r0, r3
 8000288:	f001 fdb6 	bl	8001df8 <HAL_RCC_OscConfig>
 800028c:	4603      	mov	r3, r0
 800028e:	2b00      	cmp	r3, #0
 8000290:	d001      	beq.n	8000296 <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000292:	f000 fa15 	bl	80006c0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000296:	230f      	movs	r3, #15
 8000298:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800029a:	2302      	movs	r3, #2
 800029c:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800029e:	2300      	movs	r3, #0
 80002a0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80002a2:	2300      	movs	r3, #0
 80002a4:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80002a6:	2300      	movs	r3, #0
 80002a8:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80002aa:	f107 031c 	add.w	r3, r7, #28
 80002ae:	2101      	movs	r1, #1
 80002b0:	4618      	mov	r0, r3
 80002b2:	f002 fca9 	bl	8002c08 <HAL_RCC_ClockConfig>
 80002b6:	4603      	mov	r3, r0
 80002b8:	2b00      	cmp	r3, #0
 80002ba:	d001      	beq.n	80002c0 <SystemClock_Config+0x90>
  {
    Error_Handler();
 80002bc:	f000 fa00 	bl	80006c0 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_TIM1|RCC_PERIPHCLK_ADC12;
 80002c0:	f44f 5384 	mov.w	r3, #4224	; 0x1080
 80002c4:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12PLLCLK_DIV1;
 80002c6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80002ca:	617b      	str	r3, [r7, #20]
  PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLK_HCLK;
 80002cc:	2300      	movs	r3, #0
 80002ce:	61bb      	str	r3, [r7, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80002d0:	1d3b      	adds	r3, r7, #4
 80002d2:	4618      	mov	r0, r3
 80002d4:	f002 ff02 	bl	80030dc <HAL_RCCEx_PeriphCLKConfig>
 80002d8:	4603      	mov	r3, r0
 80002da:	2b00      	cmp	r3, #0
 80002dc:	d001      	beq.n	80002e2 <SystemClock_Config+0xb2>
  {
    Error_Handler();
 80002de:	f000 f9ef 	bl	80006c0 <Error_Handler>
  }
  HAL_RCC_MCOConfig(RCC_MCO, RCC_MCO1SOURCE_SYSCLK, RCC_MCODIV_1);
 80002e2:	2200      	movs	r2, #0
 80002e4:	f04f 6180 	mov.w	r1, #67108864	; 0x4000000
 80002e8:	2000      	movs	r0, #0
 80002ea:	f002 fe09 	bl	8002f00 <HAL_RCC_MCOConfig>
}
 80002ee:	bf00      	nop
 80002f0:	3758      	adds	r7, #88	; 0x58
 80002f2:	46bd      	mov	sp, r7
 80002f4:	bd80      	pop	{r7, pc}
	...

080002f8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80002f8:	b580      	push	{r7, lr}
 80002fa:	b08a      	sub	sp, #40	; 0x28
 80002fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80002fe:	f107 031c 	add.w	r3, r7, #28
 8000302:	2200      	movs	r2, #0
 8000304:	601a      	str	r2, [r3, #0]
 8000306:	605a      	str	r2, [r3, #4]
 8000308:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800030a:	1d3b      	adds	r3, r7, #4
 800030c:	2200      	movs	r2, #0
 800030e:	601a      	str	r2, [r3, #0]
 8000310:	605a      	str	r2, [r3, #4]
 8000312:	609a      	str	r2, [r3, #8]
 8000314:	60da      	str	r2, [r3, #12]
 8000316:	611a      	str	r2, [r3, #16]
 8000318:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 800031a:	4b2e      	ldr	r3, [pc, #184]	; (80003d4 <MX_ADC1_Init+0xdc>)
 800031c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000320:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000322:	4b2c      	ldr	r3, [pc, #176]	; (80003d4 <MX_ADC1_Init+0xdc>)
 8000324:	2200      	movs	r2, #0
 8000326:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000328:	4b2a      	ldr	r3, [pc, #168]	; (80003d4 <MX_ADC1_Init+0xdc>)
 800032a:	2200      	movs	r2, #0
 800032c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800032e:	4b29      	ldr	r3, [pc, #164]	; (80003d4 <MX_ADC1_Init+0xdc>)
 8000330:	2200      	movs	r2, #0
 8000332:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000334:	4b27      	ldr	r3, [pc, #156]	; (80003d4 <MX_ADC1_Init+0xdc>)
 8000336:	2201      	movs	r2, #1
 8000338:	765a      	strb	r2, [r3, #25]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800033a:	4b26      	ldr	r3, [pc, #152]	; (80003d4 <MX_ADC1_Init+0xdc>)
 800033c:	2200      	movs	r2, #0
 800033e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000342:	4b24      	ldr	r3, [pc, #144]	; (80003d4 <MX_ADC1_Init+0xdc>)
 8000344:	2200      	movs	r2, #0
 8000346:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000348:	4b22      	ldr	r3, [pc, #136]	; (80003d4 <MX_ADC1_Init+0xdc>)
 800034a:	2201      	movs	r2, #1
 800034c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800034e:	4b21      	ldr	r3, [pc, #132]	; (80003d4 <MX_ADC1_Init+0xdc>)
 8000350:	2200      	movs	r2, #0
 8000352:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000354:	4b1f      	ldr	r3, [pc, #124]	; (80003d4 <MX_ADC1_Init+0xdc>)
 8000356:	2201      	movs	r2, #1
 8000358:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800035a:	4b1e      	ldr	r3, [pc, #120]	; (80003d4 <MX_ADC1_Init+0xdc>)
 800035c:	2200      	movs	r2, #0
 800035e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000362:	4b1c      	ldr	r3, [pc, #112]	; (80003d4 <MX_ADC1_Init+0xdc>)
 8000364:	2204      	movs	r2, #4
 8000366:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000368:	4b1a      	ldr	r3, [pc, #104]	; (80003d4 <MX_ADC1_Init+0xdc>)
 800036a:	2200      	movs	r2, #0
 800036c:	761a      	strb	r2, [r3, #24]
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 800036e:	4b19      	ldr	r3, [pc, #100]	; (80003d4 <MX_ADC1_Init+0xdc>)
 8000370:	2200      	movs	r2, #0
 8000372:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000374:	4817      	ldr	r0, [pc, #92]	; (80003d4 <MX_ADC1_Init+0xdc>)
 8000376:	f000 fbf3 	bl	8000b60 <HAL_ADC_Init>
 800037a:	4603      	mov	r3, r0
 800037c:	2b00      	cmp	r3, #0
 800037e:	d001      	beq.n	8000384 <MX_ADC1_Init+0x8c>
  {
    Error_Handler();
 8000380:	f000 f99e 	bl	80006c0 <Error_Handler>
  }
  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000384:	2300      	movs	r3, #0
 8000386:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000388:	f107 031c 	add.w	r3, r7, #28
 800038c:	4619      	mov	r1, r3
 800038e:	4811      	ldr	r0, [pc, #68]	; (80003d4 <MX_ADC1_Init+0xdc>)
 8000390:	f001 f83a 	bl	8001408 <HAL_ADCEx_MultiModeConfigChannel>
 8000394:	4603      	mov	r3, r0
 8000396:	2b00      	cmp	r3, #0
 8000398:	d001      	beq.n	800039e <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 800039a:	f000 f991 	bl	80006c0 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800039e:	2301      	movs	r3, #1
 80003a0:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80003a2:	2301      	movs	r3, #1
 80003a4:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80003a6:	2300      	movs	r3, #0
 80003a8:	613b      	str	r3, [r7, #16]
  sConfig.SamplingTime = ADC_SAMPLETIME_4CYCLES_5;
 80003aa:	2302      	movs	r3, #2
 80003ac:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80003ae:	2300      	movs	r3, #0
 80003b0:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80003b2:	2300      	movs	r3, #0
 80003b4:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80003b6:	1d3b      	adds	r3, r7, #4
 80003b8:	4619      	mov	r1, r3
 80003ba:	4806      	ldr	r0, [pc, #24]	; (80003d4 <MX_ADC1_Init+0xdc>)
 80003bc:	f000 fd62 	bl	8000e84 <HAL_ADC_ConfigChannel>
 80003c0:	4603      	mov	r3, r0
 80003c2:	2b00      	cmp	r3, #0
 80003c4:	d001      	beq.n	80003ca <MX_ADC1_Init+0xd2>
  {
    Error_Handler();
 80003c6:	f000 f97b 	bl	80006c0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80003ca:	bf00      	nop
 80003cc:	3728      	adds	r7, #40	; 0x28
 80003ce:	46bd      	mov	sp, r7
 80003d0:	bd80      	pop	{r7, pc}
 80003d2:	bf00      	nop
 80003d4:	20000064 	.word	0x20000064

080003d8 <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 80003d8:	b580      	push	{r7, lr}
 80003da:	b084      	sub	sp, #16
 80003dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 80003de:	1d3b      	adds	r3, r7, #4
 80003e0:	2200      	movs	r2, #0
 80003e2:	601a      	str	r2, [r3, #0]
 80003e4:	605a      	str	r2, [r3, #4]
 80003e6:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN DAC1_Init 1 */

  /* USER CODE END DAC1_Init 1 */
  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 80003e8:	4b0e      	ldr	r3, [pc, #56]	; (8000424 <MX_DAC1_Init+0x4c>)
 80003ea:	4a0f      	ldr	r2, [pc, #60]	; (8000428 <MX_DAC1_Init+0x50>)
 80003ec:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 80003ee:	480d      	ldr	r0, [pc, #52]	; (8000424 <MX_DAC1_Init+0x4c>)
 80003f0:	f001 fa41 	bl	8001876 <HAL_DAC_Init>
 80003f4:	4603      	mov	r3, r0
 80003f6:	2b00      	cmp	r3, #0
 80003f8:	d001      	beq.n	80003fe <MX_DAC1_Init+0x26>
  {
    Error_Handler();
 80003fa:	f000 f961 	bl	80006c0 <Error_Handler>
  }
  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 80003fe:	2300      	movs	r3, #0
 8000400:	607b      	str	r3, [r7, #4]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8000402:	2300      	movs	r3, #0
 8000404:	60bb      	str	r3, [r7, #8]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000406:	1d3b      	adds	r3, r7, #4
 8000408:	2200      	movs	r2, #0
 800040a:	4619      	mov	r1, r3
 800040c:	4805      	ldr	r0, [pc, #20]	; (8000424 <MX_DAC1_Init+0x4c>)
 800040e:	f001 fa55 	bl	80018bc <HAL_DAC_ConfigChannel>
 8000412:	4603      	mov	r3, r0
 8000414:	2b00      	cmp	r3, #0
 8000416:	d001      	beq.n	800041c <MX_DAC1_Init+0x44>
  {
    Error_Handler();
 8000418:	f000 f952 	bl	80006c0 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 800041c:	bf00      	nop
 800041e:	3710      	adds	r7, #16
 8000420:	46bd      	mov	sp, r7
 8000422:	bd80      	pop	{r7, pc}
 8000424:	2000003c 	.word	0x2000003c
 8000428:	40007400 	.word	0x40007400

0800042c <MX_DAC2_Init>:
  * @brief DAC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC2_Init(void)
{
 800042c:	b580      	push	{r7, lr}
 800042e:	b084      	sub	sp, #16
 8000430:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC2_Init 0 */

  /* USER CODE END DAC2_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8000432:	1d3b      	adds	r3, r7, #4
 8000434:	2200      	movs	r2, #0
 8000436:	601a      	str	r2, [r3, #0]
 8000438:	605a      	str	r2, [r3, #4]
 800043a:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN DAC2_Init 1 */

  /* USER CODE END DAC2_Init 1 */
  /** DAC Initialization
  */
  hdac2.Instance = DAC2;
 800043c:	4b0e      	ldr	r3, [pc, #56]	; (8000478 <MX_DAC2_Init+0x4c>)
 800043e:	4a0f      	ldr	r2, [pc, #60]	; (800047c <MX_DAC2_Init+0x50>)
 8000440:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac2) != HAL_OK)
 8000442:	480d      	ldr	r0, [pc, #52]	; (8000478 <MX_DAC2_Init+0x4c>)
 8000444:	f001 fa17 	bl	8001876 <HAL_DAC_Init>
 8000448:	4603      	mov	r3, r0
 800044a:	2b00      	cmp	r3, #0
 800044c:	d001      	beq.n	8000452 <MX_DAC2_Init+0x26>
  {
    Error_Handler();
 800044e:	f000 f937 	bl	80006c0 <Error_Handler>
  }
  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8000452:	2300      	movs	r3, #0
 8000454:	607b      	str	r3, [r7, #4]
  sConfig.DAC_OutputSwitch = DAC_OUTPUTSWITCH_ENABLE;
 8000456:	2302      	movs	r3, #2
 8000458:	60fb      	str	r3, [r7, #12]
  if (HAL_DAC_ConfigChannel(&hdac2, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 800045a:	1d3b      	adds	r3, r7, #4
 800045c:	2200      	movs	r2, #0
 800045e:	4619      	mov	r1, r3
 8000460:	4805      	ldr	r0, [pc, #20]	; (8000478 <MX_DAC2_Init+0x4c>)
 8000462:	f001 fa2b 	bl	80018bc <HAL_DAC_ConfigChannel>
 8000466:	4603      	mov	r3, r0
 8000468:	2b00      	cmp	r3, #0
 800046a:	d001      	beq.n	8000470 <MX_DAC2_Init+0x44>
  {
    Error_Handler();
 800046c:	f000 f928 	bl	80006c0 <Error_Handler>
  }
  /* USER CODE BEGIN DAC2_Init 2 */

  /* USER CODE END DAC2_Init 2 */

}
 8000470:	bf00      	nop
 8000472:	3710      	adds	r7, #16
 8000474:	46bd      	mov	sp, r7
 8000476:	bd80      	pop	{r7, pc}
 8000478:	20000028 	.word	0x20000028
 800047c:	40009800 	.word	0x40009800

08000480 <MX_IWDG_Init>:
  * @brief IWDG Initialization Function
  * @param None
  * @retval None
  */
static void MX_IWDG_Init(void)
{
 8000480:	b580      	push	{r7, lr}
 8000482:	af00      	add	r7, sp, #0
  /* USER CODE END IWDG_Init 0 */

  /* USER CODE BEGIN IWDG_Init 1 */

  /* USER CODE END IWDG_Init 1 */
  hiwdg.Instance = IWDG;
 8000484:	4b0b      	ldr	r3, [pc, #44]	; (80004b4 <MX_IWDG_Init+0x34>)
 8000486:	4a0c      	ldr	r2, [pc, #48]	; (80004b8 <MX_IWDG_Init+0x38>)
 8000488:	601a      	str	r2, [r3, #0]
  hiwdg.Init.Prescaler = IWDG_PRESCALER_256;
 800048a:	4b0a      	ldr	r3, [pc, #40]	; (80004b4 <MX_IWDG_Init+0x34>)
 800048c:	2206      	movs	r2, #6
 800048e:	605a      	str	r2, [r3, #4]
  hiwdg.Init.Window = 4095;
 8000490:	4b08      	ldr	r3, [pc, #32]	; (80004b4 <MX_IWDG_Init+0x34>)
 8000492:	f640 72ff 	movw	r2, #4095	; 0xfff
 8000496:	60da      	str	r2, [r3, #12]
  hiwdg.Init.Reload = 4095;
 8000498:	4b06      	ldr	r3, [pc, #24]	; (80004b4 <MX_IWDG_Init+0x34>)
 800049a:	f640 72ff 	movw	r2, #4095	; 0xfff
 800049e:	609a      	str	r2, [r3, #8]
  if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
 80004a0:	4804      	ldr	r0, [pc, #16]	; (80004b4 <MX_IWDG_Init+0x34>)
 80004a2:	f001 fc52 	bl	8001d4a <HAL_IWDG_Init>
 80004a6:	4603      	mov	r3, r0
 80004a8:	2b00      	cmp	r3, #0
 80004aa:	d001      	beq.n	80004b0 <MX_IWDG_Init+0x30>
  {
    Error_Handler();
 80004ac:	f000 f908 	bl	80006c0 <Error_Handler>
  }
  /* USER CODE BEGIN IWDG_Init 2 */

  /* USER CODE END IWDG_Init 2 */

}
 80004b0:	bf00      	nop
 80004b2:	bd80      	pop	{r7, pc}
 80004b4:	20000050 	.word	0x20000050
 80004b8:	40003000 	.word	0x40003000

080004bc <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80004bc:	b580      	push	{r7, lr}
 80004be:	b088      	sub	sp, #32
 80004c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80004c2:	f107 0310 	add.w	r3, r7, #16
 80004c6:	2200      	movs	r2, #0
 80004c8:	601a      	str	r2, [r3, #0]
 80004ca:	605a      	str	r2, [r3, #4]
 80004cc:	609a      	str	r2, [r3, #8]
 80004ce:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80004d0:	1d3b      	adds	r3, r7, #4
 80004d2:	2200      	movs	r2, #0
 80004d4:	601a      	str	r2, [r3, #0]
 80004d6:	605a      	str	r2, [r3, #4]
 80004d8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80004da:	4b20      	ldr	r3, [pc, #128]	; (800055c <MX_TIM1_Init+0xa0>)
 80004dc:	4a20      	ldr	r2, [pc, #128]	; (8000560 <MX_TIM1_Init+0xa4>)
 80004de:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 3599;
 80004e0:	4b1e      	ldr	r3, [pc, #120]	; (800055c <MX_TIM1_Init+0xa0>)
 80004e2:	f640 620f 	movw	r2, #3599	; 0xe0f
 80004e6:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80004e8:	4b1c      	ldr	r3, [pc, #112]	; (800055c <MX_TIM1_Init+0xa0>)
 80004ea:	2200      	movs	r2, #0
 80004ec:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 999;
 80004ee:	4b1b      	ldr	r3, [pc, #108]	; (800055c <MX_TIM1_Init+0xa0>)
 80004f0:	f240 32e7 	movw	r2, #999	; 0x3e7
 80004f4:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80004f6:	4b19      	ldr	r3, [pc, #100]	; (800055c <MX_TIM1_Init+0xa0>)
 80004f8:	2200      	movs	r2, #0
 80004fa:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80004fc:	4b17      	ldr	r3, [pc, #92]	; (800055c <MX_TIM1_Init+0xa0>)
 80004fe:	2200      	movs	r2, #0
 8000500:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000502:	4b16      	ldr	r3, [pc, #88]	; (800055c <MX_TIM1_Init+0xa0>)
 8000504:	2200      	movs	r2, #0
 8000506:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000508:	4814      	ldr	r0, [pc, #80]	; (800055c <MX_TIM1_Init+0xa0>)
 800050a:	f002 ff0d 	bl	8003328 <HAL_TIM_Base_Init>
 800050e:	4603      	mov	r3, r0
 8000510:	2b00      	cmp	r3, #0
 8000512:	d001      	beq.n	8000518 <MX_TIM1_Init+0x5c>
  {
    Error_Handler();
 8000514:	f000 f8d4 	bl	80006c0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000518:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800051c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800051e:	f107 0310 	add.w	r3, r7, #16
 8000522:	4619      	mov	r1, r3
 8000524:	480d      	ldr	r0, [pc, #52]	; (800055c <MX_TIM1_Init+0xa0>)
 8000526:	f003 f8d2 	bl	80036ce <HAL_TIM_ConfigClockSource>
 800052a:	4603      	mov	r3, r0
 800052c:	2b00      	cmp	r3, #0
 800052e:	d001      	beq.n	8000534 <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 8000530:	f000 f8c6 	bl	80006c0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000534:	2300      	movs	r3, #0
 8000536:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000538:	2300      	movs	r3, #0
 800053a:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800053c:	2300      	movs	r3, #0
 800053e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000540:	1d3b      	adds	r3, r7, #4
 8000542:	4619      	mov	r1, r3
 8000544:	4805      	ldr	r0, [pc, #20]	; (800055c <MX_TIM1_Init+0xa0>)
 8000546:	f003 facd 	bl	8003ae4 <HAL_TIMEx_MasterConfigSynchronization>
 800054a:	4603      	mov	r3, r0
 800054c:	2b00      	cmp	r3, #0
 800054e:	d001      	beq.n	8000554 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8000550:	f000 f8b6 	bl	80006c0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000554:	bf00      	nop
 8000556:	3720      	adds	r7, #32
 8000558:	46bd      	mov	sp, r7
 800055a:	bd80      	pop	{r7, pc}
 800055c:	200000bc 	.word	0x200000bc
 8000560:	40012c00 	.word	0x40012c00

08000564 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000564:	b580      	push	{r7, lr}
 8000566:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000568:	4b14      	ldr	r3, [pc, #80]	; (80005bc <MX_USART2_UART_Init+0x58>)
 800056a:	4a15      	ldr	r2, [pc, #84]	; (80005c0 <MX_USART2_UART_Init+0x5c>)
 800056c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800056e:	4b13      	ldr	r3, [pc, #76]	; (80005bc <MX_USART2_UART_Init+0x58>)
 8000570:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000574:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000576:	4b11      	ldr	r3, [pc, #68]	; (80005bc <MX_USART2_UART_Init+0x58>)
 8000578:	2200      	movs	r2, #0
 800057a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800057c:	4b0f      	ldr	r3, [pc, #60]	; (80005bc <MX_USART2_UART_Init+0x58>)
 800057e:	2200      	movs	r2, #0
 8000580:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000582:	4b0e      	ldr	r3, [pc, #56]	; (80005bc <MX_USART2_UART_Init+0x58>)
 8000584:	2200      	movs	r2, #0
 8000586:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000588:	4b0c      	ldr	r3, [pc, #48]	; (80005bc <MX_USART2_UART_Init+0x58>)
 800058a:	220c      	movs	r2, #12
 800058c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800058e:	4b0b      	ldr	r3, [pc, #44]	; (80005bc <MX_USART2_UART_Init+0x58>)
 8000590:	2200      	movs	r2, #0
 8000592:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000594:	4b09      	ldr	r3, [pc, #36]	; (80005bc <MX_USART2_UART_Init+0x58>)
 8000596:	2200      	movs	r2, #0
 8000598:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800059a:	4b08      	ldr	r3, [pc, #32]	; (80005bc <MX_USART2_UART_Init+0x58>)
 800059c:	2200      	movs	r2, #0
 800059e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80005a0:	4b06      	ldr	r3, [pc, #24]	; (80005bc <MX_USART2_UART_Init+0x58>)
 80005a2:	2200      	movs	r2, #0
 80005a4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80005a6:	4805      	ldr	r0, [pc, #20]	; (80005bc <MX_USART2_UART_Init+0x58>)
 80005a8:	f003 fb28 	bl	8003bfc <HAL_UART_Init>
 80005ac:	4603      	mov	r3, r0
 80005ae:	2b00      	cmp	r3, #0
 80005b0:	d001      	beq.n	80005b6 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80005b2:	f000 f885 	bl	80006c0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80005b6:	bf00      	nop
 80005b8:	bd80      	pop	{r7, pc}
 80005ba:	bf00      	nop
 80005bc:	20000108 	.word	0x20000108
 80005c0:	40004400 	.word	0x40004400

080005c4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80005c4:	b580      	push	{r7, lr}
 80005c6:	b088      	sub	sp, #32
 80005c8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005ca:	f107 030c 	add.w	r3, r7, #12
 80005ce:	2200      	movs	r2, #0
 80005d0:	601a      	str	r2, [r3, #0]
 80005d2:	605a      	str	r2, [r3, #4]
 80005d4:	609a      	str	r2, [r3, #8]
 80005d6:	60da      	str	r2, [r3, #12]
 80005d8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80005da:	4b36      	ldr	r3, [pc, #216]	; (80006b4 <MX_GPIO_Init+0xf0>)
 80005dc:	695b      	ldr	r3, [r3, #20]
 80005de:	4a35      	ldr	r2, [pc, #212]	; (80006b4 <MX_GPIO_Init+0xf0>)
 80005e0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80005e4:	6153      	str	r3, [r2, #20]
 80005e6:	4b33      	ldr	r3, [pc, #204]	; (80006b4 <MX_GPIO_Init+0xf0>)
 80005e8:	695b      	ldr	r3, [r3, #20]
 80005ea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80005ee:	60bb      	str	r3, [r7, #8]
 80005f0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005f2:	4b30      	ldr	r3, [pc, #192]	; (80006b4 <MX_GPIO_Init+0xf0>)
 80005f4:	695b      	ldr	r3, [r3, #20]
 80005f6:	4a2f      	ldr	r2, [pc, #188]	; (80006b4 <MX_GPIO_Init+0xf0>)
 80005f8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80005fc:	6153      	str	r3, [r2, #20]
 80005fe:	4b2d      	ldr	r3, [pc, #180]	; (80006b4 <MX_GPIO_Init+0xf0>)
 8000600:	695b      	ldr	r3, [r3, #20]
 8000602:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000606:	607b      	str	r3, [r7, #4]
 8000608:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800060a:	4b2a      	ldr	r3, [pc, #168]	; (80006b4 <MX_GPIO_Init+0xf0>)
 800060c:	695b      	ldr	r3, [r3, #20]
 800060e:	4a29      	ldr	r2, [pc, #164]	; (80006b4 <MX_GPIO_Init+0xf0>)
 8000610:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000614:	6153      	str	r3, [r2, #20]
 8000616:	4b27      	ldr	r3, [pc, #156]	; (80006b4 <MX_GPIO_Init+0xf0>)
 8000618:	695b      	ldr	r3, [r3, #20]
 800061a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800061e:	603b      	str	r3, [r7, #0]
 8000620:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_Pin|B4_Pin, GPIO_PIN_RESET);
 8000622:	2200      	movs	r2, #0
 8000624:	2118      	movs	r1, #24
 8000626:	4824      	ldr	r0, [pc, #144]	; (80006b8 <MX_GPIO_Init+0xf4>)
 8000628:	f001 fb3a 	bl	8001ca0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 800062c:	2301      	movs	r3, #1
 800062e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000630:	4b22      	ldr	r3, [pc, #136]	; (80006bc <MX_GPIO_Init+0xf8>)
 8000632:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000634:	2300      	movs	r3, #0
 8000636:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000638:	f107 030c 	add.w	r3, r7, #12
 800063c:	4619      	mov	r1, r3
 800063e:	481e      	ldr	r0, [pc, #120]	; (80006b8 <MX_GPIO_Init+0xf4>)
 8000640:	f001 f9a4 	bl	800198c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000644:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000648:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800064a:	2302      	movs	r3, #2
 800064c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800064e:	2300      	movs	r3, #0
 8000650:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000652:	2300      	movs	r3, #0
 8000654:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8000656:	2300      	movs	r3, #0
 8000658:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800065a:	f107 030c 	add.w	r3, r7, #12
 800065e:	4619      	mov	r1, r3
 8000660:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000664:	f001 f992 	bl	800198c <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_Pin B4_Pin */
  GPIO_InitStruct.Pin = LED_Pin|B4_Pin;
 8000668:	2318      	movs	r3, #24
 800066a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800066c:	2301      	movs	r3, #1
 800066e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000670:	2300      	movs	r3, #0
 8000672:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000674:	2300      	movs	r3, #0
 8000676:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000678:	f107 030c 	add.w	r3, r7, #12
 800067c:	4619      	mov	r1, r3
 800067e:	480e      	ldr	r0, [pc, #56]	; (80006b8 <MX_GPIO_Init+0xf4>)
 8000680:	f001 f984 	bl	800198c <HAL_GPIO_Init>

  /*Configure GPIO pin : Signal_Overvoltage_Pin */
  GPIO_InitStruct.Pin = Signal_Overvoltage_Pin;
 8000684:	2380      	movs	r3, #128	; 0x80
 8000686:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000688:	2300      	movs	r3, #0
 800068a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800068c:	2300      	movs	r3, #0
 800068e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(Signal_Overvoltage_GPIO_Port, &GPIO_InitStruct);
 8000690:	f107 030c 	add.w	r3, r7, #12
 8000694:	4619      	mov	r1, r3
 8000696:	4808      	ldr	r0, [pc, #32]	; (80006b8 <MX_GPIO_Init+0xf4>)
 8000698:	f001 f978 	bl	800198c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 800069c:	2200      	movs	r2, #0
 800069e:	2100      	movs	r1, #0
 80006a0:	2006      	movs	r0, #6
 80006a2:	f001 f8b2 	bl	800180a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80006a6:	2006      	movs	r0, #6
 80006a8:	f001 f8cb 	bl	8001842 <HAL_NVIC_EnableIRQ>

}
 80006ac:	bf00      	nop
 80006ae:	3720      	adds	r7, #32
 80006b0:	46bd      	mov	sp, r7
 80006b2:	bd80      	pop	{r7, pc}
 80006b4:	40021000 	.word	0x40021000
 80006b8:	48000400 	.word	0x48000400
 80006bc:	10110000 	.word	0x10110000

080006c0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80006c0:	b480      	push	{r7}
 80006c2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80006c4:	b672      	cpsid	i
}
 80006c6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80006c8:	e7fe      	b.n	80006c8 <Error_Handler+0x8>
	...

080006cc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80006cc:	b480      	push	{r7}
 80006ce:	b083      	sub	sp, #12
 80006d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80006d2:	4b0f      	ldr	r3, [pc, #60]	; (8000710 <HAL_MspInit+0x44>)
 80006d4:	699b      	ldr	r3, [r3, #24]
 80006d6:	4a0e      	ldr	r2, [pc, #56]	; (8000710 <HAL_MspInit+0x44>)
 80006d8:	f043 0301 	orr.w	r3, r3, #1
 80006dc:	6193      	str	r3, [r2, #24]
 80006de:	4b0c      	ldr	r3, [pc, #48]	; (8000710 <HAL_MspInit+0x44>)
 80006e0:	699b      	ldr	r3, [r3, #24]
 80006e2:	f003 0301 	and.w	r3, r3, #1
 80006e6:	607b      	str	r3, [r7, #4]
 80006e8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80006ea:	4b09      	ldr	r3, [pc, #36]	; (8000710 <HAL_MspInit+0x44>)
 80006ec:	69db      	ldr	r3, [r3, #28]
 80006ee:	4a08      	ldr	r2, [pc, #32]	; (8000710 <HAL_MspInit+0x44>)
 80006f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006f4:	61d3      	str	r3, [r2, #28]
 80006f6:	4b06      	ldr	r3, [pc, #24]	; (8000710 <HAL_MspInit+0x44>)
 80006f8:	69db      	ldr	r3, [r3, #28]
 80006fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006fe:	603b      	str	r3, [r7, #0]
 8000700:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000702:	bf00      	nop
 8000704:	370c      	adds	r7, #12
 8000706:	46bd      	mov	sp, r7
 8000708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800070c:	4770      	bx	lr
 800070e:	bf00      	nop
 8000710:	40021000 	.word	0x40021000

08000714 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000714:	b580      	push	{r7, lr}
 8000716:	b08a      	sub	sp, #40	; 0x28
 8000718:	af00      	add	r7, sp, #0
 800071a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800071c:	f107 0314 	add.w	r3, r7, #20
 8000720:	2200      	movs	r2, #0
 8000722:	601a      	str	r2, [r3, #0]
 8000724:	605a      	str	r2, [r3, #4]
 8000726:	609a      	str	r2, [r3, #8]
 8000728:	60da      	str	r2, [r3, #12]
 800072a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 800072c:	687b      	ldr	r3, [r7, #4]
 800072e:	681b      	ldr	r3, [r3, #0]
 8000730:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000734:	d124      	bne.n	8000780 <HAL_ADC_MspInit+0x6c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8000736:	4b14      	ldr	r3, [pc, #80]	; (8000788 <HAL_ADC_MspInit+0x74>)
 8000738:	695b      	ldr	r3, [r3, #20]
 800073a:	4a13      	ldr	r2, [pc, #76]	; (8000788 <HAL_ADC_MspInit+0x74>)
 800073c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000740:	6153      	str	r3, [r2, #20]
 8000742:	4b11      	ldr	r3, [pc, #68]	; (8000788 <HAL_ADC_MspInit+0x74>)
 8000744:	695b      	ldr	r3, [r3, #20]
 8000746:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800074a:	613b      	str	r3, [r7, #16]
 800074c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800074e:	4b0e      	ldr	r3, [pc, #56]	; (8000788 <HAL_ADC_MspInit+0x74>)
 8000750:	695b      	ldr	r3, [r3, #20]
 8000752:	4a0d      	ldr	r2, [pc, #52]	; (8000788 <HAL_ADC_MspInit+0x74>)
 8000754:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000758:	6153      	str	r3, [r2, #20]
 800075a:	4b0b      	ldr	r3, [pc, #44]	; (8000788 <HAL_ADC_MspInit+0x74>)
 800075c:	695b      	ldr	r3, [r3, #20]
 800075e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000762:	60fb      	str	r3, [r7, #12]
 8000764:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    PA1     ------> ADC1_IN2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000766:	2303      	movs	r3, #3
 8000768:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800076a:	2303      	movs	r3, #3
 800076c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800076e:	2300      	movs	r3, #0
 8000770:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000772:	f107 0314 	add.w	r3, r7, #20
 8000776:	4619      	mov	r1, r3
 8000778:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800077c:	f001 f906 	bl	800198c <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000780:	bf00      	nop
 8000782:	3728      	adds	r7, #40	; 0x28
 8000784:	46bd      	mov	sp, r7
 8000786:	bd80      	pop	{r7, pc}
 8000788:	40021000 	.word	0x40021000

0800078c <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 800078c:	b580      	push	{r7, lr}
 800078e:	b08c      	sub	sp, #48	; 0x30
 8000790:	af00      	add	r7, sp, #0
 8000792:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000794:	f107 031c 	add.w	r3, r7, #28
 8000798:	2200      	movs	r2, #0
 800079a:	601a      	str	r2, [r3, #0]
 800079c:	605a      	str	r2, [r3, #4]
 800079e:	609a      	str	r2, [r3, #8]
 80007a0:	60da      	str	r2, [r3, #12]
 80007a2:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 80007a4:	687b      	ldr	r3, [r7, #4]
 80007a6:	681b      	ldr	r3, [r3, #0]
 80007a8:	4a2b      	ldr	r2, [pc, #172]	; (8000858 <HAL_DAC_MspInit+0xcc>)
 80007aa:	4293      	cmp	r3, r2
 80007ac:	d125      	bne.n	80007fa <HAL_DAC_MspInit+0x6e>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 80007ae:	4b2b      	ldr	r3, [pc, #172]	; (800085c <HAL_DAC_MspInit+0xd0>)
 80007b0:	69db      	ldr	r3, [r3, #28]
 80007b2:	4a2a      	ldr	r2, [pc, #168]	; (800085c <HAL_DAC_MspInit+0xd0>)
 80007b4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80007b8:	61d3      	str	r3, [r2, #28]
 80007ba:	4b28      	ldr	r3, [pc, #160]	; (800085c <HAL_DAC_MspInit+0xd0>)
 80007bc:	69db      	ldr	r3, [r3, #28]
 80007be:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80007c2:	61bb      	str	r3, [r7, #24]
 80007c4:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80007c6:	4b25      	ldr	r3, [pc, #148]	; (800085c <HAL_DAC_MspInit+0xd0>)
 80007c8:	695b      	ldr	r3, [r3, #20]
 80007ca:	4a24      	ldr	r2, [pc, #144]	; (800085c <HAL_DAC_MspInit+0xd0>)
 80007cc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80007d0:	6153      	str	r3, [r2, #20]
 80007d2:	4b22      	ldr	r3, [pc, #136]	; (800085c <HAL_DAC_MspInit+0xd0>)
 80007d4:	695b      	ldr	r3, [r3, #20]
 80007d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80007da:	617b      	str	r3, [r7, #20]
 80007dc:	697b      	ldr	r3, [r7, #20]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80007de:	2310      	movs	r3, #16
 80007e0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80007e2:	2303      	movs	r3, #3
 80007e4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007e6:	2300      	movs	r3, #0
 80007e8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007ea:	f107 031c 	add.w	r3, r7, #28
 80007ee:	4619      	mov	r1, r3
 80007f0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80007f4:	f001 f8ca 	bl	800198c <HAL_GPIO_Init>
  /* USER CODE BEGIN DAC2_MspInit 1 */

  /* USER CODE END DAC2_MspInit 1 */
  }

}
 80007f8:	e029      	b.n	800084e <HAL_DAC_MspInit+0xc2>
  else if(hdac->Instance==DAC2)
 80007fa:	687b      	ldr	r3, [r7, #4]
 80007fc:	681b      	ldr	r3, [r3, #0]
 80007fe:	4a18      	ldr	r2, [pc, #96]	; (8000860 <HAL_DAC_MspInit+0xd4>)
 8000800:	4293      	cmp	r3, r2
 8000802:	d124      	bne.n	800084e <HAL_DAC_MspInit+0xc2>
    __HAL_RCC_DAC2_CLK_ENABLE();
 8000804:	4b15      	ldr	r3, [pc, #84]	; (800085c <HAL_DAC_MspInit+0xd0>)
 8000806:	69db      	ldr	r3, [r3, #28]
 8000808:	4a14      	ldr	r2, [pc, #80]	; (800085c <HAL_DAC_MspInit+0xd0>)
 800080a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800080e:	61d3      	str	r3, [r2, #28]
 8000810:	4b12      	ldr	r3, [pc, #72]	; (800085c <HAL_DAC_MspInit+0xd0>)
 8000812:	69db      	ldr	r3, [r3, #28]
 8000814:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000818:	613b      	str	r3, [r7, #16]
 800081a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800081c:	4b0f      	ldr	r3, [pc, #60]	; (800085c <HAL_DAC_MspInit+0xd0>)
 800081e:	695b      	ldr	r3, [r3, #20]
 8000820:	4a0e      	ldr	r2, [pc, #56]	; (800085c <HAL_DAC_MspInit+0xd0>)
 8000822:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000826:	6153      	str	r3, [r2, #20]
 8000828:	4b0c      	ldr	r3, [pc, #48]	; (800085c <HAL_DAC_MspInit+0xd0>)
 800082a:	695b      	ldr	r3, [r3, #20]
 800082c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000830:	60fb      	str	r3, [r7, #12]
 8000832:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000834:	2340      	movs	r3, #64	; 0x40
 8000836:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000838:	2303      	movs	r3, #3
 800083a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800083c:	2300      	movs	r3, #0
 800083e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000840:	f107 031c 	add.w	r3, r7, #28
 8000844:	4619      	mov	r1, r3
 8000846:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800084a:	f001 f89f 	bl	800198c <HAL_GPIO_Init>
}
 800084e:	bf00      	nop
 8000850:	3730      	adds	r7, #48	; 0x30
 8000852:	46bd      	mov	sp, r7
 8000854:	bd80      	pop	{r7, pc}
 8000856:	bf00      	nop
 8000858:	40007400 	.word	0x40007400
 800085c:	40021000 	.word	0x40021000
 8000860:	40009800 	.word	0x40009800

08000864 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000864:	b580      	push	{r7, lr}
 8000866:	b084      	sub	sp, #16
 8000868:	af00      	add	r7, sp, #0
 800086a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 800086c:	687b      	ldr	r3, [r7, #4]
 800086e:	681b      	ldr	r3, [r3, #0]
 8000870:	4a0d      	ldr	r2, [pc, #52]	; (80008a8 <HAL_TIM_Base_MspInit+0x44>)
 8000872:	4293      	cmp	r3, r2
 8000874:	d113      	bne.n	800089e <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000876:	4b0d      	ldr	r3, [pc, #52]	; (80008ac <HAL_TIM_Base_MspInit+0x48>)
 8000878:	699b      	ldr	r3, [r3, #24]
 800087a:	4a0c      	ldr	r2, [pc, #48]	; (80008ac <HAL_TIM_Base_MspInit+0x48>)
 800087c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000880:	6193      	str	r3, [r2, #24]
 8000882:	4b0a      	ldr	r3, [pc, #40]	; (80008ac <HAL_TIM_Base_MspInit+0x48>)
 8000884:	699b      	ldr	r3, [r3, #24]
 8000886:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800088a:	60fb      	str	r3, [r7, #12]
 800088c:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 800088e:	2200      	movs	r2, #0
 8000890:	2100      	movs	r1, #0
 8000892:	2019      	movs	r0, #25
 8000894:	f000 ffb9 	bl	800180a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8000898:	2019      	movs	r0, #25
 800089a:	f000 ffd2 	bl	8001842 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 800089e:	bf00      	nop
 80008a0:	3710      	adds	r7, #16
 80008a2:	46bd      	mov	sp, r7
 80008a4:	bd80      	pop	{r7, pc}
 80008a6:	bf00      	nop
 80008a8:	40012c00 	.word	0x40012c00
 80008ac:	40021000 	.word	0x40021000

080008b0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80008b0:	b580      	push	{r7, lr}
 80008b2:	b08a      	sub	sp, #40	; 0x28
 80008b4:	af00      	add	r7, sp, #0
 80008b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008b8:	f107 0314 	add.w	r3, r7, #20
 80008bc:	2200      	movs	r2, #0
 80008be:	601a      	str	r2, [r3, #0]
 80008c0:	605a      	str	r2, [r3, #4]
 80008c2:	609a      	str	r2, [r3, #8]
 80008c4:	60da      	str	r2, [r3, #12]
 80008c6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80008c8:	687b      	ldr	r3, [r7, #4]
 80008ca:	681b      	ldr	r3, [r3, #0]
 80008cc:	4a18      	ldr	r2, [pc, #96]	; (8000930 <HAL_UART_MspInit+0x80>)
 80008ce:	4293      	cmp	r3, r2
 80008d0:	d129      	bne.n	8000926 <HAL_UART_MspInit+0x76>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80008d2:	4b18      	ldr	r3, [pc, #96]	; (8000934 <HAL_UART_MspInit+0x84>)
 80008d4:	69db      	ldr	r3, [r3, #28]
 80008d6:	4a17      	ldr	r2, [pc, #92]	; (8000934 <HAL_UART_MspInit+0x84>)
 80008d8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80008dc:	61d3      	str	r3, [r2, #28]
 80008de:	4b15      	ldr	r3, [pc, #84]	; (8000934 <HAL_UART_MspInit+0x84>)
 80008e0:	69db      	ldr	r3, [r3, #28]
 80008e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80008e6:	613b      	str	r3, [r7, #16]
 80008e8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008ea:	4b12      	ldr	r3, [pc, #72]	; (8000934 <HAL_UART_MspInit+0x84>)
 80008ec:	695b      	ldr	r3, [r3, #20]
 80008ee:	4a11      	ldr	r2, [pc, #68]	; (8000934 <HAL_UART_MspInit+0x84>)
 80008f0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80008f4:	6153      	str	r3, [r2, #20]
 80008f6:	4b0f      	ldr	r3, [pc, #60]	; (8000934 <HAL_UART_MspInit+0x84>)
 80008f8:	695b      	ldr	r3, [r3, #20]
 80008fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80008fe:	60fb      	str	r3, [r7, #12]
 8000900:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA15     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin|VCP_RX_Pin;
 8000902:	f248 0304 	movw	r3, #32772	; 0x8004
 8000906:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000908:	2302      	movs	r3, #2
 800090a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800090c:	2300      	movs	r3, #0
 800090e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000910:	2303      	movs	r3, #3
 8000912:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000914:	2307      	movs	r3, #7
 8000916:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000918:	f107 0314 	add.w	r3, r7, #20
 800091c:	4619      	mov	r1, r3
 800091e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000922:	f001 f833 	bl	800198c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000926:	bf00      	nop
 8000928:	3728      	adds	r7, #40	; 0x28
 800092a:	46bd      	mov	sp, r7
 800092c:	bd80      	pop	{r7, pc}
 800092e:	bf00      	nop
 8000930:	40004400 	.word	0x40004400
 8000934:	40021000 	.word	0x40021000

08000938 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000938:	b480      	push	{r7}
 800093a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800093c:	e7fe      	b.n	800093c <NMI_Handler+0x4>

0800093e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800093e:	b480      	push	{r7}
 8000940:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000942:	e7fe      	b.n	8000942 <HardFault_Handler+0x4>

08000944 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000944:	b480      	push	{r7}
 8000946:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000948:	e7fe      	b.n	8000948 <MemManage_Handler+0x4>

0800094a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800094a:	b480      	push	{r7}
 800094c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800094e:	e7fe      	b.n	800094e <BusFault_Handler+0x4>

08000950 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000950:	b480      	push	{r7}
 8000952:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000954:	e7fe      	b.n	8000954 <UsageFault_Handler+0x4>

08000956 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000956:	b480      	push	{r7}
 8000958:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800095a:	bf00      	nop
 800095c:	46bd      	mov	sp, r7
 800095e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000962:	4770      	bx	lr

08000964 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000964:	b480      	push	{r7}
 8000966:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000968:	bf00      	nop
 800096a:	46bd      	mov	sp, r7
 800096c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000970:	4770      	bx	lr

08000972 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000972:	b480      	push	{r7}
 8000974:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000976:	bf00      	nop
 8000978:	46bd      	mov	sp, r7
 800097a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800097e:	4770      	bx	lr

08000980 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000980:	b580      	push	{r7, lr}
 8000982:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000984:	f000 f8cc 	bl	8000b20 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000988:	bf00      	nop
 800098a:	bd80      	pop	{r7, pc}

0800098c <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line 0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 800098c:	b580      	push	{r7, lr}
 800098e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */
	if(HAL_GPIO_ReadPin(Signal_Overvoltage_GPIO_Port, Signal_Overvoltage_Pin) == GPIO_PIN_RESET)
 8000990:	2180      	movs	r1, #128	; 0x80
 8000992:	4808      	ldr	r0, [pc, #32]	; (80009b4 <EXTI0_IRQHandler+0x28>)
 8000994:	f001 f96c 	bl	8001c70 <HAL_GPIO_ReadPin>
 8000998:	4603      	mov	r3, r0
 800099a:	2b00      	cmp	r3, #0
 800099c:	d104      	bne.n	80009a8 <EXTI0_IRQHandler+0x1c>
		signalCount++;
 800099e:	4b06      	ldr	r3, [pc, #24]	; (80009b8 <EXTI0_IRQHandler+0x2c>)
 80009a0:	681b      	ldr	r3, [r3, #0]
 80009a2:	3301      	adds	r3, #1
 80009a4:	4a04      	ldr	r2, [pc, #16]	; (80009b8 <EXTI0_IRQHandler+0x2c>)
 80009a6:	6013      	str	r3, [r2, #0]

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 80009a8:	2001      	movs	r0, #1
 80009aa:	f001 f9ab 	bl	8001d04 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 80009ae:	bf00      	nop
 80009b0:	bd80      	pop	{r7, pc}
 80009b2:	bf00      	nop
 80009b4:	48000400 	.word	0x48000400
 80009b8:	200000b8 	.word	0x200000b8

080009bc <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update and TIM16 interrupts.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 80009bc:	b580      	push	{r7, lr}
 80009be:	b082      	sub	sp, #8
 80009c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */
	HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 80009c2:	2108      	movs	r1, #8
 80009c4:	4810      	ldr	r0, [pc, #64]	; (8000a08 <TIM1_UP_TIM16_IRQHandler+0x4c>)
 80009c6:	f001 f983 	bl	8001cd0 <HAL_GPIO_TogglePin>
	for(uint8_t i = 0; i<4; i++)
 80009ca:	2300      	movs	r3, #0
 80009cc:	71fb      	strb	r3, [r7, #7]
 80009ce:	e00a      	b.n	80009e6 <TIM1_UP_TIM16_IRQHandler+0x2a>
		uartDataOut[i] = (signalCount>>i) & 0xFF;
 80009d0:	4b0e      	ldr	r3, [pc, #56]	; (8000a0c <TIM1_UP_TIM16_IRQHandler+0x50>)
 80009d2:	681a      	ldr	r2, [r3, #0]
 80009d4:	79fb      	ldrb	r3, [r7, #7]
 80009d6:	40da      	lsrs	r2, r3
 80009d8:	79fb      	ldrb	r3, [r7, #7]
 80009da:	b2d1      	uxtb	r1, r2
 80009dc:	4a0c      	ldr	r2, [pc, #48]	; (8000a10 <TIM1_UP_TIM16_IRQHandler+0x54>)
 80009de:	54d1      	strb	r1, [r2, r3]
	for(uint8_t i = 0; i<4; i++)
 80009e0:	79fb      	ldrb	r3, [r7, #7]
 80009e2:	3301      	adds	r3, #1
 80009e4:	71fb      	strb	r3, [r7, #7]
 80009e6:	79fb      	ldrb	r3, [r7, #7]
 80009e8:	2b03      	cmp	r3, #3
 80009ea:	d9f1      	bls.n	80009d0 <TIM1_UP_TIM16_IRQHandler+0x14>

	HAL_UART_Transmit(&huart2, uartDataOut, sizeof(uartDataOut), 1);
 80009ec:	2301      	movs	r3, #1
 80009ee:	2204      	movs	r2, #4
 80009f0:	4907      	ldr	r1, [pc, #28]	; (8000a10 <TIM1_UP_TIM16_IRQHandler+0x54>)
 80009f2:	4808      	ldr	r0, [pc, #32]	; (8000a14 <TIM1_UP_TIM16_IRQHandler+0x58>)
 80009f4:	f003 f950 	bl	8003c98 <HAL_UART_Transmit>
  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80009f8:	4807      	ldr	r0, [pc, #28]	; (8000a18 <TIM1_UP_TIM16_IRQHandler+0x5c>)
 80009fa:	f002 fd49 	bl	8003490 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 80009fe:	bf00      	nop
 8000a00:	3708      	adds	r7, #8
 8000a02:	46bd      	mov	sp, r7
 8000a04:	bd80      	pop	{r7, pc}
 8000a06:	bf00      	nop
 8000a08:	48000400 	.word	0x48000400
 8000a0c:	200000b8 	.word	0x200000b8
 8000a10:	200000b4 	.word	0x200000b4
 8000a14:	20000108 	.word	0x20000108
 8000a18:	200000bc 	.word	0x200000bc

08000a1c <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000a1c:	b480      	push	{r7}
 8000a1e:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000a20:	4b06      	ldr	r3, [pc, #24]	; (8000a3c <SystemInit+0x20>)
 8000a22:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000a26:	4a05      	ldr	r2, [pc, #20]	; (8000a3c <SystemInit+0x20>)
 8000a28:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000a2c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a30:	bf00      	nop
 8000a32:	46bd      	mov	sp, r7
 8000a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a38:	4770      	bx	lr
 8000a3a:	bf00      	nop
 8000a3c:	e000ed00 	.word	0xe000ed00

08000a40 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000a40:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000a78 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000a44:	480d      	ldr	r0, [pc, #52]	; (8000a7c <LoopForever+0x6>)
  ldr r1, =_edata
 8000a46:	490e      	ldr	r1, [pc, #56]	; (8000a80 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000a48:	4a0e      	ldr	r2, [pc, #56]	; (8000a84 <LoopForever+0xe>)
  movs r3, #0
 8000a4a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a4c:	e002      	b.n	8000a54 <LoopCopyDataInit>

08000a4e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a4e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a50:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a52:	3304      	adds	r3, #4

08000a54 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a54:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a56:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a58:	d3f9      	bcc.n	8000a4e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a5a:	4a0b      	ldr	r2, [pc, #44]	; (8000a88 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000a5c:	4c0b      	ldr	r4, [pc, #44]	; (8000a8c <LoopForever+0x16>)
  movs r3, #0
 8000a5e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a60:	e001      	b.n	8000a66 <LoopFillZerobss>

08000a62 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a62:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a64:	3204      	adds	r2, #4

08000a66 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a66:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a68:	d3fb      	bcc.n	8000a62 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000a6a:	f7ff ffd7 	bl	8000a1c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000a6e:	f003 fd17 	bl	80044a0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000a72:	f7ff fba9 	bl	80001c8 <main>

08000a76 <LoopForever>:

LoopForever:
    b LoopForever
 8000a76:	e7fe      	b.n	8000a76 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000a78:	20003000 	.word	0x20003000
  ldr r0, =_sdata
 8000a7c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a80:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000a84:	08004550 	.word	0x08004550
  ldr r2, =_sbss
 8000a88:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000a8c:	20000190 	.word	0x20000190

08000a90 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000a90:	e7fe      	b.n	8000a90 <ADC1_2_IRQHandler>
	...

08000a94 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a94:	b580      	push	{r7, lr}
 8000a96:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a98:	4b08      	ldr	r3, [pc, #32]	; (8000abc <HAL_Init+0x28>)
 8000a9a:	681b      	ldr	r3, [r3, #0]
 8000a9c:	4a07      	ldr	r2, [pc, #28]	; (8000abc <HAL_Init+0x28>)
 8000a9e:	f043 0310 	orr.w	r3, r3, #16
 8000aa2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000aa4:	2003      	movs	r0, #3
 8000aa6:	f000 fea5 	bl	80017f4 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000aaa:	2000      	movs	r0, #0
 8000aac:	f000 f808 	bl	8000ac0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ab0:	f7ff fe0c 	bl	80006cc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ab4:	2300      	movs	r3, #0
}
 8000ab6:	4618      	mov	r0, r3
 8000ab8:	bd80      	pop	{r7, pc}
 8000aba:	bf00      	nop
 8000abc:	40022000 	.word	0x40022000

08000ac0 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	b082      	sub	sp, #8
 8000ac4:	af00      	add	r7, sp, #0
 8000ac6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ac8:	4b12      	ldr	r3, [pc, #72]	; (8000b14 <HAL_InitTick+0x54>)
 8000aca:	681a      	ldr	r2, [r3, #0]
 8000acc:	4b12      	ldr	r3, [pc, #72]	; (8000b18 <HAL_InitTick+0x58>)
 8000ace:	781b      	ldrb	r3, [r3, #0]
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ad6:	fbb3 f3f1 	udiv	r3, r3, r1
 8000ada:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ade:	4618      	mov	r0, r3
 8000ae0:	f000 febd 	bl	800185e <HAL_SYSTICK_Config>
 8000ae4:	4603      	mov	r3, r0
 8000ae6:	2b00      	cmp	r3, #0
 8000ae8:	d001      	beq.n	8000aee <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000aea:	2301      	movs	r3, #1
 8000aec:	e00e      	b.n	8000b0c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000aee:	687b      	ldr	r3, [r7, #4]
 8000af0:	2b0f      	cmp	r3, #15
 8000af2:	d80a      	bhi.n	8000b0a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000af4:	2200      	movs	r2, #0
 8000af6:	6879      	ldr	r1, [r7, #4]
 8000af8:	f04f 30ff 	mov.w	r0, #4294967295
 8000afc:	f000 fe85 	bl	800180a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000b00:	4a06      	ldr	r2, [pc, #24]	; (8000b1c <HAL_InitTick+0x5c>)
 8000b02:	687b      	ldr	r3, [r7, #4]
 8000b04:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8000b06:	2300      	movs	r3, #0
 8000b08:	e000      	b.n	8000b0c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000b0a:	2301      	movs	r3, #1
}
 8000b0c:	4618      	mov	r0, r3
 8000b0e:	3708      	adds	r7, #8
 8000b10:	46bd      	mov	sp, r7
 8000b12:	bd80      	pop	{r7, pc}
 8000b14:	20000000 	.word	0x20000000
 8000b18:	20000008 	.word	0x20000008
 8000b1c:	20000004 	.word	0x20000004

08000b20 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b20:	b480      	push	{r7}
 8000b22:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b24:	4b06      	ldr	r3, [pc, #24]	; (8000b40 <HAL_IncTick+0x20>)
 8000b26:	781b      	ldrb	r3, [r3, #0]
 8000b28:	461a      	mov	r2, r3
 8000b2a:	4b06      	ldr	r3, [pc, #24]	; (8000b44 <HAL_IncTick+0x24>)
 8000b2c:	681b      	ldr	r3, [r3, #0]
 8000b2e:	4413      	add	r3, r2
 8000b30:	4a04      	ldr	r2, [pc, #16]	; (8000b44 <HAL_IncTick+0x24>)
 8000b32:	6013      	str	r3, [r2, #0]
}
 8000b34:	bf00      	nop
 8000b36:	46bd      	mov	sp, r7
 8000b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b3c:	4770      	bx	lr
 8000b3e:	bf00      	nop
 8000b40:	20000008 	.word	0x20000008
 8000b44:	2000018c 	.word	0x2000018c

08000b48 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b48:	b480      	push	{r7}
 8000b4a:	af00      	add	r7, sp, #0
  return uwTick;  
 8000b4c:	4b03      	ldr	r3, [pc, #12]	; (8000b5c <HAL_GetTick+0x14>)
 8000b4e:	681b      	ldr	r3, [r3, #0]
}
 8000b50:	4618      	mov	r0, r3
 8000b52:	46bd      	mov	sp, r7
 8000b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b58:	4770      	bx	lr
 8000b5a:	bf00      	nop
 8000b5c:	2000018c 	.word	0x2000018c

08000b60 <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000b60:	b580      	push	{r7, lr}
 8000b62:	b09a      	sub	sp, #104	; 0x68
 8000b64:	af00      	add	r7, sp, #0
 8000b66:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000b68:	2300      	movs	r3, #0
 8000b6a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 8000b6e:	2300      	movs	r3, #0
 8000b70:	663b      	str	r3, [r7, #96]	; 0x60
  __IO uint32_t wait_loop_index = 0U;
 8000b72:	2300      	movs	r3, #0
 8000b74:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000b76:	687b      	ldr	r3, [r7, #4]
 8000b78:	2b00      	cmp	r3, #0
 8000b7a:	d101      	bne.n	8000b80 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 8000b7c:	2301      	movs	r3, #1
 8000b7e:	e172      	b.n	8000e66 <HAL_ADC_Init+0x306>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	691b      	ldr	r3, [r3, #16]
 8000b84:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b8a:	f003 0310 	and.w	r3, r3, #16
 8000b8e:	2b00      	cmp	r3, #0
 8000b90:	d176      	bne.n	8000c80 <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 8000b92:	687b      	ldr	r3, [r7, #4]
 8000b94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b96:	2b00      	cmp	r3, #0
 8000b98:	d152      	bne.n	8000c40 <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 8000b9a:	687b      	ldr	r3, [r7, #4]
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	2200      	movs	r2, #0
 8000ba4:	64da      	str	r2, [r3, #76]	; 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 8000ba6:	687b      	ldr	r3, [r7, #4]
 8000ba8:	2200      	movs	r2, #0
 8000baa:	649a      	str	r2, [r3, #72]	; 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	2200      	movs	r2, #0
 8000bb0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000bb4:	6878      	ldr	r0, [r7, #4]
 8000bb6:	f7ff fdad 	bl	8000714 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	681b      	ldr	r3, [r3, #0]
 8000bbe:	689b      	ldr	r3, [r3, #8]
 8000bc0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000bc4:	2b00      	cmp	r3, #0
 8000bc6:	d13b      	bne.n	8000c40 <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 8000bc8:	6878      	ldr	r0, [r7, #4]
 8000bca:	f000 fce3 	bl	8001594 <ADC_Disable>
 8000bce:	4603      	mov	r3, r0
 8000bd0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bd8:	f003 0310 	and.w	r3, r3, #16
 8000bdc:	2b00      	cmp	r3, #0
 8000bde:	d12f      	bne.n	8000c40 <HAL_ADC_Init+0xe0>
 8000be0:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	d12b      	bne.n	8000c40 <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bec:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000bf0:	f023 0302 	bic.w	r3, r3, #2
 8000bf4:	f043 0202 	orr.w	r2, r3, #2
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	641a      	str	r2, [r3, #64]	; 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	681b      	ldr	r3, [r3, #0]
 8000c00:	689a      	ldr	r2, [r3, #8]
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	681b      	ldr	r3, [r3, #0]
 8000c06:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8000c0a:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	681b      	ldr	r3, [r3, #0]
 8000c10:	689a      	ldr	r2, [r3, #8]
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	681b      	ldr	r3, [r3, #0]
 8000c16:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000c1a:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8000c1c:	4b94      	ldr	r3, [pc, #592]	; (8000e70 <HAL_ADC_Init+0x310>)
 8000c1e:	681b      	ldr	r3, [r3, #0]
 8000c20:	4a94      	ldr	r2, [pc, #592]	; (8000e74 <HAL_ADC_Init+0x314>)
 8000c22:	fba2 2303 	umull	r2, r3, r2, r3
 8000c26:	0c9a      	lsrs	r2, r3, #18
 8000c28:	4613      	mov	r3, r2
 8000c2a:	009b      	lsls	r3, r3, #2
 8000c2c:	4413      	add	r3, r2
 8000c2e:	005b      	lsls	r3, r3, #1
 8000c30:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000c32:	e002      	b.n	8000c3a <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 8000c34:	68bb      	ldr	r3, [r7, #8]
 8000c36:	3b01      	subs	r3, #1
 8000c38:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000c3a:	68bb      	ldr	r3, [r7, #8]
 8000c3c:	2b00      	cmp	r3, #0
 8000c3e:	d1f9      	bne.n	8000c34 <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	681b      	ldr	r3, [r3, #0]
 8000c44:	689b      	ldr	r3, [r3, #8]
 8000c46:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c4a:	2b00      	cmp	r3, #0
 8000c4c:	d007      	beq.n	8000c5e <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	681b      	ldr	r3, [r3, #0]
 8000c52:	689b      	ldr	r3, [r3, #8]
 8000c54:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8000c58:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000c5c:	d110      	bne.n	8000c80 <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c62:	f023 0312 	bic.w	r3, r3, #18
 8000c66:	f043 0210 	orr.w	r2, r3, #16
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c72:	f043 0201 	orr.w	r2, r3, #1
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	645a      	str	r2, [r3, #68]	; 0x44
      
      tmp_hal_status = HAL_ERROR;
 8000c7a:	2301      	movs	r3, #1
 8000c7c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c84:	f003 0310 	and.w	r3, r3, #16
 8000c88:	2b00      	cmp	r3, #0
 8000c8a:	f040 80df 	bne.w	8000e4c <HAL_ADC_Init+0x2ec>
 8000c8e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	f040 80da 	bne.w	8000e4c <HAL_ADC_Init+0x2ec>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	681b      	ldr	r3, [r3, #0]
 8000c9c:	689b      	ldr	r3, [r3, #8]
 8000c9e:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 8000ca2:	2b00      	cmp	r3, #0
 8000ca4:	f040 80d2 	bne.w	8000e4c <HAL_ADC_Init+0x2ec>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cac:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8000cb0:	f043 0202 	orr.w	r2, r3, #2
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	641a      	str	r2, [r3, #64]	; 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8000cb8:	4b6f      	ldr	r3, [pc, #444]	; (8000e78 <HAL_ADC_Init+0x318>)
 8000cba:	65fb      	str	r3, [r7, #92]	; 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	681b      	ldr	r3, [r3, #0]
 8000cc0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000cc4:	d102      	bne.n	8000ccc <HAL_ADC_Init+0x16c>
 8000cc6:	4b6d      	ldr	r3, [pc, #436]	; (8000e7c <HAL_ADC_Init+0x31c>)
 8000cc8:	60fb      	str	r3, [r7, #12]
 8000cca:	e002      	b.n	8000cd2 <HAL_ADC_Init+0x172>
 8000ccc:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8000cd0:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	681b      	ldr	r3, [r3, #0]
 8000cd6:	689b      	ldr	r3, [r3, #8]
 8000cd8:	f003 0303 	and.w	r3, r3, #3
 8000cdc:	2b01      	cmp	r3, #1
 8000cde:	d108      	bne.n	8000cf2 <HAL_ADC_Init+0x192>
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	681b      	ldr	r3, [r3, #0]
 8000ce4:	681b      	ldr	r3, [r3, #0]
 8000ce6:	f003 0301 	and.w	r3, r3, #1
 8000cea:	2b01      	cmp	r3, #1
 8000cec:	d101      	bne.n	8000cf2 <HAL_ADC_Init+0x192>
 8000cee:	2301      	movs	r3, #1
 8000cf0:	e000      	b.n	8000cf4 <HAL_ADC_Init+0x194>
 8000cf2:	2300      	movs	r3, #0
 8000cf4:	2b00      	cmp	r3, #0
 8000cf6:	d11c      	bne.n	8000d32 <HAL_ADC_Init+0x1d2>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8000cf8:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8000cfa:	2b00      	cmp	r3, #0
 8000cfc:	d010      	beq.n	8000d20 <HAL_ADC_Init+0x1c0>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8000cfe:	68fb      	ldr	r3, [r7, #12]
 8000d00:	689b      	ldr	r3, [r3, #8]
 8000d02:	f003 0303 	and.w	r3, r3, #3
 8000d06:	2b01      	cmp	r3, #1
 8000d08:	d107      	bne.n	8000d1a <HAL_ADC_Init+0x1ba>
 8000d0a:	68fb      	ldr	r3, [r7, #12]
 8000d0c:	681b      	ldr	r3, [r3, #0]
 8000d0e:	f003 0301 	and.w	r3, r3, #1
 8000d12:	2b01      	cmp	r3, #1
 8000d14:	d101      	bne.n	8000d1a <HAL_ADC_Init+0x1ba>
 8000d16:	2301      	movs	r3, #1
 8000d18:	e000      	b.n	8000d1c <HAL_ADC_Init+0x1bc>
 8000d1a:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8000d1c:	2b00      	cmp	r3, #0
 8000d1e:	d108      	bne.n	8000d32 <HAL_ADC_Init+0x1d2>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 8000d20:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000d22:	689b      	ldr	r3, [r3, #8]
 8000d24:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	685b      	ldr	r3, [r3, #4]
 8000d2c:	431a      	orrs	r2, r3
 8000d2e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000d30:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	7e5b      	ldrb	r3, [r3, #25]
 8000d36:	035b      	lsls	r3, r3, #13
 8000d38:	687a      	ldr	r2, [r7, #4]
 8000d3a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8000d3c:	2a01      	cmp	r2, #1
 8000d3e:	d002      	beq.n	8000d46 <HAL_ADC_Init+0x1e6>
 8000d40:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000d44:	e000      	b.n	8000d48 <HAL_ADC_Init+0x1e8>
 8000d46:	2200      	movs	r2, #0
 8000d48:	431a      	orrs	r2, r3
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	68db      	ldr	r3, [r3, #12]
 8000d4e:	431a      	orrs	r2, r3
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	689b      	ldr	r3, [r3, #8]
 8000d54:	4313      	orrs	r3, r2
 8000d56:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8000d58:	4313      	orrs	r3, r2
 8000d5a:	663b      	str	r3, [r7, #96]	; 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000d62:	2b01      	cmp	r3, #1
 8000d64:	d11b      	bne.n	8000d9e <HAL_ADC_Init+0x23e>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	7e5b      	ldrb	r3, [r3, #25]
 8000d6a:	2b00      	cmp	r3, #0
 8000d6c:	d109      	bne.n	8000d82 <HAL_ADC_Init+0x222>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d72:	3b01      	subs	r3, #1
 8000d74:	045a      	lsls	r2, r3, #17
 8000d76:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8000d78:	4313      	orrs	r3, r2
 8000d7a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000d7e:	663b      	str	r3, [r7, #96]	; 0x60
 8000d80:	e00d      	b.n	8000d9e <HAL_ADC_Init+0x23e>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d86:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8000d8a:	f043 0220 	orr.w	r2, r3, #32
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d96:	f043 0201 	orr.w	r2, r3, #1
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	645a      	str	r2, [r3, #68]	; 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000da2:	2b01      	cmp	r3, #1
 8000da4:	d007      	beq.n	8000db6 <HAL_ADC_Init+0x256>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000dae:	4313      	orrs	r3, r2
 8000db0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8000db2:	4313      	orrs	r3, r2
 8000db4:	663b      	str	r3, [r7, #96]	; 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	681b      	ldr	r3, [r3, #0]
 8000dba:	689b      	ldr	r3, [r3, #8]
 8000dbc:	f003 030c 	and.w	r3, r3, #12
 8000dc0:	2b00      	cmp	r3, #0
 8000dc2:	d114      	bne.n	8000dee <HAL_ADC_Init+0x28e>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	681b      	ldr	r3, [r3, #0]
 8000dc8:	68db      	ldr	r3, [r3, #12]
 8000dca:	687a      	ldr	r2, [r7, #4]
 8000dcc:	6812      	ldr	r2, [r2, #0]
 8000dce:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8000dd2:	f023 0302 	bic.w	r3, r3, #2
 8000dd6:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	7e1b      	ldrb	r3, [r3, #24]
 8000ddc:	039a      	lsls	r2, r3, #14
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8000de4:	005b      	lsls	r3, r3, #1
 8000de6:	4313      	orrs	r3, r2
 8000de8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8000dea:	4313      	orrs	r3, r2
 8000dec:	663b      	str	r3, [r7, #96]	; 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	681b      	ldr	r3, [r3, #0]
 8000df2:	68da      	ldr	r2, [r3, #12]
 8000df4:	4b22      	ldr	r3, [pc, #136]	; (8000e80 <HAL_ADC_Init+0x320>)
 8000df6:	4013      	ands	r3, r2
 8000df8:	687a      	ldr	r2, [r7, #4]
 8000dfa:	6812      	ldr	r2, [r2, #0]
 8000dfc:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8000dfe:	430b      	orrs	r3, r1
 8000e00:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	691b      	ldr	r3, [r3, #16]
 8000e06:	2b01      	cmp	r3, #1
 8000e08:	d10c      	bne.n	8000e24 <HAL_ADC_Init+0x2c4>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	681b      	ldr	r3, [r3, #0]
 8000e0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e10:	f023 010f 	bic.w	r1, r3, #15
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	69db      	ldr	r3, [r3, #28]
 8000e18:	1e5a      	subs	r2, r3, #1
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	681b      	ldr	r3, [r3, #0]
 8000e1e:	430a      	orrs	r2, r1
 8000e20:	631a      	str	r2, [r3, #48]	; 0x30
 8000e22:	e007      	b.n	8000e34 <HAL_ADC_Init+0x2d4>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	681b      	ldr	r3, [r3, #0]
 8000e28:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	681b      	ldr	r3, [r3, #0]
 8000e2e:	f022 020f 	bic.w	r2, r2, #15
 8000e32:	631a      	str	r2, [r3, #48]	; 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	2200      	movs	r2, #0
 8000e38:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e3e:	f023 0303 	bic.w	r3, r3, #3
 8000e42:	f043 0201 	orr.w	r2, r3, #1
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	641a      	str	r2, [r3, #64]	; 0x40
 8000e4a:	e00a      	b.n	8000e62 <HAL_ADC_Init+0x302>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e50:	f023 0312 	bic.w	r3, r3, #18
 8000e54:	f043 0210 	orr.w	r2, r3, #16
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 8000e5c:	2301      	movs	r3, #1
 8000e5e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 8000e62:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8000e66:	4618      	mov	r0, r3
 8000e68:	3768      	adds	r7, #104	; 0x68
 8000e6a:	46bd      	mov	sp, r7
 8000e6c:	bd80      	pop	{r7, pc}
 8000e6e:	bf00      	nop
 8000e70:	20000000 	.word	0x20000000
 8000e74:	431bde83 	.word	0x431bde83
 8000e78:	50000300 	.word	0x50000300
 8000e7c:	50000100 	.word	0x50000100
 8000e80:	fff0c007 	.word	0xfff0c007

08000e84 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8000e84:	b480      	push	{r7}
 8000e86:	b09b      	sub	sp, #108	; 0x6c
 8000e88:	af00      	add	r7, sp, #0
 8000e8a:	6078      	str	r0, [r7, #4]
 8000e8c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000e8e:	2300      	movs	r3, #0
 8000e90:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 8000e94:	2300      	movs	r3, #0
 8000e96:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8000e9e:	2b01      	cmp	r3, #1
 8000ea0:	d101      	bne.n	8000ea6 <HAL_ADC_ConfigChannel+0x22>
 8000ea2:	2302      	movs	r3, #2
 8000ea4:	e2a5      	b.n	80013f2 <HAL_ADC_ConfigChannel+0x56e>
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	2201      	movs	r2, #1
 8000eaa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	681b      	ldr	r3, [r3, #0]
 8000eb2:	689b      	ldr	r3, [r3, #8]
 8000eb4:	f003 0304 	and.w	r3, r3, #4
 8000eb8:	2b00      	cmp	r3, #0
 8000eba:	f040 8289 	bne.w	80013d0 <HAL_ADC_ConfigChannel+0x54c>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 8000ebe:	683b      	ldr	r3, [r7, #0]
 8000ec0:	685b      	ldr	r3, [r3, #4]
 8000ec2:	2b04      	cmp	r3, #4
 8000ec4:	d81c      	bhi.n	8000f00 <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	681b      	ldr	r3, [r3, #0]
 8000eca:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8000ecc:	683b      	ldr	r3, [r7, #0]
 8000ece:	685a      	ldr	r2, [r3, #4]
 8000ed0:	4613      	mov	r3, r2
 8000ed2:	005b      	lsls	r3, r3, #1
 8000ed4:	4413      	add	r3, r2
 8000ed6:	005b      	lsls	r3, r3, #1
 8000ed8:	461a      	mov	r2, r3
 8000eda:	231f      	movs	r3, #31
 8000edc:	4093      	lsls	r3, r2
 8000ede:	43db      	mvns	r3, r3
 8000ee0:	4019      	ands	r1, r3
 8000ee2:	683b      	ldr	r3, [r7, #0]
 8000ee4:	6818      	ldr	r0, [r3, #0]
 8000ee6:	683b      	ldr	r3, [r7, #0]
 8000ee8:	685a      	ldr	r2, [r3, #4]
 8000eea:	4613      	mov	r3, r2
 8000eec:	005b      	lsls	r3, r3, #1
 8000eee:	4413      	add	r3, r2
 8000ef0:	005b      	lsls	r3, r3, #1
 8000ef2:	fa00 f203 	lsl.w	r2, r0, r3
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	681b      	ldr	r3, [r3, #0]
 8000efa:	430a      	orrs	r2, r1
 8000efc:	631a      	str	r2, [r3, #48]	; 0x30
 8000efe:	e063      	b.n	8000fc8 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 8000f00:	683b      	ldr	r3, [r7, #0]
 8000f02:	685b      	ldr	r3, [r3, #4]
 8000f04:	2b09      	cmp	r3, #9
 8000f06:	d81e      	bhi.n	8000f46 <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8000f0e:	683b      	ldr	r3, [r7, #0]
 8000f10:	685a      	ldr	r2, [r3, #4]
 8000f12:	4613      	mov	r3, r2
 8000f14:	005b      	lsls	r3, r3, #1
 8000f16:	4413      	add	r3, r2
 8000f18:	005b      	lsls	r3, r3, #1
 8000f1a:	3b1e      	subs	r3, #30
 8000f1c:	221f      	movs	r2, #31
 8000f1e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f22:	43db      	mvns	r3, r3
 8000f24:	4019      	ands	r1, r3
 8000f26:	683b      	ldr	r3, [r7, #0]
 8000f28:	6818      	ldr	r0, [r3, #0]
 8000f2a:	683b      	ldr	r3, [r7, #0]
 8000f2c:	685a      	ldr	r2, [r3, #4]
 8000f2e:	4613      	mov	r3, r2
 8000f30:	005b      	lsls	r3, r3, #1
 8000f32:	4413      	add	r3, r2
 8000f34:	005b      	lsls	r3, r3, #1
 8000f36:	3b1e      	subs	r3, #30
 8000f38:	fa00 f203 	lsl.w	r2, r0, r3
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	430a      	orrs	r2, r1
 8000f42:	635a      	str	r2, [r3, #52]	; 0x34
 8000f44:	e040      	b.n	8000fc8 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 8000f46:	683b      	ldr	r3, [r7, #0]
 8000f48:	685b      	ldr	r3, [r3, #4]
 8000f4a:	2b0e      	cmp	r3, #14
 8000f4c:	d81e      	bhi.n	8000f8c <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	681b      	ldr	r3, [r3, #0]
 8000f52:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8000f54:	683b      	ldr	r3, [r7, #0]
 8000f56:	685a      	ldr	r2, [r3, #4]
 8000f58:	4613      	mov	r3, r2
 8000f5a:	005b      	lsls	r3, r3, #1
 8000f5c:	4413      	add	r3, r2
 8000f5e:	005b      	lsls	r3, r3, #1
 8000f60:	3b3c      	subs	r3, #60	; 0x3c
 8000f62:	221f      	movs	r2, #31
 8000f64:	fa02 f303 	lsl.w	r3, r2, r3
 8000f68:	43db      	mvns	r3, r3
 8000f6a:	4019      	ands	r1, r3
 8000f6c:	683b      	ldr	r3, [r7, #0]
 8000f6e:	6818      	ldr	r0, [r3, #0]
 8000f70:	683b      	ldr	r3, [r7, #0]
 8000f72:	685a      	ldr	r2, [r3, #4]
 8000f74:	4613      	mov	r3, r2
 8000f76:	005b      	lsls	r3, r3, #1
 8000f78:	4413      	add	r3, r2
 8000f7a:	005b      	lsls	r3, r3, #1
 8000f7c:	3b3c      	subs	r3, #60	; 0x3c
 8000f7e:	fa00 f203 	lsl.w	r2, r0, r3
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	430a      	orrs	r2, r1
 8000f88:	639a      	str	r2, [r3, #56]	; 0x38
 8000f8a:	e01d      	b.n	8000fc8 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8000f92:	683b      	ldr	r3, [r7, #0]
 8000f94:	685a      	ldr	r2, [r3, #4]
 8000f96:	4613      	mov	r3, r2
 8000f98:	005b      	lsls	r3, r3, #1
 8000f9a:	4413      	add	r3, r2
 8000f9c:	005b      	lsls	r3, r3, #1
 8000f9e:	3b5a      	subs	r3, #90	; 0x5a
 8000fa0:	221f      	movs	r2, #31
 8000fa2:	fa02 f303 	lsl.w	r3, r2, r3
 8000fa6:	43db      	mvns	r3, r3
 8000fa8:	4019      	ands	r1, r3
 8000faa:	683b      	ldr	r3, [r7, #0]
 8000fac:	6818      	ldr	r0, [r3, #0]
 8000fae:	683b      	ldr	r3, [r7, #0]
 8000fb0:	685a      	ldr	r2, [r3, #4]
 8000fb2:	4613      	mov	r3, r2
 8000fb4:	005b      	lsls	r3, r3, #1
 8000fb6:	4413      	add	r3, r2
 8000fb8:	005b      	lsls	r3, r3, #1
 8000fba:	3b5a      	subs	r3, #90	; 0x5a
 8000fbc:	fa00 f203 	lsl.w	r2, r0, r3
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	430a      	orrs	r2, r1
 8000fc6:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	689b      	ldr	r3, [r3, #8]
 8000fce:	f003 030c 	and.w	r3, r3, #12
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	f040 80e5 	bne.w	80011a2 <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 8000fd8:	683b      	ldr	r3, [r7, #0]
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	2b09      	cmp	r3, #9
 8000fde:	d91c      	bls.n	800101a <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	6999      	ldr	r1, [r3, #24]
 8000fe6:	683b      	ldr	r3, [r7, #0]
 8000fe8:	681a      	ldr	r2, [r3, #0]
 8000fea:	4613      	mov	r3, r2
 8000fec:	005b      	lsls	r3, r3, #1
 8000fee:	4413      	add	r3, r2
 8000ff0:	3b1e      	subs	r3, #30
 8000ff2:	2207      	movs	r2, #7
 8000ff4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ff8:	43db      	mvns	r3, r3
 8000ffa:	4019      	ands	r1, r3
 8000ffc:	683b      	ldr	r3, [r7, #0]
 8000ffe:	6898      	ldr	r0, [r3, #8]
 8001000:	683b      	ldr	r3, [r7, #0]
 8001002:	681a      	ldr	r2, [r3, #0]
 8001004:	4613      	mov	r3, r2
 8001006:	005b      	lsls	r3, r3, #1
 8001008:	4413      	add	r3, r2
 800100a:	3b1e      	subs	r3, #30
 800100c:	fa00 f203 	lsl.w	r2, r0, r3
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	430a      	orrs	r2, r1
 8001016:	619a      	str	r2, [r3, #24]
 8001018:	e019      	b.n	800104e <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	6959      	ldr	r1, [r3, #20]
 8001020:	683b      	ldr	r3, [r7, #0]
 8001022:	681a      	ldr	r2, [r3, #0]
 8001024:	4613      	mov	r3, r2
 8001026:	005b      	lsls	r3, r3, #1
 8001028:	4413      	add	r3, r2
 800102a:	2207      	movs	r2, #7
 800102c:	fa02 f303 	lsl.w	r3, r2, r3
 8001030:	43db      	mvns	r3, r3
 8001032:	4019      	ands	r1, r3
 8001034:	683b      	ldr	r3, [r7, #0]
 8001036:	6898      	ldr	r0, [r3, #8]
 8001038:	683b      	ldr	r3, [r7, #0]
 800103a:	681a      	ldr	r2, [r3, #0]
 800103c:	4613      	mov	r3, r2
 800103e:	005b      	lsls	r3, r3, #1
 8001040:	4413      	add	r3, r2
 8001042:	fa00 f203 	lsl.w	r2, r0, r3
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	430a      	orrs	r2, r1
 800104c:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 800104e:	683b      	ldr	r3, [r7, #0]
 8001050:	695a      	ldr	r2, [r3, #20]
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	68db      	ldr	r3, [r3, #12]
 8001058:	08db      	lsrs	r3, r3, #3
 800105a:	f003 0303 	and.w	r3, r3, #3
 800105e:	005b      	lsls	r3, r3, #1
 8001060:	fa02 f303 	lsl.w	r3, r2, r3
 8001064:	663b      	str	r3, [r7, #96]	; 0x60
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 8001066:	683b      	ldr	r3, [r7, #0]
 8001068:	691b      	ldr	r3, [r3, #16]
 800106a:	3b01      	subs	r3, #1
 800106c:	2b03      	cmp	r3, #3
 800106e:	d84f      	bhi.n	8001110 <HAL_ADC_ConfigChannel+0x28c>
 8001070:	a201      	add	r2, pc, #4	; (adr r2, 8001078 <HAL_ADC_ConfigChannel+0x1f4>)
 8001072:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001076:	bf00      	nop
 8001078:	08001089 	.word	0x08001089
 800107c:	080010ab 	.word	0x080010ab
 8001080:	080010cd 	.word	0x080010cd
 8001084:	080010ef 	.word	0x080010ef
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800108e:	4b9e      	ldr	r3, [pc, #632]	; (8001308 <HAL_ADC_ConfigChannel+0x484>)
 8001090:	4013      	ands	r3, r2
 8001092:	683a      	ldr	r2, [r7, #0]
 8001094:	6812      	ldr	r2, [r2, #0]
 8001096:	0691      	lsls	r1, r2, #26
 8001098:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800109a:	430a      	orrs	r2, r1
 800109c:	431a      	orrs	r2, r3
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80010a6:	661a      	str	r2, [r3, #96]	; 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80010a8:	e07e      	b.n	80011a8 <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80010b0:	4b95      	ldr	r3, [pc, #596]	; (8001308 <HAL_ADC_ConfigChannel+0x484>)
 80010b2:	4013      	ands	r3, r2
 80010b4:	683a      	ldr	r2, [r7, #0]
 80010b6:	6812      	ldr	r2, [r2, #0]
 80010b8:	0691      	lsls	r1, r2, #26
 80010ba:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80010bc:	430a      	orrs	r2, r1
 80010be:	431a      	orrs	r2, r3
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80010c8:	665a      	str	r2, [r3, #100]	; 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80010ca:	e06d      	b.n	80011a8 <HAL_ADC_ConfigChannel+0x324>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80010d2:	4b8d      	ldr	r3, [pc, #564]	; (8001308 <HAL_ADC_ConfigChannel+0x484>)
 80010d4:	4013      	ands	r3, r2
 80010d6:	683a      	ldr	r2, [r7, #0]
 80010d8:	6812      	ldr	r2, [r2, #0]
 80010da:	0691      	lsls	r1, r2, #26
 80010dc:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80010de:	430a      	orrs	r2, r1
 80010e0:	431a      	orrs	r2, r3
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80010ea:	669a      	str	r2, [r3, #104]	; 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80010ec:	e05c      	b.n	80011a8 <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80010f4:	4b84      	ldr	r3, [pc, #528]	; (8001308 <HAL_ADC_ConfigChannel+0x484>)
 80010f6:	4013      	ands	r3, r2
 80010f8:	683a      	ldr	r2, [r7, #0]
 80010fa:	6812      	ldr	r2, [r2, #0]
 80010fc:	0691      	lsls	r1, r2, #26
 80010fe:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001100:	430a      	orrs	r2, r1
 8001102:	431a      	orrs	r2, r3
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800110c:	66da      	str	r2, [r3, #108]	; 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 800110e:	e04b      	b.n	80011a8 <HAL_ADC_ConfigChannel+0x324>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001116:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800111a:	683b      	ldr	r3, [r7, #0]
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	069b      	lsls	r3, r3, #26
 8001120:	429a      	cmp	r2, r3
 8001122:	d107      	bne.n	8001134 <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001132:	661a      	str	r2, [r3, #96]	; 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800113a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800113e:	683b      	ldr	r3, [r7, #0]
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	069b      	lsls	r3, r3, #26
 8001144:	429a      	cmp	r2, r3
 8001146:	d107      	bne.n	8001158 <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001156:	665a      	str	r2, [r3, #100]	; 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800115e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001162:	683b      	ldr	r3, [r7, #0]
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	069b      	lsls	r3, r3, #26
 8001168:	429a      	cmp	r2, r3
 800116a:	d107      	bne.n	800117c <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800117a:	669a      	str	r2, [r3, #104]	; 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001182:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001186:	683b      	ldr	r3, [r7, #0]
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	069b      	lsls	r3, r3, #26
 800118c:	429a      	cmp	r2, r3
 800118e:	d10a      	bne.n	80011a6 <HAL_ADC_ConfigChannel+0x322>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800119e:	66da      	str	r2, [r3, #108]	; 0x6c
      }
      break;
 80011a0:	e001      	b.n	80011a6 <HAL_ADC_ConfigChannel+0x322>
    }

  }
 80011a2:	bf00      	nop
 80011a4:	e000      	b.n	80011a8 <HAL_ADC_ConfigChannel+0x324>
      break;
 80011a6:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	689b      	ldr	r3, [r3, #8]
 80011ae:	f003 0303 	and.w	r3, r3, #3
 80011b2:	2b01      	cmp	r3, #1
 80011b4:	d108      	bne.n	80011c8 <HAL_ADC_ConfigChannel+0x344>
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	f003 0301 	and.w	r3, r3, #1
 80011c0:	2b01      	cmp	r3, #1
 80011c2:	d101      	bne.n	80011c8 <HAL_ADC_ConfigChannel+0x344>
 80011c4:	2301      	movs	r3, #1
 80011c6:	e000      	b.n	80011ca <HAL_ADC_ConfigChannel+0x346>
 80011c8:	2300      	movs	r3, #0
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	f040 810b 	bne.w	80013e6 <HAL_ADC_ConfigChannel+0x562>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 80011d0:	683b      	ldr	r3, [r7, #0]
 80011d2:	68db      	ldr	r3, [r3, #12]
 80011d4:	2b01      	cmp	r3, #1
 80011d6:	d00f      	beq.n	80011f8 <HAL_ADC_ConfigChannel+0x374>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 80011e0:	683b      	ldr	r3, [r7, #0]
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	2201      	movs	r2, #1
 80011e6:	fa02 f303 	lsl.w	r3, r2, r3
 80011ea:	43da      	mvns	r2, r3
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	400a      	ands	r2, r1
 80011f2:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 80011f6:	e049      	b.n	800128c <HAL_ADC_ConfigChannel+0x408>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8001200:	683b      	ldr	r3, [r7, #0]
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	2201      	movs	r2, #1
 8001206:	409a      	lsls	r2, r3
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	430a      	orrs	r2, r1
 800120e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 8001212:	683b      	ldr	r3, [r7, #0]
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	2b09      	cmp	r3, #9
 8001218:	d91c      	bls.n	8001254 <HAL_ADC_ConfigChannel+0x3d0>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	6999      	ldr	r1, [r3, #24]
 8001220:	683b      	ldr	r3, [r7, #0]
 8001222:	681a      	ldr	r2, [r3, #0]
 8001224:	4613      	mov	r3, r2
 8001226:	005b      	lsls	r3, r3, #1
 8001228:	4413      	add	r3, r2
 800122a:	3b1b      	subs	r3, #27
 800122c:	2207      	movs	r2, #7
 800122e:	fa02 f303 	lsl.w	r3, r2, r3
 8001232:	43db      	mvns	r3, r3
 8001234:	4019      	ands	r1, r3
 8001236:	683b      	ldr	r3, [r7, #0]
 8001238:	6898      	ldr	r0, [r3, #8]
 800123a:	683b      	ldr	r3, [r7, #0]
 800123c:	681a      	ldr	r2, [r3, #0]
 800123e:	4613      	mov	r3, r2
 8001240:	005b      	lsls	r3, r3, #1
 8001242:	4413      	add	r3, r2
 8001244:	3b1b      	subs	r3, #27
 8001246:	fa00 f203 	lsl.w	r2, r0, r3
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	430a      	orrs	r2, r1
 8001250:	619a      	str	r2, [r3, #24]
 8001252:	e01b      	b.n	800128c <HAL_ADC_ConfigChannel+0x408>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	6959      	ldr	r1, [r3, #20]
 800125a:	683b      	ldr	r3, [r7, #0]
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	1c5a      	adds	r2, r3, #1
 8001260:	4613      	mov	r3, r2
 8001262:	005b      	lsls	r3, r3, #1
 8001264:	4413      	add	r3, r2
 8001266:	2207      	movs	r2, #7
 8001268:	fa02 f303 	lsl.w	r3, r2, r3
 800126c:	43db      	mvns	r3, r3
 800126e:	4019      	ands	r1, r3
 8001270:	683b      	ldr	r3, [r7, #0]
 8001272:	6898      	ldr	r0, [r3, #8]
 8001274:	683b      	ldr	r3, [r7, #0]
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	1c5a      	adds	r2, r3, #1
 800127a:	4613      	mov	r3, r2
 800127c:	005b      	lsls	r3, r3, #1
 800127e:	4413      	add	r3, r2
 8001280:	fa00 f203 	lsl.w	r2, r0, r3
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	430a      	orrs	r2, r1
 800128a:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800128c:	4b1f      	ldr	r3, [pc, #124]	; (800130c <HAL_ADC_ConfigChannel+0x488>)
 800128e:	65fb      	str	r3, [r7, #92]	; 0x5c
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001290:	683b      	ldr	r3, [r7, #0]
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	2b10      	cmp	r3, #16
 8001296:	d105      	bne.n	80012a4 <HAL_ADC_ConfigChannel+0x420>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8001298:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800129a:	689b      	ldr	r3, [r3, #8]
 800129c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d015      	beq.n	80012d0 <HAL_ADC_ConfigChannel+0x44c>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 80012a4:	683b      	ldr	r3, [r7, #0]
 80012a6:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 80012a8:	2b11      	cmp	r3, #17
 80012aa:	d105      	bne.n	80012b8 <HAL_ADC_ConfigChannel+0x434>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 80012ac:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80012ae:	689b      	ldr	r3, [r3, #8]
 80012b0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	d00b      	beq.n	80012d0 <HAL_ADC_ConfigChannel+0x44c>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 80012b8:	683b      	ldr	r3, [r7, #0]
 80012ba:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 80012bc:	2b12      	cmp	r3, #18
 80012be:	f040 8092 	bne.w	80013e6 <HAL_ADC_ConfigChannel+0x562>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 80012c2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80012c4:	689b      	ldr	r3, [r3, #8]
 80012c6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	f040 808b 	bne.w	80013e6 <HAL_ADC_ConfigChannel+0x562>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80012d8:	d102      	bne.n	80012e0 <HAL_ADC_ConfigChannel+0x45c>
 80012da:	4b0d      	ldr	r3, [pc, #52]	; (8001310 <HAL_ADC_ConfigChannel+0x48c>)
 80012dc:	60fb      	str	r3, [r7, #12]
 80012de:	e002      	b.n	80012e6 <HAL_ADC_ConfigChannel+0x462>
 80012e0:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80012e4:	60fb      	str	r3, [r7, #12]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	689b      	ldr	r3, [r3, #8]
 80012ec:	f003 0303 	and.w	r3, r3, #3
 80012f0:	2b01      	cmp	r3, #1
 80012f2:	d10f      	bne.n	8001314 <HAL_ADC_ConfigChannel+0x490>
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	f003 0301 	and.w	r3, r3, #1
 80012fe:	2b01      	cmp	r3, #1
 8001300:	d108      	bne.n	8001314 <HAL_ADC_ConfigChannel+0x490>
 8001302:	2301      	movs	r3, #1
 8001304:	e007      	b.n	8001316 <HAL_ADC_ConfigChannel+0x492>
 8001306:	bf00      	nop
 8001308:	83fff000 	.word	0x83fff000
 800130c:	50000300 	.word	0x50000300
 8001310:	50000100 	.word	0x50000100
 8001314:	2300      	movs	r3, #0
 8001316:	2b00      	cmp	r3, #0
 8001318:	d150      	bne.n	80013bc <HAL_ADC_ConfigChannel+0x538>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 800131a:	68fb      	ldr	r3, [r7, #12]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 800131c:	2b00      	cmp	r3, #0
 800131e:	d010      	beq.n	8001342 <HAL_ADC_ConfigChannel+0x4be>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8001320:	68fb      	ldr	r3, [r7, #12]
 8001322:	689b      	ldr	r3, [r3, #8]
 8001324:	f003 0303 	and.w	r3, r3, #3
 8001328:	2b01      	cmp	r3, #1
 800132a:	d107      	bne.n	800133c <HAL_ADC_ConfigChannel+0x4b8>
 800132c:	68fb      	ldr	r3, [r7, #12]
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	f003 0301 	and.w	r3, r3, #1
 8001334:	2b01      	cmp	r3, #1
 8001336:	d101      	bne.n	800133c <HAL_ADC_ConfigChannel+0x4b8>
 8001338:	2301      	movs	r3, #1
 800133a:	e000      	b.n	800133e <HAL_ADC_ConfigChannel+0x4ba>
 800133c:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 800133e:	2b00      	cmp	r3, #0
 8001340:	d13c      	bne.n	80013bc <HAL_ADC_ConfigChannel+0x538>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001342:	683b      	ldr	r3, [r7, #0]
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	2b10      	cmp	r3, #16
 8001348:	d11d      	bne.n	8001386 <HAL_ADC_ConfigChannel+0x502>
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001352:	d118      	bne.n	8001386 <HAL_ADC_ConfigChannel+0x502>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 8001354:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001356:	689b      	ldr	r3, [r3, #8]
 8001358:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800135c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800135e:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001360:	4b27      	ldr	r3, [pc, #156]	; (8001400 <HAL_ADC_ConfigChannel+0x57c>)
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	4a27      	ldr	r2, [pc, #156]	; (8001404 <HAL_ADC_ConfigChannel+0x580>)
 8001366:	fba2 2303 	umull	r2, r3, r2, r3
 800136a:	0c9a      	lsrs	r2, r3, #18
 800136c:	4613      	mov	r3, r2
 800136e:	009b      	lsls	r3, r3, #2
 8001370:	4413      	add	r3, r2
 8001372:	005b      	lsls	r3, r3, #1
 8001374:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001376:	e002      	b.n	800137e <HAL_ADC_ConfigChannel+0x4fa>
          {
            wait_loop_index--;
 8001378:	68bb      	ldr	r3, [r7, #8]
 800137a:	3b01      	subs	r3, #1
 800137c:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800137e:	68bb      	ldr	r3, [r7, #8]
 8001380:	2b00      	cmp	r3, #0
 8001382:	d1f9      	bne.n	8001378 <HAL_ADC_ConfigChannel+0x4f4>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001384:	e02e      	b.n	80013e4 <HAL_ADC_ConfigChannel+0x560>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 8001386:	683b      	ldr	r3, [r7, #0]
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	2b11      	cmp	r3, #17
 800138c:	d10b      	bne.n	80013a6 <HAL_ADC_ConfigChannel+0x522>
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001396:	d106      	bne.n	80013a6 <HAL_ADC_ConfigChannel+0x522>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 8001398:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800139a:	689b      	ldr	r3, [r3, #8]
 800139c:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 80013a0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80013a2:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80013a4:	e01e      	b.n	80013e4 <HAL_ADC_ConfigChannel+0x560>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 80013a6:	683b      	ldr	r3, [r7, #0]
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	2b12      	cmp	r3, #18
 80013ac:	d11a      	bne.n	80013e4 <HAL_ADC_ConfigChannel+0x560>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 80013ae:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80013b0:	689b      	ldr	r3, [r3, #8]
 80013b2:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80013b6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80013b8:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80013ba:	e013      	b.n	80013e4 <HAL_ADC_ConfigChannel+0x560>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013c0:	f043 0220 	orr.w	r2, r3, #32
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	641a      	str	r2, [r3, #64]	; 0x40
        
        tmp_hal_status = HAL_ERROR;
 80013c8:	2301      	movs	r3, #1
 80013ca:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 80013ce:	e00a      	b.n	80013e6 <HAL_ADC_ConfigChannel+0x562>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013d4:	f043 0220 	orr.w	r2, r3, #32
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 80013dc:	2301      	movs	r3, #1
 80013de:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 80013e2:	e000      	b.n	80013e6 <HAL_ADC_ConfigChannel+0x562>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80013e4:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	2200      	movs	r2, #0
 80013ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 80013ee:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 80013f2:	4618      	mov	r0, r3
 80013f4:	376c      	adds	r7, #108	; 0x6c
 80013f6:	46bd      	mov	sp, r7
 80013f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013fc:	4770      	bx	lr
 80013fe:	bf00      	nop
 8001400:	20000000 	.word	0x20000000
 8001404:	431bde83 	.word	0x431bde83

08001408 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param  hadc ADC handle
  * @param  multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef* hadc, ADC_MultiModeTypeDef* multimode)
{
 8001408:	b480      	push	{r7}
 800140a:	b099      	sub	sp, #100	; 0x64
 800140c:	af00      	add	r7, sp, #0
 800140e:	6078      	str	r0, [r7, #4]
 8001410:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001412:	2300      	movs	r3, #0
 8001414:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    assert_param(IS_ADC_DMA_ACCESS_MODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }
  
  /* Set handle of the other ADC sharing the same common register             */
  ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001420:	d102      	bne.n	8001428 <HAL_ADCEx_MultiModeConfigChannel+0x20>
 8001422:	4b5a      	ldr	r3, [pc, #360]	; (800158c <HAL_ADCEx_MultiModeConfigChannel+0x184>)
 8001424:	60bb      	str	r3, [r7, #8]
 8001426:	e002      	b.n	800142e <HAL_ADCEx_MultiModeConfigChannel+0x26>
 8001428:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800142c:	60bb      	str	r3, [r7, #8]
  if (tmphadcSharingSameCommonRegister.Instance == NULL)
 800142e:	68bb      	ldr	r3, [r7, #8]
 8001430:	2b00      	cmp	r3, #0
 8001432:	d101      	bne.n	8001438 <HAL_ADCEx_MultiModeConfigChannel+0x30>
  {
    /* Return function status */
    return HAL_ERROR;
 8001434:	2301      	movs	r3, #1
 8001436:	e0a2      	b.n	800157e <HAL_ADCEx_MultiModeConfigChannel+0x176>
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800143e:	2b01      	cmp	r3, #1
 8001440:	d101      	bne.n	8001446 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8001442:	2302      	movs	r3, #2
 8001444:	e09b      	b.n	800157e <HAL_ADCEx_MultiModeConfigChannel+0x176>
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	2201      	movs	r2, #1
 800144a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  if ( (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET) 
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	689b      	ldr	r3, [r3, #8]
 8001454:	f003 0304 	and.w	r3, r3, #4
 8001458:	2b00      	cmp	r3, #0
 800145a:	d17f      	bne.n	800155c <HAL_ADCEx_MultiModeConfigChannel+0x154>
    && (ADC_IS_CONVERSION_ONGOING_REGULAR(&tmphadcSharingSameCommonRegister) == RESET) )
 800145c:	68bb      	ldr	r3, [r7, #8]
 800145e:	689b      	ldr	r3, [r3, #8]
 8001460:	f003 0304 	and.w	r3, r3, #4
 8001464:	2b00      	cmp	r3, #0
 8001466:	d179      	bne.n	800155c <HAL_ADCEx_MultiModeConfigChannel+0x154>
  {
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001468:	4b49      	ldr	r3, [pc, #292]	; (8001590 <HAL_ADCEx_MultiModeConfigChannel+0x188>)
 800146a:	65bb      	str	r3, [r7, #88]	; 0x58
    
    /* If multimode is selected, configure all multimode paramaters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 800146c:	683b      	ldr	r3, [r7, #0]
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	2b00      	cmp	r3, #0
 8001472:	d040      	beq.n	80014f6 <HAL_ADCEx_MultiModeConfigChannel+0xee>
    {
      /* Configuration of ADC common group ADC1&ADC2, ADC3&ADC4 if available    */
      /* (ADC2, ADC3, ADC4 availability depends on STM32 product)               */
      /*  - DMA access mode                                                     */
      MODIFY_REG(tmpADC_Common->CCR                                          ,
 8001474:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001476:	689b      	ldr	r3, [r3, #8]
 8001478:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800147c:	683b      	ldr	r3, [r7, #0]
 800147e:	6859      	ldr	r1, [r3, #4]
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001486:	035b      	lsls	r3, r3, #13
 8001488:	430b      	orrs	r3, r1
 800148a:	431a      	orrs	r2, r3
 800148c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800148e:	609a      	str	r2, [r3, #8]
      /*       parameters, their setting is bypassed without error reporting    */
      /*       (as it can be the expected behaviour in case of intended action  */
      /*       to update parameter above (which fulfills the ADC state          */
      /*       condition: no conversion on going on group regular)              */
      /*       on the fly).                                                     */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	689b      	ldr	r3, [r3, #8]
 8001496:	f003 0303 	and.w	r3, r3, #3
 800149a:	2b01      	cmp	r3, #1
 800149c:	d108      	bne.n	80014b0 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	f003 0301 	and.w	r3, r3, #1
 80014a8:	2b01      	cmp	r3, #1
 80014aa:	d101      	bne.n	80014b0 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 80014ac:	2301      	movs	r3, #1
 80014ae:	e000      	b.n	80014b2 <HAL_ADCEx_MultiModeConfigChannel+0xaa>
 80014b0:	2300      	movs	r3, #0
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d15c      	bne.n	8001570 <HAL_ADCEx_MultiModeConfigChannel+0x168>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 80014b6:	68bb      	ldr	r3, [r7, #8]
 80014b8:	689b      	ldr	r3, [r3, #8]
 80014ba:	f003 0303 	and.w	r3, r3, #3
 80014be:	2b01      	cmp	r3, #1
 80014c0:	d107      	bne.n	80014d2 <HAL_ADCEx_MultiModeConfigChannel+0xca>
 80014c2:	68bb      	ldr	r3, [r7, #8]
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	f003 0301 	and.w	r3, r3, #1
 80014ca:	2b01      	cmp	r3, #1
 80014cc:	d101      	bne.n	80014d2 <HAL_ADCEx_MultiModeConfigChannel+0xca>
 80014ce:	2301      	movs	r3, #1
 80014d0:	e000      	b.n	80014d4 <HAL_ADCEx_MultiModeConfigChannel+0xcc>
 80014d2:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d14b      	bne.n	8001570 <HAL_ADCEx_MultiModeConfigChannel+0x168>
      {
        MODIFY_REG(tmpADC_Common->CCR                                          ,
 80014d8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80014da:	689b      	ldr	r3, [r3, #8]
 80014dc:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80014e0:	f023 030f 	bic.w	r3, r3, #15
 80014e4:	683a      	ldr	r2, [r7, #0]
 80014e6:	6811      	ldr	r1, [r2, #0]
 80014e8:	683a      	ldr	r2, [r7, #0]
 80014ea:	6892      	ldr	r2, [r2, #8]
 80014ec:	430a      	orrs	r2, r1
 80014ee:	431a      	orrs	r2, r3
 80014f0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80014f2:	609a      	str	r2, [r3, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 80014f4:	e03c      	b.n	8001570 <HAL_ADCEx_MultiModeConfigChannel+0x168>
                   multimode->TwoSamplingDelay                                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 80014f6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80014f8:	689b      	ldr	r3, [r3, #8]
 80014fa:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80014fe:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001500:	609a      	str	r2, [r3, #8]
      
      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	689b      	ldr	r3, [r3, #8]
 8001508:	f003 0303 	and.w	r3, r3, #3
 800150c:	2b01      	cmp	r3, #1
 800150e:	d108      	bne.n	8001522 <HAL_ADCEx_MultiModeConfigChannel+0x11a>
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	f003 0301 	and.w	r3, r3, #1
 800151a:	2b01      	cmp	r3, #1
 800151c:	d101      	bne.n	8001522 <HAL_ADCEx_MultiModeConfigChannel+0x11a>
 800151e:	2301      	movs	r3, #1
 8001520:	e000      	b.n	8001524 <HAL_ADCEx_MultiModeConfigChannel+0x11c>
 8001522:	2300      	movs	r3, #0
 8001524:	2b00      	cmp	r3, #0
 8001526:	d123      	bne.n	8001570 <HAL_ADCEx_MultiModeConfigChannel+0x168>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8001528:	68bb      	ldr	r3, [r7, #8]
 800152a:	689b      	ldr	r3, [r3, #8]
 800152c:	f003 0303 	and.w	r3, r3, #3
 8001530:	2b01      	cmp	r3, #1
 8001532:	d107      	bne.n	8001544 <HAL_ADCEx_MultiModeConfigChannel+0x13c>
 8001534:	68bb      	ldr	r3, [r7, #8]
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	f003 0301 	and.w	r3, r3, #1
 800153c:	2b01      	cmp	r3, #1
 800153e:	d101      	bne.n	8001544 <HAL_ADCEx_MultiModeConfigChannel+0x13c>
 8001540:	2301      	movs	r3, #1
 8001542:	e000      	b.n	8001546 <HAL_ADCEx_MultiModeConfigChannel+0x13e>
 8001544:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8001546:	2b00      	cmp	r3, #0
 8001548:	d112      	bne.n	8001570 <HAL_ADCEx_MultiModeConfigChannel+0x168>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI | ADC_CCR_DELAY);
 800154a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800154c:	689b      	ldr	r3, [r3, #8]
 800154e:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8001552:	f023 030f 	bic.w	r3, r3, #15
 8001556:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8001558:	6093      	str	r3, [r2, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 800155a:	e009      	b.n	8001570 <HAL_ADCEx_MultiModeConfigChannel+0x168>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001560:	f043 0220 	orr.w	r2, r3, #32
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 8001568:	2301      	movs	r3, #1
 800156a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800156e:	e000      	b.n	8001572 <HAL_ADCEx_MultiModeConfigChannel+0x16a>
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8001570:	bf00      	nop
  }
    
    
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	2200      	movs	r2, #0
 8001576:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 800157a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
} 
 800157e:	4618      	mov	r0, r3
 8001580:	3764      	adds	r7, #100	; 0x64
 8001582:	46bd      	mov	sp, r7
 8001584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001588:	4770      	bx	lr
 800158a:	bf00      	nop
 800158c:	50000100 	.word	0x50000100
 8001590:	50000300 	.word	0x50000300

08001594 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 8001594:	b580      	push	{r7, lr}
 8001596:	b084      	sub	sp, #16
 8001598:	af00      	add	r7, sp, #0
 800159a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800159c:	2300      	movs	r3, #0
 800159e:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	689b      	ldr	r3, [r3, #8]
 80015a6:	f003 0303 	and.w	r3, r3, #3
 80015aa:	2b01      	cmp	r3, #1
 80015ac:	d108      	bne.n	80015c0 <ADC_Disable+0x2c>
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	f003 0301 	and.w	r3, r3, #1
 80015b8:	2b01      	cmp	r3, #1
 80015ba:	d101      	bne.n	80015c0 <ADC_Disable+0x2c>
 80015bc:	2301      	movs	r3, #1
 80015be:	e000      	b.n	80015c2 <ADC_Disable+0x2e>
 80015c0:	2300      	movs	r3, #0
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d040      	beq.n	8001648 <ADC_Disable+0xb4>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	689b      	ldr	r3, [r3, #8]
 80015cc:	f003 030d 	and.w	r3, r3, #13
 80015d0:	2b01      	cmp	r3, #1
 80015d2:	d10f      	bne.n	80015f4 <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	689a      	ldr	r2, [r3, #8]
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	f042 0202 	orr.w	r2, r2, #2
 80015e2:	609a      	str	r2, [r3, #8]
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	2203      	movs	r2, #3
 80015ea:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 80015ec:	f7ff faac 	bl	8000b48 <HAL_GetTick>
 80015f0:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 80015f2:	e022      	b.n	800163a <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015f8:	f043 0210 	orr.w	r2, r3, #16
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	641a      	str	r2, [r3, #64]	; 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001604:	f043 0201 	orr.w	r2, r3, #1
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	645a      	str	r2, [r3, #68]	; 0x44
      return HAL_ERROR;
 800160c:	2301      	movs	r3, #1
 800160e:	e01c      	b.n	800164a <ADC_Disable+0xb6>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001610:	f7ff fa9a 	bl	8000b48 <HAL_GetTick>
 8001614:	4602      	mov	r2, r0
 8001616:	68fb      	ldr	r3, [r7, #12]
 8001618:	1ad3      	subs	r3, r2, r3
 800161a:	2b02      	cmp	r3, #2
 800161c:	d90d      	bls.n	800163a <ADC_Disable+0xa6>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001622:	f043 0210 	orr.w	r2, r3, #16
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800162e:	f043 0201 	orr.w	r2, r3, #1
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	645a      	str	r2, [r3, #68]	; 0x44
        
        return HAL_ERROR;
 8001636:	2301      	movs	r3, #1
 8001638:	e007      	b.n	800164a <ADC_Disable+0xb6>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	689b      	ldr	r3, [r3, #8]
 8001640:	f003 0301 	and.w	r3, r3, #1
 8001644:	2b01      	cmp	r3, #1
 8001646:	d0e3      	beq.n	8001610 <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001648:	2300      	movs	r3, #0
}
 800164a:	4618      	mov	r0, r3
 800164c:	3710      	adds	r7, #16
 800164e:	46bd      	mov	sp, r7
 8001650:	bd80      	pop	{r7, pc}
	...

08001654 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001654:	b480      	push	{r7}
 8001656:	b085      	sub	sp, #20
 8001658:	af00      	add	r7, sp, #0
 800165a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	f003 0307 	and.w	r3, r3, #7
 8001662:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001664:	4b0c      	ldr	r3, [pc, #48]	; (8001698 <__NVIC_SetPriorityGrouping+0x44>)
 8001666:	68db      	ldr	r3, [r3, #12]
 8001668:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800166a:	68ba      	ldr	r2, [r7, #8]
 800166c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001670:	4013      	ands	r3, r2
 8001672:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001674:	68fb      	ldr	r3, [r7, #12]
 8001676:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001678:	68bb      	ldr	r3, [r7, #8]
 800167a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800167c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001680:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001684:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001686:	4a04      	ldr	r2, [pc, #16]	; (8001698 <__NVIC_SetPriorityGrouping+0x44>)
 8001688:	68bb      	ldr	r3, [r7, #8]
 800168a:	60d3      	str	r3, [r2, #12]
}
 800168c:	bf00      	nop
 800168e:	3714      	adds	r7, #20
 8001690:	46bd      	mov	sp, r7
 8001692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001696:	4770      	bx	lr
 8001698:	e000ed00 	.word	0xe000ed00

0800169c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800169c:	b480      	push	{r7}
 800169e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80016a0:	4b04      	ldr	r3, [pc, #16]	; (80016b4 <__NVIC_GetPriorityGrouping+0x18>)
 80016a2:	68db      	ldr	r3, [r3, #12]
 80016a4:	0a1b      	lsrs	r3, r3, #8
 80016a6:	f003 0307 	and.w	r3, r3, #7
}
 80016aa:	4618      	mov	r0, r3
 80016ac:	46bd      	mov	sp, r7
 80016ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b2:	4770      	bx	lr
 80016b4:	e000ed00 	.word	0xe000ed00

080016b8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80016b8:	b480      	push	{r7}
 80016ba:	b083      	sub	sp, #12
 80016bc:	af00      	add	r7, sp, #0
 80016be:	4603      	mov	r3, r0
 80016c0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80016c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	db0b      	blt.n	80016e2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80016ca:	79fb      	ldrb	r3, [r7, #7]
 80016cc:	f003 021f 	and.w	r2, r3, #31
 80016d0:	4907      	ldr	r1, [pc, #28]	; (80016f0 <__NVIC_EnableIRQ+0x38>)
 80016d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016d6:	095b      	lsrs	r3, r3, #5
 80016d8:	2001      	movs	r0, #1
 80016da:	fa00 f202 	lsl.w	r2, r0, r2
 80016de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80016e2:	bf00      	nop
 80016e4:	370c      	adds	r7, #12
 80016e6:	46bd      	mov	sp, r7
 80016e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ec:	4770      	bx	lr
 80016ee:	bf00      	nop
 80016f0:	e000e100 	.word	0xe000e100

080016f4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80016f4:	b480      	push	{r7}
 80016f6:	b083      	sub	sp, #12
 80016f8:	af00      	add	r7, sp, #0
 80016fa:	4603      	mov	r3, r0
 80016fc:	6039      	str	r1, [r7, #0]
 80016fe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001700:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001704:	2b00      	cmp	r3, #0
 8001706:	db0a      	blt.n	800171e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001708:	683b      	ldr	r3, [r7, #0]
 800170a:	b2da      	uxtb	r2, r3
 800170c:	490c      	ldr	r1, [pc, #48]	; (8001740 <__NVIC_SetPriority+0x4c>)
 800170e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001712:	0112      	lsls	r2, r2, #4
 8001714:	b2d2      	uxtb	r2, r2
 8001716:	440b      	add	r3, r1
 8001718:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800171c:	e00a      	b.n	8001734 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800171e:	683b      	ldr	r3, [r7, #0]
 8001720:	b2da      	uxtb	r2, r3
 8001722:	4908      	ldr	r1, [pc, #32]	; (8001744 <__NVIC_SetPriority+0x50>)
 8001724:	79fb      	ldrb	r3, [r7, #7]
 8001726:	f003 030f 	and.w	r3, r3, #15
 800172a:	3b04      	subs	r3, #4
 800172c:	0112      	lsls	r2, r2, #4
 800172e:	b2d2      	uxtb	r2, r2
 8001730:	440b      	add	r3, r1
 8001732:	761a      	strb	r2, [r3, #24]
}
 8001734:	bf00      	nop
 8001736:	370c      	adds	r7, #12
 8001738:	46bd      	mov	sp, r7
 800173a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800173e:	4770      	bx	lr
 8001740:	e000e100 	.word	0xe000e100
 8001744:	e000ed00 	.word	0xe000ed00

08001748 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001748:	b480      	push	{r7}
 800174a:	b089      	sub	sp, #36	; 0x24
 800174c:	af00      	add	r7, sp, #0
 800174e:	60f8      	str	r0, [r7, #12]
 8001750:	60b9      	str	r1, [r7, #8]
 8001752:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001754:	68fb      	ldr	r3, [r7, #12]
 8001756:	f003 0307 	and.w	r3, r3, #7
 800175a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800175c:	69fb      	ldr	r3, [r7, #28]
 800175e:	f1c3 0307 	rsb	r3, r3, #7
 8001762:	2b04      	cmp	r3, #4
 8001764:	bf28      	it	cs
 8001766:	2304      	movcs	r3, #4
 8001768:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800176a:	69fb      	ldr	r3, [r7, #28]
 800176c:	3304      	adds	r3, #4
 800176e:	2b06      	cmp	r3, #6
 8001770:	d902      	bls.n	8001778 <NVIC_EncodePriority+0x30>
 8001772:	69fb      	ldr	r3, [r7, #28]
 8001774:	3b03      	subs	r3, #3
 8001776:	e000      	b.n	800177a <NVIC_EncodePriority+0x32>
 8001778:	2300      	movs	r3, #0
 800177a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800177c:	f04f 32ff 	mov.w	r2, #4294967295
 8001780:	69bb      	ldr	r3, [r7, #24]
 8001782:	fa02 f303 	lsl.w	r3, r2, r3
 8001786:	43da      	mvns	r2, r3
 8001788:	68bb      	ldr	r3, [r7, #8]
 800178a:	401a      	ands	r2, r3
 800178c:	697b      	ldr	r3, [r7, #20]
 800178e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001790:	f04f 31ff 	mov.w	r1, #4294967295
 8001794:	697b      	ldr	r3, [r7, #20]
 8001796:	fa01 f303 	lsl.w	r3, r1, r3
 800179a:	43d9      	mvns	r1, r3
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017a0:	4313      	orrs	r3, r2
         );
}
 80017a2:	4618      	mov	r0, r3
 80017a4:	3724      	adds	r7, #36	; 0x24
 80017a6:	46bd      	mov	sp, r7
 80017a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ac:	4770      	bx	lr
	...

080017b0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80017b0:	b580      	push	{r7, lr}
 80017b2:	b082      	sub	sp, #8
 80017b4:	af00      	add	r7, sp, #0
 80017b6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	3b01      	subs	r3, #1
 80017bc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80017c0:	d301      	bcc.n	80017c6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80017c2:	2301      	movs	r3, #1
 80017c4:	e00f      	b.n	80017e6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80017c6:	4a0a      	ldr	r2, [pc, #40]	; (80017f0 <SysTick_Config+0x40>)
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	3b01      	subs	r3, #1
 80017cc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80017ce:	210f      	movs	r1, #15
 80017d0:	f04f 30ff 	mov.w	r0, #4294967295
 80017d4:	f7ff ff8e 	bl	80016f4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80017d8:	4b05      	ldr	r3, [pc, #20]	; (80017f0 <SysTick_Config+0x40>)
 80017da:	2200      	movs	r2, #0
 80017dc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80017de:	4b04      	ldr	r3, [pc, #16]	; (80017f0 <SysTick_Config+0x40>)
 80017e0:	2207      	movs	r2, #7
 80017e2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80017e4:	2300      	movs	r3, #0
}
 80017e6:	4618      	mov	r0, r3
 80017e8:	3708      	adds	r7, #8
 80017ea:	46bd      	mov	sp, r7
 80017ec:	bd80      	pop	{r7, pc}
 80017ee:	bf00      	nop
 80017f0:	e000e010 	.word	0xe000e010

080017f4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017f4:	b580      	push	{r7, lr}
 80017f6:	b082      	sub	sp, #8
 80017f8:	af00      	add	r7, sp, #0
 80017fa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80017fc:	6878      	ldr	r0, [r7, #4]
 80017fe:	f7ff ff29 	bl	8001654 <__NVIC_SetPriorityGrouping>
}
 8001802:	bf00      	nop
 8001804:	3708      	adds	r7, #8
 8001806:	46bd      	mov	sp, r7
 8001808:	bd80      	pop	{r7, pc}

0800180a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800180a:	b580      	push	{r7, lr}
 800180c:	b086      	sub	sp, #24
 800180e:	af00      	add	r7, sp, #0
 8001810:	4603      	mov	r3, r0
 8001812:	60b9      	str	r1, [r7, #8]
 8001814:	607a      	str	r2, [r7, #4]
 8001816:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001818:	2300      	movs	r3, #0
 800181a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800181c:	f7ff ff3e 	bl	800169c <__NVIC_GetPriorityGrouping>
 8001820:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001822:	687a      	ldr	r2, [r7, #4]
 8001824:	68b9      	ldr	r1, [r7, #8]
 8001826:	6978      	ldr	r0, [r7, #20]
 8001828:	f7ff ff8e 	bl	8001748 <NVIC_EncodePriority>
 800182c:	4602      	mov	r2, r0
 800182e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001832:	4611      	mov	r1, r2
 8001834:	4618      	mov	r0, r3
 8001836:	f7ff ff5d 	bl	80016f4 <__NVIC_SetPriority>
}
 800183a:	bf00      	nop
 800183c:	3718      	adds	r7, #24
 800183e:	46bd      	mov	sp, r7
 8001840:	bd80      	pop	{r7, pc}

08001842 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001842:	b580      	push	{r7, lr}
 8001844:	b082      	sub	sp, #8
 8001846:	af00      	add	r7, sp, #0
 8001848:	4603      	mov	r3, r0
 800184a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800184c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001850:	4618      	mov	r0, r3
 8001852:	f7ff ff31 	bl	80016b8 <__NVIC_EnableIRQ>
}
 8001856:	bf00      	nop
 8001858:	3708      	adds	r7, #8
 800185a:	46bd      	mov	sp, r7
 800185c:	bd80      	pop	{r7, pc}

0800185e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800185e:	b580      	push	{r7, lr}
 8001860:	b082      	sub	sp, #8
 8001862:	af00      	add	r7, sp, #0
 8001864:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001866:	6878      	ldr	r0, [r7, #4]
 8001868:	f7ff ffa2 	bl	80017b0 <SysTick_Config>
 800186c:	4603      	mov	r3, r0
}
 800186e:	4618      	mov	r0, r3
 8001870:	3708      	adds	r7, #8
 8001872:	46bd      	mov	sp, r7
 8001874:	bd80      	pop	{r7, pc}

08001876 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef* hdac)
{ 
 8001876:	b580      	push	{r7, lr}
 8001878:	b082      	sub	sp, #8
 800187a:	af00      	add	r7, sp, #0
 800187c:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if(hdac == NULL)
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	2b00      	cmp	r3, #0
 8001882:	d101      	bne.n	8001888 <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 8001884:	2301      	movs	r3, #1
 8001886:	e014      	b.n	80018b2 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));
  
  if(hdac->State == HAL_DAC_STATE_RESET)
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	791b      	ldrb	r3, [r3, #4]
 800188c:	b2db      	uxtb	r3, r3
 800188e:	2b00      	cmp	r3, #0
 8001890:	d105      	bne.n	800189e <HAL_DAC_Init+0x28>
    hdac->MspDeInitCallback             = HAL_DAC_MspDeInit;
  }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  
    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	2200      	movs	r2, #0
 8001896:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8001898:	6878      	ldr	r0, [r7, #4]
 800189a:	f7fe ff77 	bl	800078c <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	2202      	movs	r2, #2
 80018a2:	711a      	strb	r2, [r3, #4]
       
  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	2200      	movs	r2, #0
 80018a8:	611a      	str	r2, [r3, #16]
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	2201      	movs	r2, #1
 80018ae:	711a      	strb	r2, [r3, #4]
  
  /* Return function status */
  return HAL_OK;
 80018b0:	2300      	movs	r3, #0
}
 80018b2:	4618      	mov	r0, r3
 80018b4:	3708      	adds	r7, #8
 80018b6:	46bd      	mov	sp, r7
 80018b8:	bd80      	pop	{r7, pc}
	...

080018bc <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC2 Channel1 selected 
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef* hdac, DAC_ChannelConfTypeDef* sConfig, uint32_t Channel)
{
 80018bc:	b480      	push	{r7}
 80018be:	b087      	sub	sp, #28
 80018c0:	af00      	add	r7, sp, #0
 80018c2:	60f8      	str	r0, [r7, #12]
 80018c4:	60b9      	str	r1, [r7, #8]
 80018c6:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1 = 0U, tmpreg2 = 0U;
 80018c8:	2300      	movs	r3, #0
 80018ca:	617b      	str	r3, [r7, #20]
 80018cc:	2300      	movs	r3, #0
 80018ce:	613b      	str	r3, [r7, #16]
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));    
#endif /* STM32F303x8 || STM32F334x8 || STM32F328xx || */
  assert_param(IS_DAC_CHANNEL(Channel));   
 
  /* Process locked */
  __HAL_LOCK(hdac);
 80018d0:	68fb      	ldr	r3, [r7, #12]
 80018d2:	795b      	ldrb	r3, [r3, #5]
 80018d4:	2b01      	cmp	r3, #1
 80018d6:	d101      	bne.n	80018dc <HAL_DAC_ConfigChannel+0x20>
 80018d8:	2302      	movs	r3, #2
 80018da:	e04e      	b.n	800197a <HAL_DAC_ConfigChannel+0xbe>
 80018dc:	68fb      	ldr	r3, [r7, #12]
 80018de:	2201      	movs	r2, #1
 80018e0:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80018e2:	68fb      	ldr	r3, [r7, #12]
 80018e4:	2202      	movs	r2, #2
 80018e6:	711a      	strb	r2, [r3, #4]
  
  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 80018e8:	68fb      	ldr	r3, [r7, #12]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output or switch output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value OR */   
  /* Set OUTEN bit according to DAC_OutputSwitch value */   
#if defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
  if ((hdac->Instance == DAC1) && (Channel == DAC_CHANNEL_1)) 
 80018f0:	68fb      	ldr	r3, [r7, #12]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	4a24      	ldr	r2, [pc, #144]	; (8001988 <HAL_DAC_ConfigChannel+0xcc>)
 80018f6:	4293      	cmp	r3, r2
 80018f8:	d112      	bne.n	8001920 <HAL_DAC_ConfigChannel+0x64>
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d10f      	bne.n	8001920 <HAL_DAC_ConfigChannel+0x64>
  {
    /* Output Buffer (BOFF1) control */
    tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << Channel);
 8001900:	f640 72fe 	movw	r2, #4094	; 0xffe
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	fa02 f303 	lsl.w	r3, r2, r3
 800190a:	43db      	mvns	r3, r3
 800190c:	697a      	ldr	r2, [r7, #20]
 800190e:	4013      	ands	r3, r2
 8001910:	617b      	str	r3, [r7, #20]
    tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);    
 8001912:	68bb      	ldr	r3, [r7, #8]
 8001914:	681a      	ldr	r2, [r3, #0]
 8001916:	68bb      	ldr	r3, [r7, #8]
 8001918:	685b      	ldr	r3, [r3, #4]
 800191a:	4313      	orrs	r3, r2
 800191c:	613b      	str	r3, [r7, #16]
 800191e:	e00e      	b.n	800193e <HAL_DAC_ConfigChannel+0x82>
  }
  else /* DAC1 channel 2U & DAC2 channel 1U */
  {
    /* Output Switch (OUTEN) control */
    tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_OUTEN1)) << Channel);    
 8001920:	f640 72fe 	movw	r2, #4094	; 0xffe
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	fa02 f303 	lsl.w	r3, r2, r3
 800192a:	43db      	mvns	r3, r3
 800192c:	697a      	ldr	r2, [r7, #20]
 800192e:	4013      	ands	r3, r2
 8001930:	617b      	str	r3, [r7, #20]
    tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputSwitch);    
 8001932:	68bb      	ldr	r3, [r7, #8]
 8001934:	681a      	ldr	r2, [r3, #0]
 8001936:	68bb      	ldr	r3, [r7, #8]
 8001938:	689b      	ldr	r3, [r3, #8]
 800193a:	4313      	orrs	r3, r2
 800193c:	613b      	str	r3, [r7, #16]
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << Channel);
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
#endif  /* STM32F303x8 || STM32F334x8 || STM32F328xx || */
  
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << Channel;
 800193e:	693a      	ldr	r2, [r7, #16]
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	fa02 f303 	lsl.w	r3, r2, r3
 8001946:	697a      	ldr	r2, [r7, #20]
 8001948:	4313      	orrs	r3, r2
 800194a:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 800194c:	68fb      	ldr	r3, [r7, #12]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	697a      	ldr	r2, [r7, #20]
 8001952:	601a      	str	r2, [r3, #0]
  
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << Channel);
 8001954:	68fb      	ldr	r3, [r7, #12]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	6819      	ldr	r1, [r3, #0]
 800195a:	22c0      	movs	r2, #192	; 0xc0
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	fa02 f303 	lsl.w	r3, r2, r3
 8001962:	43da      	mvns	r2, r3
 8001964:	68fb      	ldr	r3, [r7, #12]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	400a      	ands	r2, r1
 800196a:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 800196c:	68fb      	ldr	r3, [r7, #12]
 800196e:	2201      	movs	r2, #1
 8001970:	711a      	strb	r2, [r3, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8001972:	68fb      	ldr	r3, [r7, #12]
 8001974:	2200      	movs	r2, #0
 8001976:	715a      	strb	r2, [r3, #5]
  
  /* Return function status */
  return HAL_OK;
 8001978:	2300      	movs	r3, #0
}
 800197a:	4618      	mov	r0, r3
 800197c:	371c      	adds	r7, #28
 800197e:	46bd      	mov	sp, r7
 8001980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001984:	4770      	bx	lr
 8001986:	bf00      	nop
 8001988:	40007400 	.word	0x40007400

0800198c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800198c:	b480      	push	{r7}
 800198e:	b087      	sub	sp, #28
 8001990:	af00      	add	r7, sp, #0
 8001992:	6078      	str	r0, [r7, #4]
 8001994:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001996:	2300      	movs	r3, #0
 8001998:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800199a:	e14e      	b.n	8001c3a <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800199c:	683b      	ldr	r3, [r7, #0]
 800199e:	681a      	ldr	r2, [r3, #0]
 80019a0:	2101      	movs	r1, #1
 80019a2:	697b      	ldr	r3, [r7, #20]
 80019a4:	fa01 f303 	lsl.w	r3, r1, r3
 80019a8:	4013      	ands	r3, r2
 80019aa:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80019ac:	68fb      	ldr	r3, [r7, #12]
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	f000 8140 	beq.w	8001c34 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80019b4:	683b      	ldr	r3, [r7, #0]
 80019b6:	685b      	ldr	r3, [r3, #4]
 80019b8:	2b01      	cmp	r3, #1
 80019ba:	d00b      	beq.n	80019d4 <HAL_GPIO_Init+0x48>
 80019bc:	683b      	ldr	r3, [r7, #0]
 80019be:	685b      	ldr	r3, [r3, #4]
 80019c0:	2b02      	cmp	r3, #2
 80019c2:	d007      	beq.n	80019d4 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80019c4:	683b      	ldr	r3, [r7, #0]
 80019c6:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80019c8:	2b11      	cmp	r3, #17
 80019ca:	d003      	beq.n	80019d4 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80019cc:	683b      	ldr	r3, [r7, #0]
 80019ce:	685b      	ldr	r3, [r3, #4]
 80019d0:	2b12      	cmp	r3, #18
 80019d2:	d130      	bne.n	8001a36 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	689b      	ldr	r3, [r3, #8]
 80019d8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80019da:	697b      	ldr	r3, [r7, #20]
 80019dc:	005b      	lsls	r3, r3, #1
 80019de:	2203      	movs	r2, #3
 80019e0:	fa02 f303 	lsl.w	r3, r2, r3
 80019e4:	43db      	mvns	r3, r3
 80019e6:	693a      	ldr	r2, [r7, #16]
 80019e8:	4013      	ands	r3, r2
 80019ea:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80019ec:	683b      	ldr	r3, [r7, #0]
 80019ee:	68da      	ldr	r2, [r3, #12]
 80019f0:	697b      	ldr	r3, [r7, #20]
 80019f2:	005b      	lsls	r3, r3, #1
 80019f4:	fa02 f303 	lsl.w	r3, r2, r3
 80019f8:	693a      	ldr	r2, [r7, #16]
 80019fa:	4313      	orrs	r3, r2
 80019fc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	693a      	ldr	r2, [r7, #16]
 8001a02:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	685b      	ldr	r3, [r3, #4]
 8001a08:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001a0a:	2201      	movs	r2, #1
 8001a0c:	697b      	ldr	r3, [r7, #20]
 8001a0e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a12:	43db      	mvns	r3, r3
 8001a14:	693a      	ldr	r2, [r7, #16]
 8001a16:	4013      	ands	r3, r2
 8001a18:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8001a1a:	683b      	ldr	r3, [r7, #0]
 8001a1c:	685b      	ldr	r3, [r3, #4]
 8001a1e:	091b      	lsrs	r3, r3, #4
 8001a20:	f003 0201 	and.w	r2, r3, #1
 8001a24:	697b      	ldr	r3, [r7, #20]
 8001a26:	fa02 f303 	lsl.w	r3, r2, r3
 8001a2a:	693a      	ldr	r2, [r7, #16]
 8001a2c:	4313      	orrs	r3, r2
 8001a2e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	693a      	ldr	r2, [r7, #16]
 8001a34:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	68db      	ldr	r3, [r3, #12]
 8001a3a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001a3c:	697b      	ldr	r3, [r7, #20]
 8001a3e:	005b      	lsls	r3, r3, #1
 8001a40:	2203      	movs	r2, #3
 8001a42:	fa02 f303 	lsl.w	r3, r2, r3
 8001a46:	43db      	mvns	r3, r3
 8001a48:	693a      	ldr	r2, [r7, #16]
 8001a4a:	4013      	ands	r3, r2
 8001a4c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001a4e:	683b      	ldr	r3, [r7, #0]
 8001a50:	689a      	ldr	r2, [r3, #8]
 8001a52:	697b      	ldr	r3, [r7, #20]
 8001a54:	005b      	lsls	r3, r3, #1
 8001a56:	fa02 f303 	lsl.w	r3, r2, r3
 8001a5a:	693a      	ldr	r2, [r7, #16]
 8001a5c:	4313      	orrs	r3, r2
 8001a5e:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	693a      	ldr	r2, [r7, #16]
 8001a64:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001a66:	683b      	ldr	r3, [r7, #0]
 8001a68:	685b      	ldr	r3, [r3, #4]
 8001a6a:	2b02      	cmp	r3, #2
 8001a6c:	d003      	beq.n	8001a76 <HAL_GPIO_Init+0xea>
 8001a6e:	683b      	ldr	r3, [r7, #0]
 8001a70:	685b      	ldr	r3, [r3, #4]
 8001a72:	2b12      	cmp	r3, #18
 8001a74:	d123      	bne.n	8001abe <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001a76:	697b      	ldr	r3, [r7, #20]
 8001a78:	08da      	lsrs	r2, r3, #3
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	3208      	adds	r2, #8
 8001a7e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001a82:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001a84:	697b      	ldr	r3, [r7, #20]
 8001a86:	f003 0307 	and.w	r3, r3, #7
 8001a8a:	009b      	lsls	r3, r3, #2
 8001a8c:	220f      	movs	r2, #15
 8001a8e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a92:	43db      	mvns	r3, r3
 8001a94:	693a      	ldr	r2, [r7, #16]
 8001a96:	4013      	ands	r3, r2
 8001a98:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001a9a:	683b      	ldr	r3, [r7, #0]
 8001a9c:	691a      	ldr	r2, [r3, #16]
 8001a9e:	697b      	ldr	r3, [r7, #20]
 8001aa0:	f003 0307 	and.w	r3, r3, #7
 8001aa4:	009b      	lsls	r3, r3, #2
 8001aa6:	fa02 f303 	lsl.w	r3, r2, r3
 8001aaa:	693a      	ldr	r2, [r7, #16]
 8001aac:	4313      	orrs	r3, r2
 8001aae:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001ab0:	697b      	ldr	r3, [r7, #20]
 8001ab2:	08da      	lsrs	r2, r3, #3
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	3208      	adds	r2, #8
 8001ab8:	6939      	ldr	r1, [r7, #16]
 8001aba:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001ac4:	697b      	ldr	r3, [r7, #20]
 8001ac6:	005b      	lsls	r3, r3, #1
 8001ac8:	2203      	movs	r2, #3
 8001aca:	fa02 f303 	lsl.w	r3, r2, r3
 8001ace:	43db      	mvns	r3, r3
 8001ad0:	693a      	ldr	r2, [r7, #16]
 8001ad2:	4013      	ands	r3, r2
 8001ad4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001ad6:	683b      	ldr	r3, [r7, #0]
 8001ad8:	685b      	ldr	r3, [r3, #4]
 8001ada:	f003 0203 	and.w	r2, r3, #3
 8001ade:	697b      	ldr	r3, [r7, #20]
 8001ae0:	005b      	lsls	r3, r3, #1
 8001ae2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ae6:	693a      	ldr	r2, [r7, #16]
 8001ae8:	4313      	orrs	r3, r2
 8001aea:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	693a      	ldr	r2, [r7, #16]
 8001af0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001af2:	683b      	ldr	r3, [r7, #0]
 8001af4:	685b      	ldr	r3, [r3, #4]
 8001af6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	f000 809a 	beq.w	8001c34 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b00:	4b55      	ldr	r3, [pc, #340]	; (8001c58 <HAL_GPIO_Init+0x2cc>)
 8001b02:	699b      	ldr	r3, [r3, #24]
 8001b04:	4a54      	ldr	r2, [pc, #336]	; (8001c58 <HAL_GPIO_Init+0x2cc>)
 8001b06:	f043 0301 	orr.w	r3, r3, #1
 8001b0a:	6193      	str	r3, [r2, #24]
 8001b0c:	4b52      	ldr	r3, [pc, #328]	; (8001c58 <HAL_GPIO_Init+0x2cc>)
 8001b0e:	699b      	ldr	r3, [r3, #24]
 8001b10:	f003 0301 	and.w	r3, r3, #1
 8001b14:	60bb      	str	r3, [r7, #8]
 8001b16:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001b18:	4a50      	ldr	r2, [pc, #320]	; (8001c5c <HAL_GPIO_Init+0x2d0>)
 8001b1a:	697b      	ldr	r3, [r7, #20]
 8001b1c:	089b      	lsrs	r3, r3, #2
 8001b1e:	3302      	adds	r3, #2
 8001b20:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b24:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001b26:	697b      	ldr	r3, [r7, #20]
 8001b28:	f003 0303 	and.w	r3, r3, #3
 8001b2c:	009b      	lsls	r3, r3, #2
 8001b2e:	220f      	movs	r2, #15
 8001b30:	fa02 f303 	lsl.w	r3, r2, r3
 8001b34:	43db      	mvns	r3, r3
 8001b36:	693a      	ldr	r2, [r7, #16]
 8001b38:	4013      	ands	r3, r2
 8001b3a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001b42:	d013      	beq.n	8001b6c <HAL_GPIO_Init+0x1e0>
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	4a46      	ldr	r2, [pc, #280]	; (8001c60 <HAL_GPIO_Init+0x2d4>)
 8001b48:	4293      	cmp	r3, r2
 8001b4a:	d00d      	beq.n	8001b68 <HAL_GPIO_Init+0x1dc>
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	4a45      	ldr	r2, [pc, #276]	; (8001c64 <HAL_GPIO_Init+0x2d8>)
 8001b50:	4293      	cmp	r3, r2
 8001b52:	d007      	beq.n	8001b64 <HAL_GPIO_Init+0x1d8>
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	4a44      	ldr	r2, [pc, #272]	; (8001c68 <HAL_GPIO_Init+0x2dc>)
 8001b58:	4293      	cmp	r3, r2
 8001b5a:	d101      	bne.n	8001b60 <HAL_GPIO_Init+0x1d4>
 8001b5c:	2303      	movs	r3, #3
 8001b5e:	e006      	b.n	8001b6e <HAL_GPIO_Init+0x1e2>
 8001b60:	2305      	movs	r3, #5
 8001b62:	e004      	b.n	8001b6e <HAL_GPIO_Init+0x1e2>
 8001b64:	2302      	movs	r3, #2
 8001b66:	e002      	b.n	8001b6e <HAL_GPIO_Init+0x1e2>
 8001b68:	2301      	movs	r3, #1
 8001b6a:	e000      	b.n	8001b6e <HAL_GPIO_Init+0x1e2>
 8001b6c:	2300      	movs	r3, #0
 8001b6e:	697a      	ldr	r2, [r7, #20]
 8001b70:	f002 0203 	and.w	r2, r2, #3
 8001b74:	0092      	lsls	r2, r2, #2
 8001b76:	4093      	lsls	r3, r2
 8001b78:	693a      	ldr	r2, [r7, #16]
 8001b7a:	4313      	orrs	r3, r2
 8001b7c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001b7e:	4937      	ldr	r1, [pc, #220]	; (8001c5c <HAL_GPIO_Init+0x2d0>)
 8001b80:	697b      	ldr	r3, [r7, #20]
 8001b82:	089b      	lsrs	r3, r3, #2
 8001b84:	3302      	adds	r3, #2
 8001b86:	693a      	ldr	r2, [r7, #16]
 8001b88:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001b8c:	4b37      	ldr	r3, [pc, #220]	; (8001c6c <HAL_GPIO_Init+0x2e0>)
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001b92:	68fb      	ldr	r3, [r7, #12]
 8001b94:	43db      	mvns	r3, r3
 8001b96:	693a      	ldr	r2, [r7, #16]
 8001b98:	4013      	ands	r3, r2
 8001b9a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001b9c:	683b      	ldr	r3, [r7, #0]
 8001b9e:	685b      	ldr	r3, [r3, #4]
 8001ba0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d003      	beq.n	8001bb0 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8001ba8:	693a      	ldr	r2, [r7, #16]
 8001baa:	68fb      	ldr	r3, [r7, #12]
 8001bac:	4313      	orrs	r3, r2
 8001bae:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001bb0:	4a2e      	ldr	r2, [pc, #184]	; (8001c6c <HAL_GPIO_Init+0x2e0>)
 8001bb2:	693b      	ldr	r3, [r7, #16]
 8001bb4:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001bb6:	4b2d      	ldr	r3, [pc, #180]	; (8001c6c <HAL_GPIO_Init+0x2e0>)
 8001bb8:	685b      	ldr	r3, [r3, #4]
 8001bba:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	43db      	mvns	r3, r3
 8001bc0:	693a      	ldr	r2, [r7, #16]
 8001bc2:	4013      	ands	r3, r2
 8001bc4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001bc6:	683b      	ldr	r3, [r7, #0]
 8001bc8:	685b      	ldr	r3, [r3, #4]
 8001bca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d003      	beq.n	8001bda <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8001bd2:	693a      	ldr	r2, [r7, #16]
 8001bd4:	68fb      	ldr	r3, [r7, #12]
 8001bd6:	4313      	orrs	r3, r2
 8001bd8:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001bda:	4a24      	ldr	r2, [pc, #144]	; (8001c6c <HAL_GPIO_Init+0x2e0>)
 8001bdc:	693b      	ldr	r3, [r7, #16]
 8001bde:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001be0:	4b22      	ldr	r3, [pc, #136]	; (8001c6c <HAL_GPIO_Init+0x2e0>)
 8001be2:	689b      	ldr	r3, [r3, #8]
 8001be4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001be6:	68fb      	ldr	r3, [r7, #12]
 8001be8:	43db      	mvns	r3, r3
 8001bea:	693a      	ldr	r2, [r7, #16]
 8001bec:	4013      	ands	r3, r2
 8001bee:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001bf0:	683b      	ldr	r3, [r7, #0]
 8001bf2:	685b      	ldr	r3, [r3, #4]
 8001bf4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d003      	beq.n	8001c04 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8001bfc:	693a      	ldr	r2, [r7, #16]
 8001bfe:	68fb      	ldr	r3, [r7, #12]
 8001c00:	4313      	orrs	r3, r2
 8001c02:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001c04:	4a19      	ldr	r2, [pc, #100]	; (8001c6c <HAL_GPIO_Init+0x2e0>)
 8001c06:	693b      	ldr	r3, [r7, #16]
 8001c08:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001c0a:	4b18      	ldr	r3, [pc, #96]	; (8001c6c <HAL_GPIO_Init+0x2e0>)
 8001c0c:	68db      	ldr	r3, [r3, #12]
 8001c0e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	43db      	mvns	r3, r3
 8001c14:	693a      	ldr	r2, [r7, #16]
 8001c16:	4013      	ands	r3, r2
 8001c18:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001c1a:	683b      	ldr	r3, [r7, #0]
 8001c1c:	685b      	ldr	r3, [r3, #4]
 8001c1e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d003      	beq.n	8001c2e <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 8001c26:	693a      	ldr	r2, [r7, #16]
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	4313      	orrs	r3, r2
 8001c2c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001c2e:	4a0f      	ldr	r2, [pc, #60]	; (8001c6c <HAL_GPIO_Init+0x2e0>)
 8001c30:	693b      	ldr	r3, [r7, #16]
 8001c32:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8001c34:	697b      	ldr	r3, [r7, #20]
 8001c36:	3301      	adds	r3, #1
 8001c38:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001c3a:	683b      	ldr	r3, [r7, #0]
 8001c3c:	681a      	ldr	r2, [r3, #0]
 8001c3e:	697b      	ldr	r3, [r7, #20]
 8001c40:	fa22 f303 	lsr.w	r3, r2, r3
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	f47f aea9 	bne.w	800199c <HAL_GPIO_Init+0x10>
  }
}
 8001c4a:	bf00      	nop
 8001c4c:	bf00      	nop
 8001c4e:	371c      	adds	r7, #28
 8001c50:	46bd      	mov	sp, r7
 8001c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c56:	4770      	bx	lr
 8001c58:	40021000 	.word	0x40021000
 8001c5c:	40010000 	.word	0x40010000
 8001c60:	48000400 	.word	0x48000400
 8001c64:	48000800 	.word	0x48000800
 8001c68:	48000c00 	.word	0x48000c00
 8001c6c:	40010400 	.word	0x40010400

08001c70 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001c70:	b480      	push	{r7}
 8001c72:	b085      	sub	sp, #20
 8001c74:	af00      	add	r7, sp, #0
 8001c76:	6078      	str	r0, [r7, #4]
 8001c78:	460b      	mov	r3, r1
 8001c7a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	691a      	ldr	r2, [r3, #16]
 8001c80:	887b      	ldrh	r3, [r7, #2]
 8001c82:	4013      	ands	r3, r2
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d002      	beq.n	8001c8e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001c88:	2301      	movs	r3, #1
 8001c8a:	73fb      	strb	r3, [r7, #15]
 8001c8c:	e001      	b.n	8001c92 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001c8e:	2300      	movs	r3, #0
 8001c90:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001c92:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c94:	4618      	mov	r0, r3
 8001c96:	3714      	adds	r7, #20
 8001c98:	46bd      	mov	sp, r7
 8001c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c9e:	4770      	bx	lr

08001ca0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001ca0:	b480      	push	{r7}
 8001ca2:	b083      	sub	sp, #12
 8001ca4:	af00      	add	r7, sp, #0
 8001ca6:	6078      	str	r0, [r7, #4]
 8001ca8:	460b      	mov	r3, r1
 8001caa:	807b      	strh	r3, [r7, #2]
 8001cac:	4613      	mov	r3, r2
 8001cae:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001cb0:	787b      	ldrb	r3, [r7, #1]
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d003      	beq.n	8001cbe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001cb6:	887a      	ldrh	r2, [r7, #2]
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001cbc:	e002      	b.n	8001cc4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001cbe:	887a      	ldrh	r2, [r7, #2]
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001cc4:	bf00      	nop
 8001cc6:	370c      	adds	r7, #12
 8001cc8:	46bd      	mov	sp, r7
 8001cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cce:	4770      	bx	lr

08001cd0 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F3 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001cd0:	b480      	push	{r7}
 8001cd2:	b085      	sub	sp, #20
 8001cd4:	af00      	add	r7, sp, #0
 8001cd6:	6078      	str	r0, [r7, #4]
 8001cd8:	460b      	mov	r3, r1
 8001cda:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	695b      	ldr	r3, [r3, #20]
 8001ce0:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001ce2:	887a      	ldrh	r2, [r7, #2]
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	4013      	ands	r3, r2
 8001ce8:	041a      	lsls	r2, r3, #16
 8001cea:	68fb      	ldr	r3, [r7, #12]
 8001cec:	43d9      	mvns	r1, r3
 8001cee:	887b      	ldrh	r3, [r7, #2]
 8001cf0:	400b      	ands	r3, r1
 8001cf2:	431a      	orrs	r2, r3
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	619a      	str	r2, [r3, #24]
}
 8001cf8:	bf00      	nop
 8001cfa:	3714      	adds	r7, #20
 8001cfc:	46bd      	mov	sp, r7
 8001cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d02:	4770      	bx	lr

08001d04 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001d04:	b580      	push	{r7, lr}
 8001d06:	b082      	sub	sp, #8
 8001d08:	af00      	add	r7, sp, #0
 8001d0a:	4603      	mov	r3, r0
 8001d0c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001d0e:	4b08      	ldr	r3, [pc, #32]	; (8001d30 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001d10:	695a      	ldr	r2, [r3, #20]
 8001d12:	88fb      	ldrh	r3, [r7, #6]
 8001d14:	4013      	ands	r3, r2
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d006      	beq.n	8001d28 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001d1a:	4a05      	ldr	r2, [pc, #20]	; (8001d30 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001d1c:	88fb      	ldrh	r3, [r7, #6]
 8001d1e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001d20:	88fb      	ldrh	r3, [r7, #6]
 8001d22:	4618      	mov	r0, r3
 8001d24:	f000 f806 	bl	8001d34 <HAL_GPIO_EXTI_Callback>
  }
}
 8001d28:	bf00      	nop
 8001d2a:	3708      	adds	r7, #8
 8001d2c:	46bd      	mov	sp, r7
 8001d2e:	bd80      	pop	{r7, pc}
 8001d30:	40010400 	.word	0x40010400

08001d34 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001d34:	b480      	push	{r7}
 8001d36:	b083      	sub	sp, #12
 8001d38:	af00      	add	r7, sp, #0
 8001d3a:	4603      	mov	r3, r0
 8001d3c:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001d3e:	bf00      	nop
 8001d40:	370c      	adds	r7, #12
 8001d42:	46bd      	mov	sp, r7
 8001d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d48:	4770      	bx	lr

08001d4a <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 8001d4a:	b580      	push	{r7, lr}
 8001d4c:	b084      	sub	sp, #16
 8001d4e:	af00      	add	r7, sp, #0
 8001d50:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d101      	bne.n	8001d5c <HAL_IWDG_Init+0x12>
  {
    return HAL_ERROR;
 8001d58:	2301      	movs	r3, #1
 8001d5a:	e038      	b.n	8001dce <HAL_IWDG_Init+0x84>
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));
  assert_param(IS_IWDG_WINDOW(hiwdg->Init.Window));

  /* Enable IWDG. LSI is turned on automatically */
  __HAL_IWDG_START(hiwdg);
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	f64c 42cc 	movw	r2, #52428	; 0xcccc
 8001d64:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR, IWDG_RLR and IWDG_WINR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	f245 5255 	movw	r2, #21845	; 0x5555
 8001d6e:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	687a      	ldr	r2, [r7, #4]
 8001d76:	6852      	ldr	r2, [r2, #4]
 8001d78:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	687a      	ldr	r2, [r7, #4]
 8001d80:	6892      	ldr	r2, [r2, #8]
 8001d82:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 8001d84:	f7fe fee0 	bl	8000b48 <HAL_GetTick>
 8001d88:	60f8      	str	r0, [r7, #12]

  /* Wait for register to be updated */
  while (hiwdg->Instance->SR != 0x00u)
 8001d8a:	e008      	b.n	8001d9e <HAL_IWDG_Init+0x54>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 8001d8c:	f7fe fedc 	bl	8000b48 <HAL_GetTick>
 8001d90:	4602      	mov	r2, r0
 8001d92:	68fb      	ldr	r3, [r7, #12]
 8001d94:	1ad3      	subs	r3, r2, r3
 8001d96:	2b26      	cmp	r3, #38	; 0x26
 8001d98:	d901      	bls.n	8001d9e <HAL_IWDG_Init+0x54>
    {
      return HAL_TIMEOUT;
 8001d9a:	2303      	movs	r3, #3
 8001d9c:	e017      	b.n	8001dce <HAL_IWDG_Init+0x84>
  while (hiwdg->Instance->SR != 0x00u)
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	68db      	ldr	r3, [r3, #12]
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d1f1      	bne.n	8001d8c <HAL_IWDG_Init+0x42>
    }
  }

  /* If window parameter is different than current value, modify window
  register */
  if (hiwdg->Instance->WINR != hiwdg->Init.Window)
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	691a      	ldr	r2, [r3, #16]
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	68db      	ldr	r3, [r3, #12]
 8001db2:	429a      	cmp	r2, r3
 8001db4:	d005      	beq.n	8001dc2 <HAL_IWDG_Init+0x78>
  {
    /* Write to IWDG WINR the IWDG_Window value to compare with. In any case,
    even if window feature is disabled, Watchdog will be reloaded by writing
    windows register */
    hiwdg->Instance->WINR = hiwdg->Init.Window;
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	687a      	ldr	r2, [r7, #4]
 8001dbc:	68d2      	ldr	r2, [r2, #12]
 8001dbe:	611a      	str	r2, [r3, #16]
 8001dc0:	e004      	b.n	8001dcc <HAL_IWDG_Init+0x82>
  }
  else
  {
    /* Reload IWDG counter with value defined in the reload register */
    __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 8001dca:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001dcc:	2300      	movs	r3, #0
}
 8001dce:	4618      	mov	r0, r3
 8001dd0:	3710      	adds	r7, #16
 8001dd2:	46bd      	mov	sp, r7
 8001dd4:	bd80      	pop	{r7, pc}

08001dd6 <HAL_IWDG_Refresh>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
 8001dd6:	b480      	push	{r7}
 8001dd8:	b083      	sub	sp, #12
 8001dda:	af00      	add	r7, sp, #0
 8001ddc:	6078      	str	r0, [r7, #4]
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 8001de6:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8001de8:	2300      	movs	r3, #0
}
 8001dea:	4618      	mov	r0, r3
 8001dec:	370c      	adds	r7, #12
 8001dee:	46bd      	mov	sp, r7
 8001df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df4:	4770      	bx	lr
	...

08001df8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001df8:	b580      	push	{r7, lr}
 8001dfa:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8001dfe:	af00      	add	r7, sp, #0
 8001e00:	1d3b      	adds	r3, r7, #4
 8001e02:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001e04:	1d3b      	adds	r3, r7, #4
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d102      	bne.n	8001e12 <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8001e0c:	2301      	movs	r3, #1
 8001e0e:	f000 bef4 	b.w	8002bfa <HAL_RCC_OscConfig+0xe02>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001e12:	1d3b      	adds	r3, r7, #4
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	f003 0301 	and.w	r3, r3, #1
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	f000 816a 	beq.w	80020f6 <HAL_RCC_OscConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001e22:	4bb3      	ldr	r3, [pc, #716]	; (80020f0 <HAL_RCC_OscConfig+0x2f8>)
 8001e24:	685b      	ldr	r3, [r3, #4]
 8001e26:	f003 030c 	and.w	r3, r3, #12
 8001e2a:	2b04      	cmp	r3, #4
 8001e2c:	d00c      	beq.n	8001e48 <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001e2e:	4bb0      	ldr	r3, [pc, #704]	; (80020f0 <HAL_RCC_OscConfig+0x2f8>)
 8001e30:	685b      	ldr	r3, [r3, #4]
 8001e32:	f003 030c 	and.w	r3, r3, #12
 8001e36:	2b08      	cmp	r3, #8
 8001e38:	d159      	bne.n	8001eee <HAL_RCC_OscConfig+0xf6>
 8001e3a:	4bad      	ldr	r3, [pc, #692]	; (80020f0 <HAL_RCC_OscConfig+0x2f8>)
 8001e3c:	685b      	ldr	r3, [r3, #4]
 8001e3e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e42:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001e46:	d152      	bne.n	8001eee <HAL_RCC_OscConfig+0xf6>
 8001e48:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001e4c:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e50:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8001e54:	fa93 f3a3 	rbit	r3, r3
 8001e58:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001e5c:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e60:	fab3 f383 	clz	r3, r3
 8001e64:	b2db      	uxtb	r3, r3
 8001e66:	095b      	lsrs	r3, r3, #5
 8001e68:	b2db      	uxtb	r3, r3
 8001e6a:	f043 0301 	orr.w	r3, r3, #1
 8001e6e:	b2db      	uxtb	r3, r3
 8001e70:	2b01      	cmp	r3, #1
 8001e72:	d102      	bne.n	8001e7a <HAL_RCC_OscConfig+0x82>
 8001e74:	4b9e      	ldr	r3, [pc, #632]	; (80020f0 <HAL_RCC_OscConfig+0x2f8>)
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	e015      	b.n	8001ea6 <HAL_RCC_OscConfig+0xae>
 8001e7a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001e7e:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e82:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8001e86:	fa93 f3a3 	rbit	r3, r3
 8001e8a:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8001e8e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001e92:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8001e96:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8001e9a:	fa93 f3a3 	rbit	r3, r3
 8001e9e:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8001ea2:	4b93      	ldr	r3, [pc, #588]	; (80020f0 <HAL_RCC_OscConfig+0x2f8>)
 8001ea4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ea6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001eaa:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8001eae:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8001eb2:	fa92 f2a2 	rbit	r2, r2
 8001eb6:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8001eba:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8001ebe:	fab2 f282 	clz	r2, r2
 8001ec2:	b2d2      	uxtb	r2, r2
 8001ec4:	f042 0220 	orr.w	r2, r2, #32
 8001ec8:	b2d2      	uxtb	r2, r2
 8001eca:	f002 021f 	and.w	r2, r2, #31
 8001ece:	2101      	movs	r1, #1
 8001ed0:	fa01 f202 	lsl.w	r2, r1, r2
 8001ed4:	4013      	ands	r3, r2
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	f000 810c 	beq.w	80020f4 <HAL_RCC_OscConfig+0x2fc>
 8001edc:	1d3b      	adds	r3, r7, #4
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	685b      	ldr	r3, [r3, #4]
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	f040 8106 	bne.w	80020f4 <HAL_RCC_OscConfig+0x2fc>
      {
        return HAL_ERROR;
 8001ee8:	2301      	movs	r3, #1
 8001eea:	f000 be86 	b.w	8002bfa <HAL_RCC_OscConfig+0xe02>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001eee:	1d3b      	adds	r3, r7, #4
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	685b      	ldr	r3, [r3, #4]
 8001ef4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001ef8:	d106      	bne.n	8001f08 <HAL_RCC_OscConfig+0x110>
 8001efa:	4b7d      	ldr	r3, [pc, #500]	; (80020f0 <HAL_RCC_OscConfig+0x2f8>)
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	4a7c      	ldr	r2, [pc, #496]	; (80020f0 <HAL_RCC_OscConfig+0x2f8>)
 8001f00:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f04:	6013      	str	r3, [r2, #0]
 8001f06:	e030      	b.n	8001f6a <HAL_RCC_OscConfig+0x172>
 8001f08:	1d3b      	adds	r3, r7, #4
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	685b      	ldr	r3, [r3, #4]
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d10c      	bne.n	8001f2c <HAL_RCC_OscConfig+0x134>
 8001f12:	4b77      	ldr	r3, [pc, #476]	; (80020f0 <HAL_RCC_OscConfig+0x2f8>)
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	4a76      	ldr	r2, [pc, #472]	; (80020f0 <HAL_RCC_OscConfig+0x2f8>)
 8001f18:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001f1c:	6013      	str	r3, [r2, #0]
 8001f1e:	4b74      	ldr	r3, [pc, #464]	; (80020f0 <HAL_RCC_OscConfig+0x2f8>)
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	4a73      	ldr	r2, [pc, #460]	; (80020f0 <HAL_RCC_OscConfig+0x2f8>)
 8001f24:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001f28:	6013      	str	r3, [r2, #0]
 8001f2a:	e01e      	b.n	8001f6a <HAL_RCC_OscConfig+0x172>
 8001f2c:	1d3b      	adds	r3, r7, #4
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	685b      	ldr	r3, [r3, #4]
 8001f32:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001f36:	d10c      	bne.n	8001f52 <HAL_RCC_OscConfig+0x15a>
 8001f38:	4b6d      	ldr	r3, [pc, #436]	; (80020f0 <HAL_RCC_OscConfig+0x2f8>)
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	4a6c      	ldr	r2, [pc, #432]	; (80020f0 <HAL_RCC_OscConfig+0x2f8>)
 8001f3e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001f42:	6013      	str	r3, [r2, #0]
 8001f44:	4b6a      	ldr	r3, [pc, #424]	; (80020f0 <HAL_RCC_OscConfig+0x2f8>)
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	4a69      	ldr	r2, [pc, #420]	; (80020f0 <HAL_RCC_OscConfig+0x2f8>)
 8001f4a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f4e:	6013      	str	r3, [r2, #0]
 8001f50:	e00b      	b.n	8001f6a <HAL_RCC_OscConfig+0x172>
 8001f52:	4b67      	ldr	r3, [pc, #412]	; (80020f0 <HAL_RCC_OscConfig+0x2f8>)
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	4a66      	ldr	r2, [pc, #408]	; (80020f0 <HAL_RCC_OscConfig+0x2f8>)
 8001f58:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001f5c:	6013      	str	r3, [r2, #0]
 8001f5e:	4b64      	ldr	r3, [pc, #400]	; (80020f0 <HAL_RCC_OscConfig+0x2f8>)
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	4a63      	ldr	r2, [pc, #396]	; (80020f0 <HAL_RCC_OscConfig+0x2f8>)
 8001f64:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001f68:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001f6a:	4b61      	ldr	r3, [pc, #388]	; (80020f0 <HAL_RCC_OscConfig+0x2f8>)
 8001f6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f6e:	f023 020f 	bic.w	r2, r3, #15
 8001f72:	1d3b      	adds	r3, r7, #4
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	689b      	ldr	r3, [r3, #8]
 8001f78:	495d      	ldr	r1, [pc, #372]	; (80020f0 <HAL_RCC_OscConfig+0x2f8>)
 8001f7a:	4313      	orrs	r3, r2
 8001f7c:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001f7e:	1d3b      	adds	r3, r7, #4
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	685b      	ldr	r3, [r3, #4]
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d059      	beq.n	800203c <HAL_RCC_OscConfig+0x244>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f88:	f7fe fdde 	bl	8000b48 <HAL_GetTick>
 8001f8c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f90:	e00a      	b.n	8001fa8 <HAL_RCC_OscConfig+0x1b0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001f92:	f7fe fdd9 	bl	8000b48 <HAL_GetTick>
 8001f96:	4602      	mov	r2, r0
 8001f98:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001f9c:	1ad3      	subs	r3, r2, r3
 8001f9e:	2b64      	cmp	r3, #100	; 0x64
 8001fa0:	d902      	bls.n	8001fa8 <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 8001fa2:	2303      	movs	r3, #3
 8001fa4:	f000 be29 	b.w	8002bfa <HAL_RCC_OscConfig+0xe02>
 8001fa8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001fac:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fb0:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8001fb4:	fa93 f3a3 	rbit	r3, r3
 8001fb8:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8001fbc:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001fc0:	fab3 f383 	clz	r3, r3
 8001fc4:	b2db      	uxtb	r3, r3
 8001fc6:	095b      	lsrs	r3, r3, #5
 8001fc8:	b2db      	uxtb	r3, r3
 8001fca:	f043 0301 	orr.w	r3, r3, #1
 8001fce:	b2db      	uxtb	r3, r3
 8001fd0:	2b01      	cmp	r3, #1
 8001fd2:	d102      	bne.n	8001fda <HAL_RCC_OscConfig+0x1e2>
 8001fd4:	4b46      	ldr	r3, [pc, #280]	; (80020f0 <HAL_RCC_OscConfig+0x2f8>)
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	e015      	b.n	8002006 <HAL_RCC_OscConfig+0x20e>
 8001fda:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001fde:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fe2:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8001fe6:	fa93 f3a3 	rbit	r3, r3
 8001fea:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8001fee:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001ff2:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8001ff6:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8001ffa:	fa93 f3a3 	rbit	r3, r3
 8001ffe:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8002002:	4b3b      	ldr	r3, [pc, #236]	; (80020f0 <HAL_RCC_OscConfig+0x2f8>)
 8002004:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002006:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800200a:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 800200e:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8002012:	fa92 f2a2 	rbit	r2, r2
 8002016:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 800201a:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 800201e:	fab2 f282 	clz	r2, r2
 8002022:	b2d2      	uxtb	r2, r2
 8002024:	f042 0220 	orr.w	r2, r2, #32
 8002028:	b2d2      	uxtb	r2, r2
 800202a:	f002 021f 	and.w	r2, r2, #31
 800202e:	2101      	movs	r1, #1
 8002030:	fa01 f202 	lsl.w	r2, r1, r2
 8002034:	4013      	ands	r3, r2
 8002036:	2b00      	cmp	r3, #0
 8002038:	d0ab      	beq.n	8001f92 <HAL_RCC_OscConfig+0x19a>
 800203a:	e05c      	b.n	80020f6 <HAL_RCC_OscConfig+0x2fe>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800203c:	f7fe fd84 	bl	8000b48 <HAL_GetTick>
 8002040:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002044:	e00a      	b.n	800205c <HAL_RCC_OscConfig+0x264>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002046:	f7fe fd7f 	bl	8000b48 <HAL_GetTick>
 800204a:	4602      	mov	r2, r0
 800204c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002050:	1ad3      	subs	r3, r2, r3
 8002052:	2b64      	cmp	r3, #100	; 0x64
 8002054:	d902      	bls.n	800205c <HAL_RCC_OscConfig+0x264>
          {
            return HAL_TIMEOUT;
 8002056:	2303      	movs	r3, #3
 8002058:	f000 bdcf 	b.w	8002bfa <HAL_RCC_OscConfig+0xe02>
 800205c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002060:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002064:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8002068:	fa93 f3a3 	rbit	r3, r3
 800206c:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8002070:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002074:	fab3 f383 	clz	r3, r3
 8002078:	b2db      	uxtb	r3, r3
 800207a:	095b      	lsrs	r3, r3, #5
 800207c:	b2db      	uxtb	r3, r3
 800207e:	f043 0301 	orr.w	r3, r3, #1
 8002082:	b2db      	uxtb	r3, r3
 8002084:	2b01      	cmp	r3, #1
 8002086:	d102      	bne.n	800208e <HAL_RCC_OscConfig+0x296>
 8002088:	4b19      	ldr	r3, [pc, #100]	; (80020f0 <HAL_RCC_OscConfig+0x2f8>)
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	e015      	b.n	80020ba <HAL_RCC_OscConfig+0x2c2>
 800208e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002092:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002096:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 800209a:	fa93 f3a3 	rbit	r3, r3
 800209e:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 80020a2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80020a6:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 80020aa:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 80020ae:	fa93 f3a3 	rbit	r3, r3
 80020b2:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 80020b6:	4b0e      	ldr	r3, [pc, #56]	; (80020f0 <HAL_RCC_OscConfig+0x2f8>)
 80020b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020ba:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80020be:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 80020c2:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 80020c6:	fa92 f2a2 	rbit	r2, r2
 80020ca:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 80020ce:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 80020d2:	fab2 f282 	clz	r2, r2
 80020d6:	b2d2      	uxtb	r2, r2
 80020d8:	f042 0220 	orr.w	r2, r2, #32
 80020dc:	b2d2      	uxtb	r2, r2
 80020de:	f002 021f 	and.w	r2, r2, #31
 80020e2:	2101      	movs	r1, #1
 80020e4:	fa01 f202 	lsl.w	r2, r1, r2
 80020e8:	4013      	ands	r3, r2
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d1ab      	bne.n	8002046 <HAL_RCC_OscConfig+0x24e>
 80020ee:	e002      	b.n	80020f6 <HAL_RCC_OscConfig+0x2fe>
 80020f0:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80020f4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80020f6:	1d3b      	adds	r3, r7, #4
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	f003 0302 	and.w	r3, r3, #2
 8002100:	2b00      	cmp	r3, #0
 8002102:	f000 816f 	beq.w	80023e4 <HAL_RCC_OscConfig+0x5ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8002106:	4bd0      	ldr	r3, [pc, #832]	; (8002448 <HAL_RCC_OscConfig+0x650>)
 8002108:	685b      	ldr	r3, [r3, #4]
 800210a:	f003 030c 	and.w	r3, r3, #12
 800210e:	2b00      	cmp	r3, #0
 8002110:	d00b      	beq.n	800212a <HAL_RCC_OscConfig+0x332>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8002112:	4bcd      	ldr	r3, [pc, #820]	; (8002448 <HAL_RCC_OscConfig+0x650>)
 8002114:	685b      	ldr	r3, [r3, #4]
 8002116:	f003 030c 	and.w	r3, r3, #12
 800211a:	2b08      	cmp	r3, #8
 800211c:	d16c      	bne.n	80021f8 <HAL_RCC_OscConfig+0x400>
 800211e:	4bca      	ldr	r3, [pc, #808]	; (8002448 <HAL_RCC_OscConfig+0x650>)
 8002120:	685b      	ldr	r3, [r3, #4]
 8002122:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002126:	2b00      	cmp	r3, #0
 8002128:	d166      	bne.n	80021f8 <HAL_RCC_OscConfig+0x400>
 800212a:	2302      	movs	r3, #2
 800212c:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002130:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8002134:	fa93 f3a3 	rbit	r3, r3
 8002138:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 800213c:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002140:	fab3 f383 	clz	r3, r3
 8002144:	b2db      	uxtb	r3, r3
 8002146:	095b      	lsrs	r3, r3, #5
 8002148:	b2db      	uxtb	r3, r3
 800214a:	f043 0301 	orr.w	r3, r3, #1
 800214e:	b2db      	uxtb	r3, r3
 8002150:	2b01      	cmp	r3, #1
 8002152:	d102      	bne.n	800215a <HAL_RCC_OscConfig+0x362>
 8002154:	4bbc      	ldr	r3, [pc, #752]	; (8002448 <HAL_RCC_OscConfig+0x650>)
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	e013      	b.n	8002182 <HAL_RCC_OscConfig+0x38a>
 800215a:	2302      	movs	r3, #2
 800215c:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002160:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8002164:	fa93 f3a3 	rbit	r3, r3
 8002168:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 800216c:	2302      	movs	r3, #2
 800216e:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8002172:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002176:	fa93 f3a3 	rbit	r3, r3
 800217a:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 800217e:	4bb2      	ldr	r3, [pc, #712]	; (8002448 <HAL_RCC_OscConfig+0x650>)
 8002180:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002182:	2202      	movs	r2, #2
 8002184:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8002188:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 800218c:	fa92 f2a2 	rbit	r2, r2
 8002190:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8002194:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8002198:	fab2 f282 	clz	r2, r2
 800219c:	b2d2      	uxtb	r2, r2
 800219e:	f042 0220 	orr.w	r2, r2, #32
 80021a2:	b2d2      	uxtb	r2, r2
 80021a4:	f002 021f 	and.w	r2, r2, #31
 80021a8:	2101      	movs	r1, #1
 80021aa:	fa01 f202 	lsl.w	r2, r1, r2
 80021ae:	4013      	ands	r3, r2
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d007      	beq.n	80021c4 <HAL_RCC_OscConfig+0x3cc>
 80021b4:	1d3b      	adds	r3, r7, #4
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	691b      	ldr	r3, [r3, #16]
 80021ba:	2b01      	cmp	r3, #1
 80021bc:	d002      	beq.n	80021c4 <HAL_RCC_OscConfig+0x3cc>
      {
        return HAL_ERROR;
 80021be:	2301      	movs	r3, #1
 80021c0:	f000 bd1b 	b.w	8002bfa <HAL_RCC_OscConfig+0xe02>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80021c4:	4ba0      	ldr	r3, [pc, #640]	; (8002448 <HAL_RCC_OscConfig+0x650>)
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80021cc:	1d3b      	adds	r3, r7, #4
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	695b      	ldr	r3, [r3, #20]
 80021d2:	21f8      	movs	r1, #248	; 0xf8
 80021d4:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021d8:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 80021dc:	fa91 f1a1 	rbit	r1, r1
 80021e0:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 80021e4:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 80021e8:	fab1 f181 	clz	r1, r1
 80021ec:	b2c9      	uxtb	r1, r1
 80021ee:	408b      	lsls	r3, r1
 80021f0:	4995      	ldr	r1, [pc, #596]	; (8002448 <HAL_RCC_OscConfig+0x650>)
 80021f2:	4313      	orrs	r3, r2
 80021f4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80021f6:	e0f5      	b.n	80023e4 <HAL_RCC_OscConfig+0x5ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80021f8:	1d3b      	adds	r3, r7, #4
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	691b      	ldr	r3, [r3, #16]
 80021fe:	2b00      	cmp	r3, #0
 8002200:	f000 8085 	beq.w	800230e <HAL_RCC_OscConfig+0x516>
 8002204:	2301      	movs	r3, #1
 8002206:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800220a:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 800220e:	fa93 f3a3 	rbit	r3, r3
 8002212:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8002216:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800221a:	fab3 f383 	clz	r3, r3
 800221e:	b2db      	uxtb	r3, r3
 8002220:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002224:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002228:	009b      	lsls	r3, r3, #2
 800222a:	461a      	mov	r2, r3
 800222c:	2301      	movs	r3, #1
 800222e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002230:	f7fe fc8a 	bl	8000b48 <HAL_GetTick>
 8002234:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002238:	e00a      	b.n	8002250 <HAL_RCC_OscConfig+0x458>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800223a:	f7fe fc85 	bl	8000b48 <HAL_GetTick>
 800223e:	4602      	mov	r2, r0
 8002240:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002244:	1ad3      	subs	r3, r2, r3
 8002246:	2b02      	cmp	r3, #2
 8002248:	d902      	bls.n	8002250 <HAL_RCC_OscConfig+0x458>
          {
            return HAL_TIMEOUT;
 800224a:	2303      	movs	r3, #3
 800224c:	f000 bcd5 	b.w	8002bfa <HAL_RCC_OscConfig+0xe02>
 8002250:	2302      	movs	r3, #2
 8002252:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002256:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 800225a:	fa93 f3a3 	rbit	r3, r3
 800225e:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8002262:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002266:	fab3 f383 	clz	r3, r3
 800226a:	b2db      	uxtb	r3, r3
 800226c:	095b      	lsrs	r3, r3, #5
 800226e:	b2db      	uxtb	r3, r3
 8002270:	f043 0301 	orr.w	r3, r3, #1
 8002274:	b2db      	uxtb	r3, r3
 8002276:	2b01      	cmp	r3, #1
 8002278:	d102      	bne.n	8002280 <HAL_RCC_OscConfig+0x488>
 800227a:	4b73      	ldr	r3, [pc, #460]	; (8002448 <HAL_RCC_OscConfig+0x650>)
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	e013      	b.n	80022a8 <HAL_RCC_OscConfig+0x4b0>
 8002280:	2302      	movs	r3, #2
 8002282:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002286:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 800228a:	fa93 f3a3 	rbit	r3, r3
 800228e:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8002292:	2302      	movs	r3, #2
 8002294:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8002298:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 800229c:	fa93 f3a3 	rbit	r3, r3
 80022a0:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 80022a4:	4b68      	ldr	r3, [pc, #416]	; (8002448 <HAL_RCC_OscConfig+0x650>)
 80022a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022a8:	2202      	movs	r2, #2
 80022aa:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 80022ae:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 80022b2:	fa92 f2a2 	rbit	r2, r2
 80022b6:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 80022ba:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 80022be:	fab2 f282 	clz	r2, r2
 80022c2:	b2d2      	uxtb	r2, r2
 80022c4:	f042 0220 	orr.w	r2, r2, #32
 80022c8:	b2d2      	uxtb	r2, r2
 80022ca:	f002 021f 	and.w	r2, r2, #31
 80022ce:	2101      	movs	r1, #1
 80022d0:	fa01 f202 	lsl.w	r2, r1, r2
 80022d4:	4013      	ands	r3, r2
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d0af      	beq.n	800223a <HAL_RCC_OscConfig+0x442>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80022da:	4b5b      	ldr	r3, [pc, #364]	; (8002448 <HAL_RCC_OscConfig+0x650>)
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80022e2:	1d3b      	adds	r3, r7, #4
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	695b      	ldr	r3, [r3, #20]
 80022e8:	21f8      	movs	r1, #248	; 0xf8
 80022ea:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022ee:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 80022f2:	fa91 f1a1 	rbit	r1, r1
 80022f6:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 80022fa:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 80022fe:	fab1 f181 	clz	r1, r1
 8002302:	b2c9      	uxtb	r1, r1
 8002304:	408b      	lsls	r3, r1
 8002306:	4950      	ldr	r1, [pc, #320]	; (8002448 <HAL_RCC_OscConfig+0x650>)
 8002308:	4313      	orrs	r3, r2
 800230a:	600b      	str	r3, [r1, #0]
 800230c:	e06a      	b.n	80023e4 <HAL_RCC_OscConfig+0x5ec>
 800230e:	2301      	movs	r3, #1
 8002310:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002314:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8002318:	fa93 f3a3 	rbit	r3, r3
 800231c:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8002320:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002324:	fab3 f383 	clz	r3, r3
 8002328:	b2db      	uxtb	r3, r3
 800232a:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800232e:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002332:	009b      	lsls	r3, r3, #2
 8002334:	461a      	mov	r2, r3
 8002336:	2300      	movs	r3, #0
 8002338:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800233a:	f7fe fc05 	bl	8000b48 <HAL_GetTick>
 800233e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002342:	e00a      	b.n	800235a <HAL_RCC_OscConfig+0x562>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002344:	f7fe fc00 	bl	8000b48 <HAL_GetTick>
 8002348:	4602      	mov	r2, r0
 800234a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800234e:	1ad3      	subs	r3, r2, r3
 8002350:	2b02      	cmp	r3, #2
 8002352:	d902      	bls.n	800235a <HAL_RCC_OscConfig+0x562>
          {
            return HAL_TIMEOUT;
 8002354:	2303      	movs	r3, #3
 8002356:	f000 bc50 	b.w	8002bfa <HAL_RCC_OscConfig+0xe02>
 800235a:	2302      	movs	r3, #2
 800235c:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002360:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8002364:	fa93 f3a3 	rbit	r3, r3
 8002368:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 800236c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002370:	fab3 f383 	clz	r3, r3
 8002374:	b2db      	uxtb	r3, r3
 8002376:	095b      	lsrs	r3, r3, #5
 8002378:	b2db      	uxtb	r3, r3
 800237a:	f043 0301 	orr.w	r3, r3, #1
 800237e:	b2db      	uxtb	r3, r3
 8002380:	2b01      	cmp	r3, #1
 8002382:	d102      	bne.n	800238a <HAL_RCC_OscConfig+0x592>
 8002384:	4b30      	ldr	r3, [pc, #192]	; (8002448 <HAL_RCC_OscConfig+0x650>)
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	e013      	b.n	80023b2 <HAL_RCC_OscConfig+0x5ba>
 800238a:	2302      	movs	r3, #2
 800238c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002390:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8002394:	fa93 f3a3 	rbit	r3, r3
 8002398:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800239c:	2302      	movs	r3, #2
 800239e:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80023a2:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80023a6:	fa93 f3a3 	rbit	r3, r3
 80023aa:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80023ae:	4b26      	ldr	r3, [pc, #152]	; (8002448 <HAL_RCC_OscConfig+0x650>)
 80023b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023b2:	2202      	movs	r2, #2
 80023b4:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 80023b8:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 80023bc:	fa92 f2a2 	rbit	r2, r2
 80023c0:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 80023c4:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 80023c8:	fab2 f282 	clz	r2, r2
 80023cc:	b2d2      	uxtb	r2, r2
 80023ce:	f042 0220 	orr.w	r2, r2, #32
 80023d2:	b2d2      	uxtb	r2, r2
 80023d4:	f002 021f 	and.w	r2, r2, #31
 80023d8:	2101      	movs	r1, #1
 80023da:	fa01 f202 	lsl.w	r2, r1, r2
 80023de:	4013      	ands	r3, r2
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d1af      	bne.n	8002344 <HAL_RCC_OscConfig+0x54c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80023e4:	1d3b      	adds	r3, r7, #4
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	f003 0308 	and.w	r3, r3, #8
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	f000 80da 	beq.w	80025a8 <HAL_RCC_OscConfig+0x7b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80023f4:	1d3b      	adds	r3, r7, #4
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	699b      	ldr	r3, [r3, #24]
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d069      	beq.n	80024d2 <HAL_RCC_OscConfig+0x6da>
 80023fe:	2301      	movs	r3, #1
 8002400:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002404:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8002408:	fa93 f3a3 	rbit	r3, r3
 800240c:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8002410:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002414:	fab3 f383 	clz	r3, r3
 8002418:	b2db      	uxtb	r3, r3
 800241a:	461a      	mov	r2, r3
 800241c:	4b0b      	ldr	r3, [pc, #44]	; (800244c <HAL_RCC_OscConfig+0x654>)
 800241e:	4413      	add	r3, r2
 8002420:	009b      	lsls	r3, r3, #2
 8002422:	461a      	mov	r2, r3
 8002424:	2301      	movs	r3, #1
 8002426:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002428:	f7fe fb8e 	bl	8000b48 <HAL_GetTick>
 800242c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002430:	e00e      	b.n	8002450 <HAL_RCC_OscConfig+0x658>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002432:	f7fe fb89 	bl	8000b48 <HAL_GetTick>
 8002436:	4602      	mov	r2, r0
 8002438:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800243c:	1ad3      	subs	r3, r2, r3
 800243e:	2b02      	cmp	r3, #2
 8002440:	d906      	bls.n	8002450 <HAL_RCC_OscConfig+0x658>
        {
          return HAL_TIMEOUT;
 8002442:	2303      	movs	r3, #3
 8002444:	e3d9      	b.n	8002bfa <HAL_RCC_OscConfig+0xe02>
 8002446:	bf00      	nop
 8002448:	40021000 	.word	0x40021000
 800244c:	10908120 	.word	0x10908120
 8002450:	2302      	movs	r3, #2
 8002452:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002456:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800245a:	fa93 f3a3 	rbit	r3, r3
 800245e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8002462:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8002466:	2202      	movs	r2, #2
 8002468:	601a      	str	r2, [r3, #0]
 800246a:	f507 7380 	add.w	r3, r7, #256	; 0x100
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	fa93 f2a3 	rbit	r2, r3
 8002474:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8002478:	601a      	str	r2, [r3, #0]
 800247a:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 800247e:	2202      	movs	r2, #2
 8002480:	601a      	str	r2, [r3, #0]
 8002482:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	fa93 f2a3 	rbit	r2, r3
 800248c:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8002490:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002492:	4ba5      	ldr	r3, [pc, #660]	; (8002728 <HAL_RCC_OscConfig+0x930>)
 8002494:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002496:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 800249a:	2102      	movs	r1, #2
 800249c:	6019      	str	r1, [r3, #0]
 800249e:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	fa93 f1a3 	rbit	r1, r3
 80024a8:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 80024ac:	6019      	str	r1, [r3, #0]
  return result;
 80024ae:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	fab3 f383 	clz	r3, r3
 80024b8:	b2db      	uxtb	r3, r3
 80024ba:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80024be:	b2db      	uxtb	r3, r3
 80024c0:	f003 031f 	and.w	r3, r3, #31
 80024c4:	2101      	movs	r1, #1
 80024c6:	fa01 f303 	lsl.w	r3, r1, r3
 80024ca:	4013      	ands	r3, r2
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d0b0      	beq.n	8002432 <HAL_RCC_OscConfig+0x63a>
 80024d0:	e06a      	b.n	80025a8 <HAL_RCC_OscConfig+0x7b0>
 80024d2:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 80024d6:	2201      	movs	r2, #1
 80024d8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024da:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	fa93 f2a3 	rbit	r2, r3
 80024e4:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80024e8:	601a      	str	r2, [r3, #0]
  return result;
 80024ea:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80024ee:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80024f0:	fab3 f383 	clz	r3, r3
 80024f4:	b2db      	uxtb	r3, r3
 80024f6:	461a      	mov	r2, r3
 80024f8:	4b8c      	ldr	r3, [pc, #560]	; (800272c <HAL_RCC_OscConfig+0x934>)
 80024fa:	4413      	add	r3, r2
 80024fc:	009b      	lsls	r3, r3, #2
 80024fe:	461a      	mov	r2, r3
 8002500:	2300      	movs	r3, #0
 8002502:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002504:	f7fe fb20 	bl	8000b48 <HAL_GetTick>
 8002508:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800250c:	e009      	b.n	8002522 <HAL_RCC_OscConfig+0x72a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800250e:	f7fe fb1b 	bl	8000b48 <HAL_GetTick>
 8002512:	4602      	mov	r2, r0
 8002514:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002518:	1ad3      	subs	r3, r2, r3
 800251a:	2b02      	cmp	r3, #2
 800251c:	d901      	bls.n	8002522 <HAL_RCC_OscConfig+0x72a>
        {
          return HAL_TIMEOUT;
 800251e:	2303      	movs	r3, #3
 8002520:	e36b      	b.n	8002bfa <HAL_RCC_OscConfig+0xe02>
 8002522:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8002526:	2202      	movs	r2, #2
 8002528:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800252a:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	fa93 f2a3 	rbit	r2, r3
 8002534:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8002538:	601a      	str	r2, [r3, #0]
 800253a:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 800253e:	2202      	movs	r2, #2
 8002540:	601a      	str	r2, [r3, #0]
 8002542:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	fa93 f2a3 	rbit	r2, r3
 800254c:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002550:	601a      	str	r2, [r3, #0]
 8002552:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8002556:	2202      	movs	r2, #2
 8002558:	601a      	str	r2, [r3, #0]
 800255a:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	fa93 f2a3 	rbit	r2, r3
 8002564:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002568:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800256a:	4b6f      	ldr	r3, [pc, #444]	; (8002728 <HAL_RCC_OscConfig+0x930>)
 800256c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800256e:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8002572:	2102      	movs	r1, #2
 8002574:	6019      	str	r1, [r3, #0]
 8002576:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	fa93 f1a3 	rbit	r1, r3
 8002580:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8002584:	6019      	str	r1, [r3, #0]
  return result;
 8002586:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	fab3 f383 	clz	r3, r3
 8002590:	b2db      	uxtb	r3, r3
 8002592:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8002596:	b2db      	uxtb	r3, r3
 8002598:	f003 031f 	and.w	r3, r3, #31
 800259c:	2101      	movs	r1, #1
 800259e:	fa01 f303 	lsl.w	r3, r1, r3
 80025a2:	4013      	ands	r3, r2
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d1b2      	bne.n	800250e <HAL_RCC_OscConfig+0x716>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80025a8:	1d3b      	adds	r3, r7, #4
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	f003 0304 	and.w	r3, r3, #4
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	f000 8158 	beq.w	8002868 <HAL_RCC_OscConfig+0xa70>
  {
    FlagStatus       pwrclkchanged = RESET;
 80025b8:	2300      	movs	r3, #0
 80025ba:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80025be:	4b5a      	ldr	r3, [pc, #360]	; (8002728 <HAL_RCC_OscConfig+0x930>)
 80025c0:	69db      	ldr	r3, [r3, #28]
 80025c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d112      	bne.n	80025f0 <HAL_RCC_OscConfig+0x7f8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80025ca:	4b57      	ldr	r3, [pc, #348]	; (8002728 <HAL_RCC_OscConfig+0x930>)
 80025cc:	69db      	ldr	r3, [r3, #28]
 80025ce:	4a56      	ldr	r2, [pc, #344]	; (8002728 <HAL_RCC_OscConfig+0x930>)
 80025d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80025d4:	61d3      	str	r3, [r2, #28]
 80025d6:	4b54      	ldr	r3, [pc, #336]	; (8002728 <HAL_RCC_OscConfig+0x930>)
 80025d8:	69db      	ldr	r3, [r3, #28]
 80025da:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 80025de:	f107 0308 	add.w	r3, r7, #8
 80025e2:	601a      	str	r2, [r3, #0]
 80025e4:	f107 0308 	add.w	r3, r7, #8
 80025e8:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 80025ea:	2301      	movs	r3, #1
 80025ec:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025f0:	4b4f      	ldr	r3, [pc, #316]	; (8002730 <HAL_RCC_OscConfig+0x938>)
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d11a      	bne.n	8002632 <HAL_RCC_OscConfig+0x83a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80025fc:	4b4c      	ldr	r3, [pc, #304]	; (8002730 <HAL_RCC_OscConfig+0x938>)
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	4a4b      	ldr	r2, [pc, #300]	; (8002730 <HAL_RCC_OscConfig+0x938>)
 8002602:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002606:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002608:	f7fe fa9e 	bl	8000b48 <HAL_GetTick>
 800260c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002610:	e009      	b.n	8002626 <HAL_RCC_OscConfig+0x82e>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002612:	f7fe fa99 	bl	8000b48 <HAL_GetTick>
 8002616:	4602      	mov	r2, r0
 8002618:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800261c:	1ad3      	subs	r3, r2, r3
 800261e:	2b64      	cmp	r3, #100	; 0x64
 8002620:	d901      	bls.n	8002626 <HAL_RCC_OscConfig+0x82e>
        {
          return HAL_TIMEOUT;
 8002622:	2303      	movs	r3, #3
 8002624:	e2e9      	b.n	8002bfa <HAL_RCC_OscConfig+0xe02>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002626:	4b42      	ldr	r3, [pc, #264]	; (8002730 <HAL_RCC_OscConfig+0x938>)
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800262e:	2b00      	cmp	r3, #0
 8002630:	d0ef      	beq.n	8002612 <HAL_RCC_OscConfig+0x81a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002632:	1d3b      	adds	r3, r7, #4
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	68db      	ldr	r3, [r3, #12]
 8002638:	2b01      	cmp	r3, #1
 800263a:	d106      	bne.n	800264a <HAL_RCC_OscConfig+0x852>
 800263c:	4b3a      	ldr	r3, [pc, #232]	; (8002728 <HAL_RCC_OscConfig+0x930>)
 800263e:	6a1b      	ldr	r3, [r3, #32]
 8002640:	4a39      	ldr	r2, [pc, #228]	; (8002728 <HAL_RCC_OscConfig+0x930>)
 8002642:	f043 0301 	orr.w	r3, r3, #1
 8002646:	6213      	str	r3, [r2, #32]
 8002648:	e02f      	b.n	80026aa <HAL_RCC_OscConfig+0x8b2>
 800264a:	1d3b      	adds	r3, r7, #4
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	68db      	ldr	r3, [r3, #12]
 8002650:	2b00      	cmp	r3, #0
 8002652:	d10c      	bne.n	800266e <HAL_RCC_OscConfig+0x876>
 8002654:	4b34      	ldr	r3, [pc, #208]	; (8002728 <HAL_RCC_OscConfig+0x930>)
 8002656:	6a1b      	ldr	r3, [r3, #32]
 8002658:	4a33      	ldr	r2, [pc, #204]	; (8002728 <HAL_RCC_OscConfig+0x930>)
 800265a:	f023 0301 	bic.w	r3, r3, #1
 800265e:	6213      	str	r3, [r2, #32]
 8002660:	4b31      	ldr	r3, [pc, #196]	; (8002728 <HAL_RCC_OscConfig+0x930>)
 8002662:	6a1b      	ldr	r3, [r3, #32]
 8002664:	4a30      	ldr	r2, [pc, #192]	; (8002728 <HAL_RCC_OscConfig+0x930>)
 8002666:	f023 0304 	bic.w	r3, r3, #4
 800266a:	6213      	str	r3, [r2, #32]
 800266c:	e01d      	b.n	80026aa <HAL_RCC_OscConfig+0x8b2>
 800266e:	1d3b      	adds	r3, r7, #4
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	68db      	ldr	r3, [r3, #12]
 8002674:	2b05      	cmp	r3, #5
 8002676:	d10c      	bne.n	8002692 <HAL_RCC_OscConfig+0x89a>
 8002678:	4b2b      	ldr	r3, [pc, #172]	; (8002728 <HAL_RCC_OscConfig+0x930>)
 800267a:	6a1b      	ldr	r3, [r3, #32]
 800267c:	4a2a      	ldr	r2, [pc, #168]	; (8002728 <HAL_RCC_OscConfig+0x930>)
 800267e:	f043 0304 	orr.w	r3, r3, #4
 8002682:	6213      	str	r3, [r2, #32]
 8002684:	4b28      	ldr	r3, [pc, #160]	; (8002728 <HAL_RCC_OscConfig+0x930>)
 8002686:	6a1b      	ldr	r3, [r3, #32]
 8002688:	4a27      	ldr	r2, [pc, #156]	; (8002728 <HAL_RCC_OscConfig+0x930>)
 800268a:	f043 0301 	orr.w	r3, r3, #1
 800268e:	6213      	str	r3, [r2, #32]
 8002690:	e00b      	b.n	80026aa <HAL_RCC_OscConfig+0x8b2>
 8002692:	4b25      	ldr	r3, [pc, #148]	; (8002728 <HAL_RCC_OscConfig+0x930>)
 8002694:	6a1b      	ldr	r3, [r3, #32]
 8002696:	4a24      	ldr	r2, [pc, #144]	; (8002728 <HAL_RCC_OscConfig+0x930>)
 8002698:	f023 0301 	bic.w	r3, r3, #1
 800269c:	6213      	str	r3, [r2, #32]
 800269e:	4b22      	ldr	r3, [pc, #136]	; (8002728 <HAL_RCC_OscConfig+0x930>)
 80026a0:	6a1b      	ldr	r3, [r3, #32]
 80026a2:	4a21      	ldr	r2, [pc, #132]	; (8002728 <HAL_RCC_OscConfig+0x930>)
 80026a4:	f023 0304 	bic.w	r3, r3, #4
 80026a8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80026aa:	1d3b      	adds	r3, r7, #4
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	68db      	ldr	r3, [r3, #12]
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d06b      	beq.n	800278c <HAL_RCC_OscConfig+0x994>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80026b4:	f7fe fa48 	bl	8000b48 <HAL_GetTick>
 80026b8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80026bc:	e00b      	b.n	80026d6 <HAL_RCC_OscConfig+0x8de>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80026be:	f7fe fa43 	bl	8000b48 <HAL_GetTick>
 80026c2:	4602      	mov	r2, r0
 80026c4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80026c8:	1ad3      	subs	r3, r2, r3
 80026ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80026ce:	4293      	cmp	r3, r2
 80026d0:	d901      	bls.n	80026d6 <HAL_RCC_OscConfig+0x8de>
        {
          return HAL_TIMEOUT;
 80026d2:	2303      	movs	r3, #3
 80026d4:	e291      	b.n	8002bfa <HAL_RCC_OscConfig+0xe02>
 80026d6:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 80026da:	2202      	movs	r2, #2
 80026dc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026de:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	fa93 f2a3 	rbit	r2, r3
 80026e8:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 80026ec:	601a      	str	r2, [r3, #0]
 80026ee:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 80026f2:	2202      	movs	r2, #2
 80026f4:	601a      	str	r2, [r3, #0]
 80026f6:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	fa93 f2a3 	rbit	r2, r3
 8002700:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8002704:	601a      	str	r2, [r3, #0]
  return result;
 8002706:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 800270a:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800270c:	fab3 f383 	clz	r3, r3
 8002710:	b2db      	uxtb	r3, r3
 8002712:	095b      	lsrs	r3, r3, #5
 8002714:	b2db      	uxtb	r3, r3
 8002716:	f043 0302 	orr.w	r3, r3, #2
 800271a:	b2db      	uxtb	r3, r3
 800271c:	2b02      	cmp	r3, #2
 800271e:	d109      	bne.n	8002734 <HAL_RCC_OscConfig+0x93c>
 8002720:	4b01      	ldr	r3, [pc, #4]	; (8002728 <HAL_RCC_OscConfig+0x930>)
 8002722:	6a1b      	ldr	r3, [r3, #32]
 8002724:	e014      	b.n	8002750 <HAL_RCC_OscConfig+0x958>
 8002726:	bf00      	nop
 8002728:	40021000 	.word	0x40021000
 800272c:	10908120 	.word	0x10908120
 8002730:	40007000 	.word	0x40007000
 8002734:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8002738:	2202      	movs	r2, #2
 800273a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800273c:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	fa93 f2a3 	rbit	r2, r3
 8002746:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800274a:	601a      	str	r2, [r3, #0]
 800274c:	4bbb      	ldr	r3, [pc, #748]	; (8002a3c <HAL_RCC_OscConfig+0xc44>)
 800274e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002750:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8002754:	2102      	movs	r1, #2
 8002756:	6011      	str	r1, [r2, #0]
 8002758:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 800275c:	6812      	ldr	r2, [r2, #0]
 800275e:	fa92 f1a2 	rbit	r1, r2
 8002762:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8002766:	6011      	str	r1, [r2, #0]
  return result;
 8002768:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 800276c:	6812      	ldr	r2, [r2, #0]
 800276e:	fab2 f282 	clz	r2, r2
 8002772:	b2d2      	uxtb	r2, r2
 8002774:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002778:	b2d2      	uxtb	r2, r2
 800277a:	f002 021f 	and.w	r2, r2, #31
 800277e:	2101      	movs	r1, #1
 8002780:	fa01 f202 	lsl.w	r2, r1, r2
 8002784:	4013      	ands	r3, r2
 8002786:	2b00      	cmp	r3, #0
 8002788:	d099      	beq.n	80026be <HAL_RCC_OscConfig+0x8c6>
 800278a:	e063      	b.n	8002854 <HAL_RCC_OscConfig+0xa5c>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800278c:	f7fe f9dc 	bl	8000b48 <HAL_GetTick>
 8002790:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002794:	e00b      	b.n	80027ae <HAL_RCC_OscConfig+0x9b6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002796:	f7fe f9d7 	bl	8000b48 <HAL_GetTick>
 800279a:	4602      	mov	r2, r0
 800279c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80027a0:	1ad3      	subs	r3, r2, r3
 80027a2:	f241 3288 	movw	r2, #5000	; 0x1388
 80027a6:	4293      	cmp	r3, r2
 80027a8:	d901      	bls.n	80027ae <HAL_RCC_OscConfig+0x9b6>
        {
          return HAL_TIMEOUT;
 80027aa:	2303      	movs	r3, #3
 80027ac:	e225      	b.n	8002bfa <HAL_RCC_OscConfig+0xe02>
 80027ae:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80027b2:	2202      	movs	r2, #2
 80027b4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027b6:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	fa93 f2a3 	rbit	r2, r3
 80027c0:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80027c4:	601a      	str	r2, [r3, #0]
 80027c6:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80027ca:	2202      	movs	r2, #2
 80027cc:	601a      	str	r2, [r3, #0]
 80027ce:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	fa93 f2a3 	rbit	r2, r3
 80027d8:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80027dc:	601a      	str	r2, [r3, #0]
  return result;
 80027de:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80027e2:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80027e4:	fab3 f383 	clz	r3, r3
 80027e8:	b2db      	uxtb	r3, r3
 80027ea:	095b      	lsrs	r3, r3, #5
 80027ec:	b2db      	uxtb	r3, r3
 80027ee:	f043 0302 	orr.w	r3, r3, #2
 80027f2:	b2db      	uxtb	r3, r3
 80027f4:	2b02      	cmp	r3, #2
 80027f6:	d102      	bne.n	80027fe <HAL_RCC_OscConfig+0xa06>
 80027f8:	4b90      	ldr	r3, [pc, #576]	; (8002a3c <HAL_RCC_OscConfig+0xc44>)
 80027fa:	6a1b      	ldr	r3, [r3, #32]
 80027fc:	e00d      	b.n	800281a <HAL_RCC_OscConfig+0xa22>
 80027fe:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8002802:	2202      	movs	r2, #2
 8002804:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002806:	f107 0390 	add.w	r3, r7, #144	; 0x90
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	fa93 f2a3 	rbit	r2, r3
 8002810:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8002814:	601a      	str	r2, [r3, #0]
 8002816:	4b89      	ldr	r3, [pc, #548]	; (8002a3c <HAL_RCC_OscConfig+0xc44>)
 8002818:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800281a:	f107 0288 	add.w	r2, r7, #136	; 0x88
 800281e:	2102      	movs	r1, #2
 8002820:	6011      	str	r1, [r2, #0]
 8002822:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8002826:	6812      	ldr	r2, [r2, #0]
 8002828:	fa92 f1a2 	rbit	r1, r2
 800282c:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8002830:	6011      	str	r1, [r2, #0]
  return result;
 8002832:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8002836:	6812      	ldr	r2, [r2, #0]
 8002838:	fab2 f282 	clz	r2, r2
 800283c:	b2d2      	uxtb	r2, r2
 800283e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002842:	b2d2      	uxtb	r2, r2
 8002844:	f002 021f 	and.w	r2, r2, #31
 8002848:	2101      	movs	r1, #1
 800284a:	fa01 f202 	lsl.w	r2, r1, r2
 800284e:	4013      	ands	r3, r2
 8002850:	2b00      	cmp	r3, #0
 8002852:	d1a0      	bne.n	8002796 <HAL_RCC_OscConfig+0x99e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002854:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8002858:	2b01      	cmp	r3, #1
 800285a:	d105      	bne.n	8002868 <HAL_RCC_OscConfig+0xa70>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800285c:	4b77      	ldr	r3, [pc, #476]	; (8002a3c <HAL_RCC_OscConfig+0xc44>)
 800285e:	69db      	ldr	r3, [r3, #28]
 8002860:	4a76      	ldr	r2, [pc, #472]	; (8002a3c <HAL_RCC_OscConfig+0xc44>)
 8002862:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002866:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002868:	1d3b      	adds	r3, r7, #4
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	69db      	ldr	r3, [r3, #28]
 800286e:	2b00      	cmp	r3, #0
 8002870:	f000 81c2 	beq.w	8002bf8 <HAL_RCC_OscConfig+0xe00>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002874:	4b71      	ldr	r3, [pc, #452]	; (8002a3c <HAL_RCC_OscConfig+0xc44>)
 8002876:	685b      	ldr	r3, [r3, #4]
 8002878:	f003 030c 	and.w	r3, r3, #12
 800287c:	2b08      	cmp	r3, #8
 800287e:	f000 819c 	beq.w	8002bba <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002882:	1d3b      	adds	r3, r7, #4
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	69db      	ldr	r3, [r3, #28]
 8002888:	2b02      	cmp	r3, #2
 800288a:	f040 8114 	bne.w	8002ab6 <HAL_RCC_OscConfig+0xcbe>
 800288e:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8002892:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002896:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002898:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	fa93 f2a3 	rbit	r2, r3
 80028a2:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80028a6:	601a      	str	r2, [r3, #0]
  return result;
 80028a8:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80028ac:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80028ae:	fab3 f383 	clz	r3, r3
 80028b2:	b2db      	uxtb	r3, r3
 80028b4:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80028b8:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80028bc:	009b      	lsls	r3, r3, #2
 80028be:	461a      	mov	r2, r3
 80028c0:	2300      	movs	r3, #0
 80028c2:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028c4:	f7fe f940 	bl	8000b48 <HAL_GetTick>
 80028c8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80028cc:	e009      	b.n	80028e2 <HAL_RCC_OscConfig+0xaea>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80028ce:	f7fe f93b 	bl	8000b48 <HAL_GetTick>
 80028d2:	4602      	mov	r2, r0
 80028d4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80028d8:	1ad3      	subs	r3, r2, r3
 80028da:	2b02      	cmp	r3, #2
 80028dc:	d901      	bls.n	80028e2 <HAL_RCC_OscConfig+0xaea>
          {
            return HAL_TIMEOUT;
 80028de:	2303      	movs	r3, #3
 80028e0:	e18b      	b.n	8002bfa <HAL_RCC_OscConfig+0xe02>
 80028e2:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80028e6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80028ea:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028ec:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	fa93 f2a3 	rbit	r2, r3
 80028f6:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80028fa:	601a      	str	r2, [r3, #0]
  return result;
 80028fc:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8002900:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002902:	fab3 f383 	clz	r3, r3
 8002906:	b2db      	uxtb	r3, r3
 8002908:	095b      	lsrs	r3, r3, #5
 800290a:	b2db      	uxtb	r3, r3
 800290c:	f043 0301 	orr.w	r3, r3, #1
 8002910:	b2db      	uxtb	r3, r3
 8002912:	2b01      	cmp	r3, #1
 8002914:	d102      	bne.n	800291c <HAL_RCC_OscConfig+0xb24>
 8002916:	4b49      	ldr	r3, [pc, #292]	; (8002a3c <HAL_RCC_OscConfig+0xc44>)
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	e01b      	b.n	8002954 <HAL_RCC_OscConfig+0xb5c>
 800291c:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8002920:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002924:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002926:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	fa93 f2a3 	rbit	r2, r3
 8002930:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8002934:	601a      	str	r2, [r3, #0]
 8002936:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800293a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800293e:	601a      	str	r2, [r3, #0]
 8002940:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	fa93 f2a3 	rbit	r2, r3
 800294a:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800294e:	601a      	str	r2, [r3, #0]
 8002950:	4b3a      	ldr	r3, [pc, #232]	; (8002a3c <HAL_RCC_OscConfig+0xc44>)
 8002952:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002954:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8002958:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800295c:	6011      	str	r1, [r2, #0]
 800295e:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8002962:	6812      	ldr	r2, [r2, #0]
 8002964:	fa92 f1a2 	rbit	r1, r2
 8002968:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 800296c:	6011      	str	r1, [r2, #0]
  return result;
 800296e:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8002972:	6812      	ldr	r2, [r2, #0]
 8002974:	fab2 f282 	clz	r2, r2
 8002978:	b2d2      	uxtb	r2, r2
 800297a:	f042 0220 	orr.w	r2, r2, #32
 800297e:	b2d2      	uxtb	r2, r2
 8002980:	f002 021f 	and.w	r2, r2, #31
 8002984:	2101      	movs	r1, #1
 8002986:	fa01 f202 	lsl.w	r2, r1, r2
 800298a:	4013      	ands	r3, r2
 800298c:	2b00      	cmp	r3, #0
 800298e:	d19e      	bne.n	80028ce <HAL_RCC_OscConfig+0xad6>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002990:	4b2a      	ldr	r3, [pc, #168]	; (8002a3c <HAL_RCC_OscConfig+0xc44>)
 8002992:	685b      	ldr	r3, [r3, #4]
 8002994:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002998:	1d3b      	adds	r3, r7, #4
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800299e:	1d3b      	adds	r3, r7, #4
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	6a1b      	ldr	r3, [r3, #32]
 80029a4:	430b      	orrs	r3, r1
 80029a6:	4925      	ldr	r1, [pc, #148]	; (8002a3c <HAL_RCC_OscConfig+0xc44>)
 80029a8:	4313      	orrs	r3, r2
 80029aa:	604b      	str	r3, [r1, #4]
 80029ac:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80029b0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80029b4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029b6:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	fa93 f2a3 	rbit	r2, r3
 80029c0:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80029c4:	601a      	str	r2, [r3, #0]
  return result;
 80029c6:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80029ca:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80029cc:	fab3 f383 	clz	r3, r3
 80029d0:	b2db      	uxtb	r3, r3
 80029d2:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80029d6:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80029da:	009b      	lsls	r3, r3, #2
 80029dc:	461a      	mov	r2, r3
 80029de:	2301      	movs	r3, #1
 80029e0:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029e2:	f7fe f8b1 	bl	8000b48 <HAL_GetTick>
 80029e6:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80029ea:	e009      	b.n	8002a00 <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80029ec:	f7fe f8ac 	bl	8000b48 <HAL_GetTick>
 80029f0:	4602      	mov	r2, r0
 80029f2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80029f6:	1ad3      	subs	r3, r2, r3
 80029f8:	2b02      	cmp	r3, #2
 80029fa:	d901      	bls.n	8002a00 <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 80029fc:	2303      	movs	r3, #3
 80029fe:	e0fc      	b.n	8002bfa <HAL_RCC_OscConfig+0xe02>
 8002a00:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8002a04:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002a08:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a0a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	fa93 f2a3 	rbit	r2, r3
 8002a14:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002a18:	601a      	str	r2, [r3, #0]
  return result;
 8002a1a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002a1e:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002a20:	fab3 f383 	clz	r3, r3
 8002a24:	b2db      	uxtb	r3, r3
 8002a26:	095b      	lsrs	r3, r3, #5
 8002a28:	b2db      	uxtb	r3, r3
 8002a2a:	f043 0301 	orr.w	r3, r3, #1
 8002a2e:	b2db      	uxtb	r3, r3
 8002a30:	2b01      	cmp	r3, #1
 8002a32:	d105      	bne.n	8002a40 <HAL_RCC_OscConfig+0xc48>
 8002a34:	4b01      	ldr	r3, [pc, #4]	; (8002a3c <HAL_RCC_OscConfig+0xc44>)
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	e01e      	b.n	8002a78 <HAL_RCC_OscConfig+0xc80>
 8002a3a:	bf00      	nop
 8002a3c:	40021000 	.word	0x40021000
 8002a40:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002a44:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002a48:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a4a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	fa93 f2a3 	rbit	r2, r3
 8002a54:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8002a58:	601a      	str	r2, [r3, #0]
 8002a5a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002a5e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002a62:	601a      	str	r2, [r3, #0]
 8002a64:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	fa93 f2a3 	rbit	r2, r3
 8002a6e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002a72:	601a      	str	r2, [r3, #0]
 8002a74:	4b63      	ldr	r3, [pc, #396]	; (8002c04 <HAL_RCC_OscConfig+0xe0c>)
 8002a76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a78:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8002a7c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002a80:	6011      	str	r1, [r2, #0]
 8002a82:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8002a86:	6812      	ldr	r2, [r2, #0]
 8002a88:	fa92 f1a2 	rbit	r1, r2
 8002a8c:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8002a90:	6011      	str	r1, [r2, #0]
  return result;
 8002a92:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8002a96:	6812      	ldr	r2, [r2, #0]
 8002a98:	fab2 f282 	clz	r2, r2
 8002a9c:	b2d2      	uxtb	r2, r2
 8002a9e:	f042 0220 	orr.w	r2, r2, #32
 8002aa2:	b2d2      	uxtb	r2, r2
 8002aa4:	f002 021f 	and.w	r2, r2, #31
 8002aa8:	2101      	movs	r1, #1
 8002aaa:	fa01 f202 	lsl.w	r2, r1, r2
 8002aae:	4013      	ands	r3, r2
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d09b      	beq.n	80029ec <HAL_RCC_OscConfig+0xbf4>
 8002ab4:	e0a0      	b.n	8002bf8 <HAL_RCC_OscConfig+0xe00>
 8002ab6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002aba:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002abe:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ac0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	fa93 f2a3 	rbit	r2, r3
 8002aca:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002ace:	601a      	str	r2, [r3, #0]
  return result;
 8002ad0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002ad4:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ad6:	fab3 f383 	clz	r3, r3
 8002ada:	b2db      	uxtb	r3, r3
 8002adc:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002ae0:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002ae4:	009b      	lsls	r3, r3, #2
 8002ae6:	461a      	mov	r2, r3
 8002ae8:	2300      	movs	r3, #0
 8002aea:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002aec:	f7fe f82c 	bl	8000b48 <HAL_GetTick>
 8002af0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002af4:	e009      	b.n	8002b0a <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002af6:	f7fe f827 	bl	8000b48 <HAL_GetTick>
 8002afa:	4602      	mov	r2, r0
 8002afc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002b00:	1ad3      	subs	r3, r2, r3
 8002b02:	2b02      	cmp	r3, #2
 8002b04:	d901      	bls.n	8002b0a <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 8002b06:	2303      	movs	r3, #3
 8002b08:	e077      	b.n	8002bfa <HAL_RCC_OscConfig+0xe02>
 8002b0a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002b0e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002b12:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b14:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	fa93 f2a3 	rbit	r2, r3
 8002b1e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002b22:	601a      	str	r2, [r3, #0]
  return result;
 8002b24:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002b28:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002b2a:	fab3 f383 	clz	r3, r3
 8002b2e:	b2db      	uxtb	r3, r3
 8002b30:	095b      	lsrs	r3, r3, #5
 8002b32:	b2db      	uxtb	r3, r3
 8002b34:	f043 0301 	orr.w	r3, r3, #1
 8002b38:	b2db      	uxtb	r3, r3
 8002b3a:	2b01      	cmp	r3, #1
 8002b3c:	d102      	bne.n	8002b44 <HAL_RCC_OscConfig+0xd4c>
 8002b3e:	4b31      	ldr	r3, [pc, #196]	; (8002c04 <HAL_RCC_OscConfig+0xe0c>)
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	e01b      	b.n	8002b7c <HAL_RCC_OscConfig+0xd84>
 8002b44:	f107 0320 	add.w	r3, r7, #32
 8002b48:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002b4c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b4e:	f107 0320 	add.w	r3, r7, #32
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	fa93 f2a3 	rbit	r2, r3
 8002b58:	f107 031c 	add.w	r3, r7, #28
 8002b5c:	601a      	str	r2, [r3, #0]
 8002b5e:	f107 0318 	add.w	r3, r7, #24
 8002b62:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002b66:	601a      	str	r2, [r3, #0]
 8002b68:	f107 0318 	add.w	r3, r7, #24
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	fa93 f2a3 	rbit	r2, r3
 8002b72:	f107 0314 	add.w	r3, r7, #20
 8002b76:	601a      	str	r2, [r3, #0]
 8002b78:	4b22      	ldr	r3, [pc, #136]	; (8002c04 <HAL_RCC_OscConfig+0xe0c>)
 8002b7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b7c:	f107 0210 	add.w	r2, r7, #16
 8002b80:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002b84:	6011      	str	r1, [r2, #0]
 8002b86:	f107 0210 	add.w	r2, r7, #16
 8002b8a:	6812      	ldr	r2, [r2, #0]
 8002b8c:	fa92 f1a2 	rbit	r1, r2
 8002b90:	f107 020c 	add.w	r2, r7, #12
 8002b94:	6011      	str	r1, [r2, #0]
  return result;
 8002b96:	f107 020c 	add.w	r2, r7, #12
 8002b9a:	6812      	ldr	r2, [r2, #0]
 8002b9c:	fab2 f282 	clz	r2, r2
 8002ba0:	b2d2      	uxtb	r2, r2
 8002ba2:	f042 0220 	orr.w	r2, r2, #32
 8002ba6:	b2d2      	uxtb	r2, r2
 8002ba8:	f002 021f 	and.w	r2, r2, #31
 8002bac:	2101      	movs	r1, #1
 8002bae:	fa01 f202 	lsl.w	r2, r1, r2
 8002bb2:	4013      	ands	r3, r2
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d19e      	bne.n	8002af6 <HAL_RCC_OscConfig+0xcfe>
 8002bb8:	e01e      	b.n	8002bf8 <HAL_RCC_OscConfig+0xe00>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002bba:	1d3b      	adds	r3, r7, #4
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	69db      	ldr	r3, [r3, #28]
 8002bc0:	2b01      	cmp	r3, #1
 8002bc2:	d101      	bne.n	8002bc8 <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 8002bc4:	2301      	movs	r3, #1
 8002bc6:	e018      	b.n	8002bfa <HAL_RCC_OscConfig+0xe02>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002bc8:	4b0e      	ldr	r3, [pc, #56]	; (8002c04 <HAL_RCC_OscConfig+0xe0c>)
 8002bca:	685b      	ldr	r3, [r3, #4]
 8002bcc:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002bd0:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8002bd4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002bd8:	1d3b      	adds	r3, r7, #4
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	6a1b      	ldr	r3, [r3, #32]
 8002bde:	429a      	cmp	r2, r3
 8002be0:	d108      	bne.n	8002bf4 <HAL_RCC_OscConfig+0xdfc>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8002be2:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8002be6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002bea:	1d3b      	adds	r3, r7, #4
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002bf0:	429a      	cmp	r2, r3
 8002bf2:	d001      	beq.n	8002bf8 <HAL_RCC_OscConfig+0xe00>
#endif
        {
          return HAL_ERROR;
 8002bf4:	2301      	movs	r3, #1
 8002bf6:	e000      	b.n	8002bfa <HAL_RCC_OscConfig+0xe02>
        }
      }
    }
  }

  return HAL_OK;
 8002bf8:	2300      	movs	r3, #0
}
 8002bfa:	4618      	mov	r0, r3
 8002bfc:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8002c00:	46bd      	mov	sp, r7
 8002c02:	bd80      	pop	{r7, pc}
 8002c04:	40021000 	.word	0x40021000

08002c08 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002c08:	b580      	push	{r7, lr}
 8002c0a:	b09e      	sub	sp, #120	; 0x78
 8002c0c:	af00      	add	r7, sp, #0
 8002c0e:	6078      	str	r0, [r7, #4]
 8002c10:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002c12:	2300      	movs	r3, #0
 8002c14:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d101      	bne.n	8002c20 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002c1c:	2301      	movs	r3, #1
 8002c1e:	e162      	b.n	8002ee6 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002c20:	4b90      	ldr	r3, [pc, #576]	; (8002e64 <HAL_RCC_ClockConfig+0x25c>)
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	f003 0307 	and.w	r3, r3, #7
 8002c28:	683a      	ldr	r2, [r7, #0]
 8002c2a:	429a      	cmp	r2, r3
 8002c2c:	d910      	bls.n	8002c50 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c2e:	4b8d      	ldr	r3, [pc, #564]	; (8002e64 <HAL_RCC_ClockConfig+0x25c>)
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	f023 0207 	bic.w	r2, r3, #7
 8002c36:	498b      	ldr	r1, [pc, #556]	; (8002e64 <HAL_RCC_ClockConfig+0x25c>)
 8002c38:	683b      	ldr	r3, [r7, #0]
 8002c3a:	4313      	orrs	r3, r2
 8002c3c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c3e:	4b89      	ldr	r3, [pc, #548]	; (8002e64 <HAL_RCC_ClockConfig+0x25c>)
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	f003 0307 	and.w	r3, r3, #7
 8002c46:	683a      	ldr	r2, [r7, #0]
 8002c48:	429a      	cmp	r2, r3
 8002c4a:	d001      	beq.n	8002c50 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002c4c:	2301      	movs	r3, #1
 8002c4e:	e14a      	b.n	8002ee6 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	f003 0302 	and.w	r3, r3, #2
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d008      	beq.n	8002c6e <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002c5c:	4b82      	ldr	r3, [pc, #520]	; (8002e68 <HAL_RCC_ClockConfig+0x260>)
 8002c5e:	685b      	ldr	r3, [r3, #4]
 8002c60:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	689b      	ldr	r3, [r3, #8]
 8002c68:	497f      	ldr	r1, [pc, #508]	; (8002e68 <HAL_RCC_ClockConfig+0x260>)
 8002c6a:	4313      	orrs	r3, r2
 8002c6c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	f003 0301 	and.w	r3, r3, #1
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	f000 80dc 	beq.w	8002e34 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	685b      	ldr	r3, [r3, #4]
 8002c80:	2b01      	cmp	r3, #1
 8002c82:	d13c      	bne.n	8002cfe <HAL_RCC_ClockConfig+0xf6>
 8002c84:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002c88:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c8a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002c8c:	fa93 f3a3 	rbit	r3, r3
 8002c90:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8002c92:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c94:	fab3 f383 	clz	r3, r3
 8002c98:	b2db      	uxtb	r3, r3
 8002c9a:	095b      	lsrs	r3, r3, #5
 8002c9c:	b2db      	uxtb	r3, r3
 8002c9e:	f043 0301 	orr.w	r3, r3, #1
 8002ca2:	b2db      	uxtb	r3, r3
 8002ca4:	2b01      	cmp	r3, #1
 8002ca6:	d102      	bne.n	8002cae <HAL_RCC_ClockConfig+0xa6>
 8002ca8:	4b6f      	ldr	r3, [pc, #444]	; (8002e68 <HAL_RCC_ClockConfig+0x260>)
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	e00f      	b.n	8002cce <HAL_RCC_ClockConfig+0xc6>
 8002cae:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002cb2:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cb4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002cb6:	fa93 f3a3 	rbit	r3, r3
 8002cba:	667b      	str	r3, [r7, #100]	; 0x64
 8002cbc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002cc0:	663b      	str	r3, [r7, #96]	; 0x60
 8002cc2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002cc4:	fa93 f3a3 	rbit	r3, r3
 8002cc8:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002cca:	4b67      	ldr	r3, [pc, #412]	; (8002e68 <HAL_RCC_ClockConfig+0x260>)
 8002ccc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cce:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002cd2:	65ba      	str	r2, [r7, #88]	; 0x58
 8002cd4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002cd6:	fa92 f2a2 	rbit	r2, r2
 8002cda:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8002cdc:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002cde:	fab2 f282 	clz	r2, r2
 8002ce2:	b2d2      	uxtb	r2, r2
 8002ce4:	f042 0220 	orr.w	r2, r2, #32
 8002ce8:	b2d2      	uxtb	r2, r2
 8002cea:	f002 021f 	and.w	r2, r2, #31
 8002cee:	2101      	movs	r1, #1
 8002cf0:	fa01 f202 	lsl.w	r2, r1, r2
 8002cf4:	4013      	ands	r3, r2
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d17b      	bne.n	8002df2 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002cfa:	2301      	movs	r3, #1
 8002cfc:	e0f3      	b.n	8002ee6 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	685b      	ldr	r3, [r3, #4]
 8002d02:	2b02      	cmp	r3, #2
 8002d04:	d13c      	bne.n	8002d80 <HAL_RCC_ClockConfig+0x178>
 8002d06:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002d0a:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d0c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002d0e:	fa93 f3a3 	rbit	r3, r3
 8002d12:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8002d14:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002d16:	fab3 f383 	clz	r3, r3
 8002d1a:	b2db      	uxtb	r3, r3
 8002d1c:	095b      	lsrs	r3, r3, #5
 8002d1e:	b2db      	uxtb	r3, r3
 8002d20:	f043 0301 	orr.w	r3, r3, #1
 8002d24:	b2db      	uxtb	r3, r3
 8002d26:	2b01      	cmp	r3, #1
 8002d28:	d102      	bne.n	8002d30 <HAL_RCC_ClockConfig+0x128>
 8002d2a:	4b4f      	ldr	r3, [pc, #316]	; (8002e68 <HAL_RCC_ClockConfig+0x260>)
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	e00f      	b.n	8002d50 <HAL_RCC_ClockConfig+0x148>
 8002d30:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002d34:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d36:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002d38:	fa93 f3a3 	rbit	r3, r3
 8002d3c:	647b      	str	r3, [r7, #68]	; 0x44
 8002d3e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002d42:	643b      	str	r3, [r7, #64]	; 0x40
 8002d44:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002d46:	fa93 f3a3 	rbit	r3, r3
 8002d4a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002d4c:	4b46      	ldr	r3, [pc, #280]	; (8002e68 <HAL_RCC_ClockConfig+0x260>)
 8002d4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d50:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002d54:	63ba      	str	r2, [r7, #56]	; 0x38
 8002d56:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002d58:	fa92 f2a2 	rbit	r2, r2
 8002d5c:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8002d5e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002d60:	fab2 f282 	clz	r2, r2
 8002d64:	b2d2      	uxtb	r2, r2
 8002d66:	f042 0220 	orr.w	r2, r2, #32
 8002d6a:	b2d2      	uxtb	r2, r2
 8002d6c:	f002 021f 	and.w	r2, r2, #31
 8002d70:	2101      	movs	r1, #1
 8002d72:	fa01 f202 	lsl.w	r2, r1, r2
 8002d76:	4013      	ands	r3, r2
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d13a      	bne.n	8002df2 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002d7c:	2301      	movs	r3, #1
 8002d7e:	e0b2      	b.n	8002ee6 <HAL_RCC_ClockConfig+0x2de>
 8002d80:	2302      	movs	r3, #2
 8002d82:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d86:	fa93 f3a3 	rbit	r3, r3
 8002d8a:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8002d8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d8e:	fab3 f383 	clz	r3, r3
 8002d92:	b2db      	uxtb	r3, r3
 8002d94:	095b      	lsrs	r3, r3, #5
 8002d96:	b2db      	uxtb	r3, r3
 8002d98:	f043 0301 	orr.w	r3, r3, #1
 8002d9c:	b2db      	uxtb	r3, r3
 8002d9e:	2b01      	cmp	r3, #1
 8002da0:	d102      	bne.n	8002da8 <HAL_RCC_ClockConfig+0x1a0>
 8002da2:	4b31      	ldr	r3, [pc, #196]	; (8002e68 <HAL_RCC_ClockConfig+0x260>)
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	e00d      	b.n	8002dc4 <HAL_RCC_ClockConfig+0x1bc>
 8002da8:	2302      	movs	r3, #2
 8002daa:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002dac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002dae:	fa93 f3a3 	rbit	r3, r3
 8002db2:	627b      	str	r3, [r7, #36]	; 0x24
 8002db4:	2302      	movs	r3, #2
 8002db6:	623b      	str	r3, [r7, #32]
 8002db8:	6a3b      	ldr	r3, [r7, #32]
 8002dba:	fa93 f3a3 	rbit	r3, r3
 8002dbe:	61fb      	str	r3, [r7, #28]
 8002dc0:	4b29      	ldr	r3, [pc, #164]	; (8002e68 <HAL_RCC_ClockConfig+0x260>)
 8002dc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dc4:	2202      	movs	r2, #2
 8002dc6:	61ba      	str	r2, [r7, #24]
 8002dc8:	69ba      	ldr	r2, [r7, #24]
 8002dca:	fa92 f2a2 	rbit	r2, r2
 8002dce:	617a      	str	r2, [r7, #20]
  return result;
 8002dd0:	697a      	ldr	r2, [r7, #20]
 8002dd2:	fab2 f282 	clz	r2, r2
 8002dd6:	b2d2      	uxtb	r2, r2
 8002dd8:	f042 0220 	orr.w	r2, r2, #32
 8002ddc:	b2d2      	uxtb	r2, r2
 8002dde:	f002 021f 	and.w	r2, r2, #31
 8002de2:	2101      	movs	r1, #1
 8002de4:	fa01 f202 	lsl.w	r2, r1, r2
 8002de8:	4013      	ands	r3, r2
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d101      	bne.n	8002df2 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002dee:	2301      	movs	r3, #1
 8002df0:	e079      	b.n	8002ee6 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002df2:	4b1d      	ldr	r3, [pc, #116]	; (8002e68 <HAL_RCC_ClockConfig+0x260>)
 8002df4:	685b      	ldr	r3, [r3, #4]
 8002df6:	f023 0203 	bic.w	r2, r3, #3
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	685b      	ldr	r3, [r3, #4]
 8002dfe:	491a      	ldr	r1, [pc, #104]	; (8002e68 <HAL_RCC_ClockConfig+0x260>)
 8002e00:	4313      	orrs	r3, r2
 8002e02:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002e04:	f7fd fea0 	bl	8000b48 <HAL_GetTick>
 8002e08:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e0a:	e00a      	b.n	8002e22 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002e0c:	f7fd fe9c 	bl	8000b48 <HAL_GetTick>
 8002e10:	4602      	mov	r2, r0
 8002e12:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002e14:	1ad3      	subs	r3, r2, r3
 8002e16:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e1a:	4293      	cmp	r3, r2
 8002e1c:	d901      	bls.n	8002e22 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8002e1e:	2303      	movs	r3, #3
 8002e20:	e061      	b.n	8002ee6 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e22:	4b11      	ldr	r3, [pc, #68]	; (8002e68 <HAL_RCC_ClockConfig+0x260>)
 8002e24:	685b      	ldr	r3, [r3, #4]
 8002e26:	f003 020c 	and.w	r2, r3, #12
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	685b      	ldr	r3, [r3, #4]
 8002e2e:	009b      	lsls	r3, r3, #2
 8002e30:	429a      	cmp	r2, r3
 8002e32:	d1eb      	bne.n	8002e0c <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002e34:	4b0b      	ldr	r3, [pc, #44]	; (8002e64 <HAL_RCC_ClockConfig+0x25c>)
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	f003 0307 	and.w	r3, r3, #7
 8002e3c:	683a      	ldr	r2, [r7, #0]
 8002e3e:	429a      	cmp	r2, r3
 8002e40:	d214      	bcs.n	8002e6c <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e42:	4b08      	ldr	r3, [pc, #32]	; (8002e64 <HAL_RCC_ClockConfig+0x25c>)
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	f023 0207 	bic.w	r2, r3, #7
 8002e4a:	4906      	ldr	r1, [pc, #24]	; (8002e64 <HAL_RCC_ClockConfig+0x25c>)
 8002e4c:	683b      	ldr	r3, [r7, #0]
 8002e4e:	4313      	orrs	r3, r2
 8002e50:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e52:	4b04      	ldr	r3, [pc, #16]	; (8002e64 <HAL_RCC_ClockConfig+0x25c>)
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	f003 0307 	and.w	r3, r3, #7
 8002e5a:	683a      	ldr	r2, [r7, #0]
 8002e5c:	429a      	cmp	r2, r3
 8002e5e:	d005      	beq.n	8002e6c <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8002e60:	2301      	movs	r3, #1
 8002e62:	e040      	b.n	8002ee6 <HAL_RCC_ClockConfig+0x2de>
 8002e64:	40022000 	.word	0x40022000
 8002e68:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	f003 0304 	and.w	r3, r3, #4
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d008      	beq.n	8002e8a <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002e78:	4b1d      	ldr	r3, [pc, #116]	; (8002ef0 <HAL_RCC_ClockConfig+0x2e8>)
 8002e7a:	685b      	ldr	r3, [r3, #4]
 8002e7c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	68db      	ldr	r3, [r3, #12]
 8002e84:	491a      	ldr	r1, [pc, #104]	; (8002ef0 <HAL_RCC_ClockConfig+0x2e8>)
 8002e86:	4313      	orrs	r3, r2
 8002e88:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	f003 0308 	and.w	r3, r3, #8
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d009      	beq.n	8002eaa <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002e96:	4b16      	ldr	r3, [pc, #88]	; (8002ef0 <HAL_RCC_ClockConfig+0x2e8>)
 8002e98:	685b      	ldr	r3, [r3, #4]
 8002e9a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	691b      	ldr	r3, [r3, #16]
 8002ea2:	00db      	lsls	r3, r3, #3
 8002ea4:	4912      	ldr	r1, [pc, #72]	; (8002ef0 <HAL_RCC_ClockConfig+0x2e8>)
 8002ea6:	4313      	orrs	r3, r2
 8002ea8:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002eaa:	f000 f85d 	bl	8002f68 <HAL_RCC_GetSysClockFreq>
 8002eae:	4601      	mov	r1, r0
 8002eb0:	4b0f      	ldr	r3, [pc, #60]	; (8002ef0 <HAL_RCC_ClockConfig+0x2e8>)
 8002eb2:	685b      	ldr	r3, [r3, #4]
 8002eb4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002eb8:	22f0      	movs	r2, #240	; 0xf0
 8002eba:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ebc:	693a      	ldr	r2, [r7, #16]
 8002ebe:	fa92 f2a2 	rbit	r2, r2
 8002ec2:	60fa      	str	r2, [r7, #12]
  return result;
 8002ec4:	68fa      	ldr	r2, [r7, #12]
 8002ec6:	fab2 f282 	clz	r2, r2
 8002eca:	b2d2      	uxtb	r2, r2
 8002ecc:	40d3      	lsrs	r3, r2
 8002ece:	4a09      	ldr	r2, [pc, #36]	; (8002ef4 <HAL_RCC_ClockConfig+0x2ec>)
 8002ed0:	5cd3      	ldrb	r3, [r2, r3]
 8002ed2:	fa21 f303 	lsr.w	r3, r1, r3
 8002ed6:	4a08      	ldr	r2, [pc, #32]	; (8002ef8 <HAL_RCC_ClockConfig+0x2f0>)
 8002ed8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8002eda:	4b08      	ldr	r3, [pc, #32]	; (8002efc <HAL_RCC_ClockConfig+0x2f4>)
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	4618      	mov	r0, r3
 8002ee0:	f7fd fdee 	bl	8000ac0 <HAL_InitTick>
  
  return HAL_OK;
 8002ee4:	2300      	movs	r3, #0
}
 8002ee6:	4618      	mov	r0, r3
 8002ee8:	3778      	adds	r7, #120	; 0x78
 8002eea:	46bd      	mov	sp, r7
 8002eec:	bd80      	pop	{r7, pc}
 8002eee:	bf00      	nop
 8002ef0:	40021000 	.word	0x40021000
 8002ef4:	08004510 	.word	0x08004510
 8002ef8:	20000000 	.word	0x20000000
 8002efc:	20000004 	.word	0x20000004

08002f00 <HAL_RCC_MCOConfig>:
  *            @arg @ref RCC_MCODIV_1 no division applied to MCO clock
  * @retval None
  */
#endif
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 8002f00:	b580      	push	{r7, lr}
 8002f02:	b08a      	sub	sp, #40	; 0x28
 8002f04:	af00      	add	r7, sp, #0
 8002f06:	60f8      	str	r0, [r7, #12]
 8002f08:	60b9      	str	r1, [r7, #8]
 8002f0a:	607a      	str	r2, [r7, #4]
  assert_param(IS_RCC_MCO(RCC_MCOx));
  assert_param(IS_RCC_MCODIV(RCC_MCODiv));
  assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));
  
  /* Configure the MCO1 pin in alternate function mode */
  gpio.Mode      = GPIO_MODE_AF_PP;
 8002f0c:	2302      	movs	r3, #2
 8002f0e:	61bb      	str	r3, [r7, #24]
  gpio.Speed     = GPIO_SPEED_FREQ_HIGH;
 8002f10:	2303      	movs	r3, #3
 8002f12:	623b      	str	r3, [r7, #32]
  gpio.Pull      = GPIO_NOPULL;
 8002f14:	2300      	movs	r3, #0
 8002f16:	61fb      	str	r3, [r7, #28]
  gpio.Pin       = MCO1_PIN;
 8002f18:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002f1c:	617b      	str	r3, [r7, #20]
  gpio.Alternate = GPIO_AF0_MCO;
 8002f1e:	2300      	movs	r3, #0
 8002f20:	627b      	str	r3, [r7, #36]	; 0x24

  /* MCO1 Clock Enable */
  MCO1_CLK_ENABLE();
 8002f22:	4b10      	ldr	r3, [pc, #64]	; (8002f64 <HAL_RCC_MCOConfig+0x64>)
 8002f24:	695b      	ldr	r3, [r3, #20]
 8002f26:	4a0f      	ldr	r2, [pc, #60]	; (8002f64 <HAL_RCC_MCOConfig+0x64>)
 8002f28:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002f2c:	6153      	str	r3, [r2, #20]
 8002f2e:	4b0d      	ldr	r3, [pc, #52]	; (8002f64 <HAL_RCC_MCOConfig+0x64>)
 8002f30:	695b      	ldr	r3, [r3, #20]
 8002f32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f36:	613b      	str	r3, [r7, #16]
 8002f38:	693b      	ldr	r3, [r7, #16]
  
  HAL_GPIO_Init(MCO1_GPIO_PORT, &gpio);
 8002f3a:	f107 0314 	add.w	r3, r7, #20
 8002f3e:	4619      	mov	r1, r3
 8002f40:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002f44:	f7fe fd22 	bl	800198c <HAL_GPIO_Init>
  
  /* Configure the MCO clock source */
  __HAL_RCC_MCO1_CONFIG(RCC_MCOSource, RCC_MCODiv);
 8002f48:	4b06      	ldr	r3, [pc, #24]	; (8002f64 <HAL_RCC_MCOConfig+0x64>)
 8002f4a:	685b      	ldr	r3, [r3, #4]
 8002f4c:	f023 42ee 	bic.w	r2, r3, #1996488704	; 0x77000000
 8002f50:	68b9      	ldr	r1, [r7, #8]
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	430b      	orrs	r3, r1
 8002f56:	4903      	ldr	r1, [pc, #12]	; (8002f64 <HAL_RCC_MCOConfig+0x64>)
 8002f58:	4313      	orrs	r3, r2
 8002f5a:	604b      	str	r3, [r1, #4]
}
 8002f5c:	bf00      	nop
 8002f5e:	3728      	adds	r7, #40	; 0x28
 8002f60:	46bd      	mov	sp, r7
 8002f62:	bd80      	pop	{r7, pc}
 8002f64:	40021000 	.word	0x40021000

08002f68 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002f68:	b480      	push	{r7}
 8002f6a:	b08b      	sub	sp, #44	; 0x2c
 8002f6c:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002f6e:	2300      	movs	r3, #0
 8002f70:	61fb      	str	r3, [r7, #28]
 8002f72:	2300      	movs	r3, #0
 8002f74:	61bb      	str	r3, [r7, #24]
 8002f76:	2300      	movs	r3, #0
 8002f78:	627b      	str	r3, [r7, #36]	; 0x24
 8002f7a:	2300      	movs	r3, #0
 8002f7c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002f7e:	2300      	movs	r3, #0
 8002f80:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8002f82:	4b29      	ldr	r3, [pc, #164]	; (8003028 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002f84:	685b      	ldr	r3, [r3, #4]
 8002f86:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002f88:	69fb      	ldr	r3, [r7, #28]
 8002f8a:	f003 030c 	and.w	r3, r3, #12
 8002f8e:	2b04      	cmp	r3, #4
 8002f90:	d002      	beq.n	8002f98 <HAL_RCC_GetSysClockFreq+0x30>
 8002f92:	2b08      	cmp	r3, #8
 8002f94:	d003      	beq.n	8002f9e <HAL_RCC_GetSysClockFreq+0x36>
 8002f96:	e03c      	b.n	8003012 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002f98:	4b24      	ldr	r3, [pc, #144]	; (800302c <HAL_RCC_GetSysClockFreq+0xc4>)
 8002f9a:	623b      	str	r3, [r7, #32]
      break;
 8002f9c:	e03c      	b.n	8003018 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8002f9e:	69fb      	ldr	r3, [r7, #28]
 8002fa0:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8002fa4:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8002fa8:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002faa:	68ba      	ldr	r2, [r7, #8]
 8002fac:	fa92 f2a2 	rbit	r2, r2
 8002fb0:	607a      	str	r2, [r7, #4]
  return result;
 8002fb2:	687a      	ldr	r2, [r7, #4]
 8002fb4:	fab2 f282 	clz	r2, r2
 8002fb8:	b2d2      	uxtb	r2, r2
 8002fba:	40d3      	lsrs	r3, r2
 8002fbc:	4a1c      	ldr	r2, [pc, #112]	; (8003030 <HAL_RCC_GetSysClockFreq+0xc8>)
 8002fbe:	5cd3      	ldrb	r3, [r2, r3]
 8002fc0:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8002fc2:	4b19      	ldr	r3, [pc, #100]	; (8003028 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002fc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fc6:	f003 030f 	and.w	r3, r3, #15
 8002fca:	220f      	movs	r2, #15
 8002fcc:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fce:	693a      	ldr	r2, [r7, #16]
 8002fd0:	fa92 f2a2 	rbit	r2, r2
 8002fd4:	60fa      	str	r2, [r7, #12]
  return result;
 8002fd6:	68fa      	ldr	r2, [r7, #12]
 8002fd8:	fab2 f282 	clz	r2, r2
 8002fdc:	b2d2      	uxtb	r2, r2
 8002fde:	40d3      	lsrs	r3, r2
 8002fe0:	4a14      	ldr	r2, [pc, #80]	; (8003034 <HAL_RCC_GetSysClockFreq+0xcc>)
 8002fe2:	5cd3      	ldrb	r3, [r2, r3]
 8002fe4:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8002fe6:	69fb      	ldr	r3, [r7, #28]
 8002fe8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d008      	beq.n	8003002 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002ff0:	4a0e      	ldr	r2, [pc, #56]	; (800302c <HAL_RCC_GetSysClockFreq+0xc4>)
 8002ff2:	69bb      	ldr	r3, [r7, #24]
 8002ff4:	fbb2 f2f3 	udiv	r2, r2, r3
 8002ff8:	697b      	ldr	r3, [r7, #20]
 8002ffa:	fb02 f303 	mul.w	r3, r2, r3
 8002ffe:	627b      	str	r3, [r7, #36]	; 0x24
 8003000:	e004      	b.n	800300c <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8003002:	697b      	ldr	r3, [r7, #20]
 8003004:	4a0c      	ldr	r2, [pc, #48]	; (8003038 <HAL_RCC_GetSysClockFreq+0xd0>)
 8003006:	fb02 f303 	mul.w	r3, r2, r3
 800300a:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 800300c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800300e:	623b      	str	r3, [r7, #32]
      break;
 8003010:	e002      	b.n	8003018 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003012:	4b06      	ldr	r3, [pc, #24]	; (800302c <HAL_RCC_GetSysClockFreq+0xc4>)
 8003014:	623b      	str	r3, [r7, #32]
      break;
 8003016:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003018:	6a3b      	ldr	r3, [r7, #32]
}
 800301a:	4618      	mov	r0, r3
 800301c:	372c      	adds	r7, #44	; 0x2c
 800301e:	46bd      	mov	sp, r7
 8003020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003024:	4770      	bx	lr
 8003026:	bf00      	nop
 8003028:	40021000 	.word	0x40021000
 800302c:	007a1200 	.word	0x007a1200
 8003030:	08004528 	.word	0x08004528
 8003034:	08004538 	.word	0x08004538
 8003038:	003d0900 	.word	0x003d0900

0800303c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800303c:	b480      	push	{r7}
 800303e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003040:	4b03      	ldr	r3, [pc, #12]	; (8003050 <HAL_RCC_GetHCLKFreq+0x14>)
 8003042:	681b      	ldr	r3, [r3, #0]
}
 8003044:	4618      	mov	r0, r3
 8003046:	46bd      	mov	sp, r7
 8003048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800304c:	4770      	bx	lr
 800304e:	bf00      	nop
 8003050:	20000000 	.word	0x20000000

08003054 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003054:	b580      	push	{r7, lr}
 8003056:	b082      	sub	sp, #8
 8003058:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 800305a:	f7ff ffef 	bl	800303c <HAL_RCC_GetHCLKFreq>
 800305e:	4601      	mov	r1, r0
 8003060:	4b0b      	ldr	r3, [pc, #44]	; (8003090 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8003062:	685b      	ldr	r3, [r3, #4]
 8003064:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003068:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800306c:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800306e:	687a      	ldr	r2, [r7, #4]
 8003070:	fa92 f2a2 	rbit	r2, r2
 8003074:	603a      	str	r2, [r7, #0]
  return result;
 8003076:	683a      	ldr	r2, [r7, #0]
 8003078:	fab2 f282 	clz	r2, r2
 800307c:	b2d2      	uxtb	r2, r2
 800307e:	40d3      	lsrs	r3, r2
 8003080:	4a04      	ldr	r2, [pc, #16]	; (8003094 <HAL_RCC_GetPCLK1Freq+0x40>)
 8003082:	5cd3      	ldrb	r3, [r2, r3]
 8003084:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8003088:	4618      	mov	r0, r3
 800308a:	3708      	adds	r7, #8
 800308c:	46bd      	mov	sp, r7
 800308e:	bd80      	pop	{r7, pc}
 8003090:	40021000 	.word	0x40021000
 8003094:	08004520 	.word	0x08004520

08003098 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003098:	b580      	push	{r7, lr}
 800309a:	b082      	sub	sp, #8
 800309c:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 800309e:	f7ff ffcd 	bl	800303c <HAL_RCC_GetHCLKFreq>
 80030a2:	4601      	mov	r1, r0
 80030a4:	4b0b      	ldr	r3, [pc, #44]	; (80030d4 <HAL_RCC_GetPCLK2Freq+0x3c>)
 80030a6:	685b      	ldr	r3, [r3, #4]
 80030a8:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 80030ac:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 80030b0:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030b2:	687a      	ldr	r2, [r7, #4]
 80030b4:	fa92 f2a2 	rbit	r2, r2
 80030b8:	603a      	str	r2, [r7, #0]
  return result;
 80030ba:	683a      	ldr	r2, [r7, #0]
 80030bc:	fab2 f282 	clz	r2, r2
 80030c0:	b2d2      	uxtb	r2, r2
 80030c2:	40d3      	lsrs	r3, r2
 80030c4:	4a04      	ldr	r2, [pc, #16]	; (80030d8 <HAL_RCC_GetPCLK2Freq+0x40>)
 80030c6:	5cd3      	ldrb	r3, [r2, r3]
 80030c8:	fa21 f303 	lsr.w	r3, r1, r3
} 
 80030cc:	4618      	mov	r0, r3
 80030ce:	3708      	adds	r7, #8
 80030d0:	46bd      	mov	sp, r7
 80030d2:	bd80      	pop	{r7, pc}
 80030d4:	40021000 	.word	0x40021000
 80030d8:	08004520 	.word	0x08004520

080030dc <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80030dc:	b580      	push	{r7, lr}
 80030de:	b092      	sub	sp, #72	; 0x48
 80030e0:	af00      	add	r7, sp, #0
 80030e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80030e4:	2300      	movs	r3, #0
 80030e6:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 80030e8:	2300      	movs	r3, #0
 80030ea:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 80030ec:	2300      	movs	r3, #0
 80030ee:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	f000 80cd 	beq.w	800329a <HAL_RCCEx_PeriphCLKConfig+0x1be>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003100:	4b86      	ldr	r3, [pc, #536]	; (800331c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003102:	69db      	ldr	r3, [r3, #28]
 8003104:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003108:	2b00      	cmp	r3, #0
 800310a:	d10e      	bne.n	800312a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800310c:	4b83      	ldr	r3, [pc, #524]	; (800331c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800310e:	69db      	ldr	r3, [r3, #28]
 8003110:	4a82      	ldr	r2, [pc, #520]	; (800331c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003112:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003116:	61d3      	str	r3, [r2, #28]
 8003118:	4b80      	ldr	r3, [pc, #512]	; (800331c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800311a:	69db      	ldr	r3, [r3, #28]
 800311c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003120:	60bb      	str	r3, [r7, #8]
 8003122:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003124:	2301      	movs	r3, #1
 8003126:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800312a:	4b7d      	ldr	r3, [pc, #500]	; (8003320 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003132:	2b00      	cmp	r3, #0
 8003134:	d118      	bne.n	8003168 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003136:	4b7a      	ldr	r3, [pc, #488]	; (8003320 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	4a79      	ldr	r2, [pc, #484]	; (8003320 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 800313c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003140:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003142:	f7fd fd01 	bl	8000b48 <HAL_GetTick>
 8003146:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003148:	e008      	b.n	800315c <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800314a:	f7fd fcfd 	bl	8000b48 <HAL_GetTick>
 800314e:	4602      	mov	r2, r0
 8003150:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003152:	1ad3      	subs	r3, r2, r3
 8003154:	2b64      	cmp	r3, #100	; 0x64
 8003156:	d901      	bls.n	800315c <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8003158:	2303      	movs	r3, #3
 800315a:	e0db      	b.n	8003314 <HAL_RCCEx_PeriphCLKConfig+0x238>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800315c:	4b70      	ldr	r3, [pc, #448]	; (8003320 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003164:	2b00      	cmp	r3, #0
 8003166:	d0f0      	beq.n	800314a <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003168:	4b6c      	ldr	r3, [pc, #432]	; (800331c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800316a:	6a1b      	ldr	r3, [r3, #32]
 800316c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003170:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003172:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003174:	2b00      	cmp	r3, #0
 8003176:	d07d      	beq.n	8003274 <HAL_RCCEx_PeriphCLKConfig+0x198>
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	685b      	ldr	r3, [r3, #4]
 800317c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003180:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003182:	429a      	cmp	r2, r3
 8003184:	d076      	beq.n	8003274 <HAL_RCCEx_PeriphCLKConfig+0x198>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003186:	4b65      	ldr	r3, [pc, #404]	; (800331c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003188:	6a1b      	ldr	r3, [r3, #32]
 800318a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800318e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003190:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003194:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003196:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003198:	fa93 f3a3 	rbit	r3, r3
 800319c:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 800319e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80031a0:	fab3 f383 	clz	r3, r3
 80031a4:	b2db      	uxtb	r3, r3
 80031a6:	461a      	mov	r2, r3
 80031a8:	4b5e      	ldr	r3, [pc, #376]	; (8003324 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80031aa:	4413      	add	r3, r2
 80031ac:	009b      	lsls	r3, r3, #2
 80031ae:	461a      	mov	r2, r3
 80031b0:	2301      	movs	r3, #1
 80031b2:	6013      	str	r3, [r2, #0]
 80031b4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80031b8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80031bc:	fa93 f3a3 	rbit	r3, r3
 80031c0:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80031c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 80031c4:	fab3 f383 	clz	r3, r3
 80031c8:	b2db      	uxtb	r3, r3
 80031ca:	461a      	mov	r2, r3
 80031cc:	4b55      	ldr	r3, [pc, #340]	; (8003324 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80031ce:	4413      	add	r3, r2
 80031d0:	009b      	lsls	r3, r3, #2
 80031d2:	461a      	mov	r2, r3
 80031d4:	2300      	movs	r3, #0
 80031d6:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80031d8:	4a50      	ldr	r2, [pc, #320]	; (800331c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80031da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80031dc:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80031de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80031e0:	f003 0301 	and.w	r3, r3, #1
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d045      	beq.n	8003274 <HAL_RCCEx_PeriphCLKConfig+0x198>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031e8:	f7fd fcae 	bl	8000b48 <HAL_GetTick>
 80031ec:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80031ee:	e00a      	b.n	8003206 <HAL_RCCEx_PeriphCLKConfig+0x12a>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80031f0:	f7fd fcaa 	bl	8000b48 <HAL_GetTick>
 80031f4:	4602      	mov	r2, r0
 80031f6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80031f8:	1ad3      	subs	r3, r2, r3
 80031fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80031fe:	4293      	cmp	r3, r2
 8003200:	d901      	bls.n	8003206 <HAL_RCCEx_PeriphCLKConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8003202:	2303      	movs	r3, #3
 8003204:	e086      	b.n	8003314 <HAL_RCCEx_PeriphCLKConfig+0x238>
 8003206:	2302      	movs	r3, #2
 8003208:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800320a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800320c:	fa93 f3a3 	rbit	r3, r3
 8003210:	627b      	str	r3, [r7, #36]	; 0x24
 8003212:	2302      	movs	r3, #2
 8003214:	623b      	str	r3, [r7, #32]
 8003216:	6a3b      	ldr	r3, [r7, #32]
 8003218:	fa93 f3a3 	rbit	r3, r3
 800321c:	61fb      	str	r3, [r7, #28]
  return result;
 800321e:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003220:	fab3 f383 	clz	r3, r3
 8003224:	b2db      	uxtb	r3, r3
 8003226:	095b      	lsrs	r3, r3, #5
 8003228:	b2db      	uxtb	r3, r3
 800322a:	f043 0302 	orr.w	r3, r3, #2
 800322e:	b2db      	uxtb	r3, r3
 8003230:	2b02      	cmp	r3, #2
 8003232:	d102      	bne.n	800323a <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8003234:	4b39      	ldr	r3, [pc, #228]	; (800331c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003236:	6a1b      	ldr	r3, [r3, #32]
 8003238:	e007      	b.n	800324a <HAL_RCCEx_PeriphCLKConfig+0x16e>
 800323a:	2302      	movs	r3, #2
 800323c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800323e:	69bb      	ldr	r3, [r7, #24]
 8003240:	fa93 f3a3 	rbit	r3, r3
 8003244:	617b      	str	r3, [r7, #20]
 8003246:	4b35      	ldr	r3, [pc, #212]	; (800331c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003248:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800324a:	2202      	movs	r2, #2
 800324c:	613a      	str	r2, [r7, #16]
 800324e:	693a      	ldr	r2, [r7, #16]
 8003250:	fa92 f2a2 	rbit	r2, r2
 8003254:	60fa      	str	r2, [r7, #12]
  return result;
 8003256:	68fa      	ldr	r2, [r7, #12]
 8003258:	fab2 f282 	clz	r2, r2
 800325c:	b2d2      	uxtb	r2, r2
 800325e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003262:	b2d2      	uxtb	r2, r2
 8003264:	f002 021f 	and.w	r2, r2, #31
 8003268:	2101      	movs	r1, #1
 800326a:	fa01 f202 	lsl.w	r2, r1, r2
 800326e:	4013      	ands	r3, r2
 8003270:	2b00      	cmp	r3, #0
 8003272:	d0bd      	beq.n	80031f0 <HAL_RCCEx_PeriphCLKConfig+0x114>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8003274:	4b29      	ldr	r3, [pc, #164]	; (800331c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003276:	6a1b      	ldr	r3, [r3, #32]
 8003278:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	685b      	ldr	r3, [r3, #4]
 8003280:	4926      	ldr	r1, [pc, #152]	; (800331c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003282:	4313      	orrs	r3, r2
 8003284:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003286:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800328a:	2b01      	cmp	r3, #1
 800328c:	d105      	bne.n	800329a <HAL_RCCEx_PeriphCLKConfig+0x1be>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800328e:	4b23      	ldr	r3, [pc, #140]	; (800331c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003290:	69db      	ldr	r3, [r3, #28]
 8003292:	4a22      	ldr	r2, [pc, #136]	; (800331c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003294:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003298:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	f003 0301 	and.w	r3, r3, #1
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d008      	beq.n	80032b8 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80032a6:	4b1d      	ldr	r3, [pc, #116]	; (800331c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80032a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032aa:	f023 0203 	bic.w	r2, r3, #3
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	689b      	ldr	r3, [r3, #8]
 80032b2:	491a      	ldr	r1, [pc, #104]	; (800331c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80032b4:	4313      	orrs	r3, r2
 80032b6:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	f003 0320 	and.w	r3, r3, #32
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d008      	beq.n	80032d6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80032c4:	4b15      	ldr	r3, [pc, #84]	; (800331c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80032c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032c8:	f023 0210 	bic.w	r2, r3, #16
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	68db      	ldr	r3, [r3, #12]
 80032d0:	4912      	ldr	r1, [pc, #72]	; (800331c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80032d2:	4313      	orrs	r3, r2
 80032d4:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d008      	beq.n	80032f4 <HAL_RCCEx_PeriphCLKConfig+0x218>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80032e2:	4b0e      	ldr	r3, [pc, #56]	; (800331c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80032e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032e6:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	691b      	ldr	r3, [r3, #16]
 80032ee:	490b      	ldr	r1, [pc, #44]	; (800331c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80032f0:	4313      	orrs	r3, r2
 80032f2:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d008      	beq.n	8003312 <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8003300:	4b06      	ldr	r3, [pc, #24]	; (800331c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003302:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003304:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	695b      	ldr	r3, [r3, #20]
 800330c:	4903      	ldr	r1, [pc, #12]	; (800331c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800330e:	4313      	orrs	r3, r2
 8003310:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8003312:	2300      	movs	r3, #0
}
 8003314:	4618      	mov	r0, r3
 8003316:	3748      	adds	r7, #72	; 0x48
 8003318:	46bd      	mov	sp, r7
 800331a:	bd80      	pop	{r7, pc}
 800331c:	40021000 	.word	0x40021000
 8003320:	40007000 	.word	0x40007000
 8003324:	10908100 	.word	0x10908100

08003328 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003328:	b580      	push	{r7, lr}
 800332a:	b082      	sub	sp, #8
 800332c:	af00      	add	r7, sp, #0
 800332e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	2b00      	cmp	r3, #0
 8003334:	d101      	bne.n	800333a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003336:	2301      	movs	r3, #1
 8003338:	e049      	b.n	80033ce <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003340:	b2db      	uxtb	r3, r3
 8003342:	2b00      	cmp	r3, #0
 8003344:	d106      	bne.n	8003354 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	2200      	movs	r2, #0
 800334a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800334e:	6878      	ldr	r0, [r7, #4]
 8003350:	f7fd fa88 	bl	8000864 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	2202      	movs	r2, #2
 8003358:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681a      	ldr	r2, [r3, #0]
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	3304      	adds	r3, #4
 8003364:	4619      	mov	r1, r3
 8003366:	4610      	mov	r0, r2
 8003368:	f000 faaa 	bl	80038c0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	2201      	movs	r2, #1
 8003370:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	2201      	movs	r2, #1
 8003378:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	2201      	movs	r2, #1
 8003380:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	2201      	movs	r2, #1
 8003388:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	2201      	movs	r2, #1
 8003390:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	2201      	movs	r2, #1
 8003398:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	2201      	movs	r2, #1
 80033a0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	2201      	movs	r2, #1
 80033a8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	2201      	movs	r2, #1
 80033b0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	2201      	movs	r2, #1
 80033b8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	2201      	movs	r2, #1
 80033c0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	2201      	movs	r2, #1
 80033c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80033cc:	2300      	movs	r3, #0
}
 80033ce:	4618      	mov	r0, r3
 80033d0:	3708      	adds	r7, #8
 80033d2:	46bd      	mov	sp, r7
 80033d4:	bd80      	pop	{r7, pc}
	...

080033d8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80033d8:	b480      	push	{r7}
 80033da:	b085      	sub	sp, #20
 80033dc:	af00      	add	r7, sp, #0
 80033de:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80033e6:	b2db      	uxtb	r3, r3
 80033e8:	2b01      	cmp	r3, #1
 80033ea:	d001      	beq.n	80033f0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80033ec:	2301      	movs	r3, #1
 80033ee:	e040      	b.n	8003472 <HAL_TIM_Base_Start_IT+0x9a>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	2202      	movs	r2, #2
 80033f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	68da      	ldr	r2, [r3, #12]
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	f042 0201 	orr.w	r2, r2, #1
 8003406:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	4a1c      	ldr	r2, [pc, #112]	; (8003480 <HAL_TIM_Base_Start_IT+0xa8>)
 800340e:	4293      	cmp	r3, r2
 8003410:	d00e      	beq.n	8003430 <HAL_TIM_Base_Start_IT+0x58>
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800341a:	d009      	beq.n	8003430 <HAL_TIM_Base_Start_IT+0x58>
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	4a18      	ldr	r2, [pc, #96]	; (8003484 <HAL_TIM_Base_Start_IT+0xac>)
 8003422:	4293      	cmp	r3, r2
 8003424:	d004      	beq.n	8003430 <HAL_TIM_Base_Start_IT+0x58>
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	4a17      	ldr	r2, [pc, #92]	; (8003488 <HAL_TIM_Base_Start_IT+0xb0>)
 800342c:	4293      	cmp	r3, r2
 800342e:	d115      	bne.n	800345c <HAL_TIM_Base_Start_IT+0x84>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	689a      	ldr	r2, [r3, #8]
 8003436:	4b15      	ldr	r3, [pc, #84]	; (800348c <HAL_TIM_Base_Start_IT+0xb4>)
 8003438:	4013      	ands	r3, r2
 800343a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	2b06      	cmp	r3, #6
 8003440:	d015      	beq.n	800346e <HAL_TIM_Base_Start_IT+0x96>
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003448:	d011      	beq.n	800346e <HAL_TIM_Base_Start_IT+0x96>
    {
      __HAL_TIM_ENABLE(htim);
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	681a      	ldr	r2, [r3, #0]
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	f042 0201 	orr.w	r2, r2, #1
 8003458:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800345a:	e008      	b.n	800346e <HAL_TIM_Base_Start_IT+0x96>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	681a      	ldr	r2, [r3, #0]
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	f042 0201 	orr.w	r2, r2, #1
 800346a:	601a      	str	r2, [r3, #0]
 800346c:	e000      	b.n	8003470 <HAL_TIM_Base_Start_IT+0x98>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800346e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003470:	2300      	movs	r3, #0
}
 8003472:	4618      	mov	r0, r3
 8003474:	3714      	adds	r7, #20
 8003476:	46bd      	mov	sp, r7
 8003478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800347c:	4770      	bx	lr
 800347e:	bf00      	nop
 8003480:	40012c00 	.word	0x40012c00
 8003484:	40000400 	.word	0x40000400
 8003488:	40014000 	.word	0x40014000
 800348c:	00010007 	.word	0x00010007

08003490 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003490:	b580      	push	{r7, lr}
 8003492:	b082      	sub	sp, #8
 8003494:	af00      	add	r7, sp, #0
 8003496:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	691b      	ldr	r3, [r3, #16]
 800349e:	f003 0302 	and.w	r3, r3, #2
 80034a2:	2b02      	cmp	r3, #2
 80034a4:	d122      	bne.n	80034ec <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	68db      	ldr	r3, [r3, #12]
 80034ac:	f003 0302 	and.w	r3, r3, #2
 80034b0:	2b02      	cmp	r3, #2
 80034b2:	d11b      	bne.n	80034ec <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	f06f 0202 	mvn.w	r2, #2
 80034bc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	2201      	movs	r2, #1
 80034c2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	699b      	ldr	r3, [r3, #24]
 80034ca:	f003 0303 	and.w	r3, r3, #3
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d003      	beq.n	80034da <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80034d2:	6878      	ldr	r0, [r7, #4]
 80034d4:	f000 f9d5 	bl	8003882 <HAL_TIM_IC_CaptureCallback>
 80034d8:	e005      	b.n	80034e6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80034da:	6878      	ldr	r0, [r7, #4]
 80034dc:	f000 f9c7 	bl	800386e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80034e0:	6878      	ldr	r0, [r7, #4]
 80034e2:	f000 f9d8 	bl	8003896 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	2200      	movs	r2, #0
 80034ea:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	691b      	ldr	r3, [r3, #16]
 80034f2:	f003 0304 	and.w	r3, r3, #4
 80034f6:	2b04      	cmp	r3, #4
 80034f8:	d122      	bne.n	8003540 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	68db      	ldr	r3, [r3, #12]
 8003500:	f003 0304 	and.w	r3, r3, #4
 8003504:	2b04      	cmp	r3, #4
 8003506:	d11b      	bne.n	8003540 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	f06f 0204 	mvn.w	r2, #4
 8003510:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	2202      	movs	r2, #2
 8003516:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	699b      	ldr	r3, [r3, #24]
 800351e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003522:	2b00      	cmp	r3, #0
 8003524:	d003      	beq.n	800352e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003526:	6878      	ldr	r0, [r7, #4]
 8003528:	f000 f9ab 	bl	8003882 <HAL_TIM_IC_CaptureCallback>
 800352c:	e005      	b.n	800353a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800352e:	6878      	ldr	r0, [r7, #4]
 8003530:	f000 f99d 	bl	800386e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003534:	6878      	ldr	r0, [r7, #4]
 8003536:	f000 f9ae 	bl	8003896 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	2200      	movs	r2, #0
 800353e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	691b      	ldr	r3, [r3, #16]
 8003546:	f003 0308 	and.w	r3, r3, #8
 800354a:	2b08      	cmp	r3, #8
 800354c:	d122      	bne.n	8003594 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	68db      	ldr	r3, [r3, #12]
 8003554:	f003 0308 	and.w	r3, r3, #8
 8003558:	2b08      	cmp	r3, #8
 800355a:	d11b      	bne.n	8003594 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	f06f 0208 	mvn.w	r2, #8
 8003564:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	2204      	movs	r2, #4
 800356a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	69db      	ldr	r3, [r3, #28]
 8003572:	f003 0303 	and.w	r3, r3, #3
 8003576:	2b00      	cmp	r3, #0
 8003578:	d003      	beq.n	8003582 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800357a:	6878      	ldr	r0, [r7, #4]
 800357c:	f000 f981 	bl	8003882 <HAL_TIM_IC_CaptureCallback>
 8003580:	e005      	b.n	800358e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003582:	6878      	ldr	r0, [r7, #4]
 8003584:	f000 f973 	bl	800386e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003588:	6878      	ldr	r0, [r7, #4]
 800358a:	f000 f984 	bl	8003896 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	2200      	movs	r2, #0
 8003592:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	691b      	ldr	r3, [r3, #16]
 800359a:	f003 0310 	and.w	r3, r3, #16
 800359e:	2b10      	cmp	r3, #16
 80035a0:	d122      	bne.n	80035e8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	68db      	ldr	r3, [r3, #12]
 80035a8:	f003 0310 	and.w	r3, r3, #16
 80035ac:	2b10      	cmp	r3, #16
 80035ae:	d11b      	bne.n	80035e8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	f06f 0210 	mvn.w	r2, #16
 80035b8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	2208      	movs	r2, #8
 80035be:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	69db      	ldr	r3, [r3, #28]
 80035c6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d003      	beq.n	80035d6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80035ce:	6878      	ldr	r0, [r7, #4]
 80035d0:	f000 f957 	bl	8003882 <HAL_TIM_IC_CaptureCallback>
 80035d4:	e005      	b.n	80035e2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80035d6:	6878      	ldr	r0, [r7, #4]
 80035d8:	f000 f949 	bl	800386e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80035dc:	6878      	ldr	r0, [r7, #4]
 80035de:	f000 f95a 	bl	8003896 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	2200      	movs	r2, #0
 80035e6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	691b      	ldr	r3, [r3, #16]
 80035ee:	f003 0301 	and.w	r3, r3, #1
 80035f2:	2b01      	cmp	r3, #1
 80035f4:	d10e      	bne.n	8003614 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	68db      	ldr	r3, [r3, #12]
 80035fc:	f003 0301 	and.w	r3, r3, #1
 8003600:	2b01      	cmp	r3, #1
 8003602:	d107      	bne.n	8003614 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	f06f 0201 	mvn.w	r2, #1
 800360c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800360e:	6878      	ldr	r0, [r7, #4]
 8003610:	f000 f923 	bl	800385a <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	691b      	ldr	r3, [r3, #16]
 800361a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800361e:	2b80      	cmp	r3, #128	; 0x80
 8003620:	d10e      	bne.n	8003640 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	68db      	ldr	r3, [r3, #12]
 8003628:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800362c:	2b80      	cmp	r3, #128	; 0x80
 800362e:	d107      	bne.n	8003640 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003638:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800363a:	6878      	ldr	r0, [r7, #4]
 800363c:	f000 faca 	bl	8003bd4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	691b      	ldr	r3, [r3, #16]
 8003646:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800364a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800364e:	d10e      	bne.n	800366e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	68db      	ldr	r3, [r3, #12]
 8003656:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800365a:	2b80      	cmp	r3, #128	; 0x80
 800365c:	d107      	bne.n	800366e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8003666:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003668:	6878      	ldr	r0, [r7, #4]
 800366a:	f000 fabd 	bl	8003be8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	691b      	ldr	r3, [r3, #16]
 8003674:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003678:	2b40      	cmp	r3, #64	; 0x40
 800367a:	d10e      	bne.n	800369a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	68db      	ldr	r3, [r3, #12]
 8003682:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003686:	2b40      	cmp	r3, #64	; 0x40
 8003688:	d107      	bne.n	800369a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003692:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003694:	6878      	ldr	r0, [r7, #4]
 8003696:	f000 f908 	bl	80038aa <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	691b      	ldr	r3, [r3, #16]
 80036a0:	f003 0320 	and.w	r3, r3, #32
 80036a4:	2b20      	cmp	r3, #32
 80036a6:	d10e      	bne.n	80036c6 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	68db      	ldr	r3, [r3, #12]
 80036ae:	f003 0320 	and.w	r3, r3, #32
 80036b2:	2b20      	cmp	r3, #32
 80036b4:	d107      	bne.n	80036c6 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	f06f 0220 	mvn.w	r2, #32
 80036be:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80036c0:	6878      	ldr	r0, [r7, #4]
 80036c2:	f000 fa7d 	bl	8003bc0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80036c6:	bf00      	nop
 80036c8:	3708      	adds	r7, #8
 80036ca:	46bd      	mov	sp, r7
 80036cc:	bd80      	pop	{r7, pc}

080036ce <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80036ce:	b580      	push	{r7, lr}
 80036d0:	b084      	sub	sp, #16
 80036d2:	af00      	add	r7, sp, #0
 80036d4:	6078      	str	r0, [r7, #4]
 80036d6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80036de:	2b01      	cmp	r3, #1
 80036e0:	d101      	bne.n	80036e6 <HAL_TIM_ConfigClockSource+0x18>
 80036e2:	2302      	movs	r3, #2
 80036e4:	e0b5      	b.n	8003852 <HAL_TIM_ConfigClockSource+0x184>
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	2201      	movs	r2, #1
 80036ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	2202      	movs	r2, #2
 80036f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	689b      	ldr	r3, [r3, #8]
 80036fc:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003704:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003708:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003710:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	68fa      	ldr	r2, [r7, #12]
 8003718:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800371a:	683b      	ldr	r3, [r7, #0]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003722:	d03e      	beq.n	80037a2 <HAL_TIM_ConfigClockSource+0xd4>
 8003724:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003728:	f200 8087 	bhi.w	800383a <HAL_TIM_ConfigClockSource+0x16c>
 800372c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003730:	f000 8085 	beq.w	800383e <HAL_TIM_ConfigClockSource+0x170>
 8003734:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003738:	d87f      	bhi.n	800383a <HAL_TIM_ConfigClockSource+0x16c>
 800373a:	2b70      	cmp	r3, #112	; 0x70
 800373c:	d01a      	beq.n	8003774 <HAL_TIM_ConfigClockSource+0xa6>
 800373e:	2b70      	cmp	r3, #112	; 0x70
 8003740:	d87b      	bhi.n	800383a <HAL_TIM_ConfigClockSource+0x16c>
 8003742:	2b60      	cmp	r3, #96	; 0x60
 8003744:	d050      	beq.n	80037e8 <HAL_TIM_ConfigClockSource+0x11a>
 8003746:	2b60      	cmp	r3, #96	; 0x60
 8003748:	d877      	bhi.n	800383a <HAL_TIM_ConfigClockSource+0x16c>
 800374a:	2b50      	cmp	r3, #80	; 0x50
 800374c:	d03c      	beq.n	80037c8 <HAL_TIM_ConfigClockSource+0xfa>
 800374e:	2b50      	cmp	r3, #80	; 0x50
 8003750:	d873      	bhi.n	800383a <HAL_TIM_ConfigClockSource+0x16c>
 8003752:	2b40      	cmp	r3, #64	; 0x40
 8003754:	d058      	beq.n	8003808 <HAL_TIM_ConfigClockSource+0x13a>
 8003756:	2b40      	cmp	r3, #64	; 0x40
 8003758:	d86f      	bhi.n	800383a <HAL_TIM_ConfigClockSource+0x16c>
 800375a:	2b30      	cmp	r3, #48	; 0x30
 800375c:	d064      	beq.n	8003828 <HAL_TIM_ConfigClockSource+0x15a>
 800375e:	2b30      	cmp	r3, #48	; 0x30
 8003760:	d86b      	bhi.n	800383a <HAL_TIM_ConfigClockSource+0x16c>
 8003762:	2b20      	cmp	r3, #32
 8003764:	d060      	beq.n	8003828 <HAL_TIM_ConfigClockSource+0x15a>
 8003766:	2b20      	cmp	r3, #32
 8003768:	d867      	bhi.n	800383a <HAL_TIM_ConfigClockSource+0x16c>
 800376a:	2b00      	cmp	r3, #0
 800376c:	d05c      	beq.n	8003828 <HAL_TIM_ConfigClockSource+0x15a>
 800376e:	2b10      	cmp	r3, #16
 8003770:	d05a      	beq.n	8003828 <HAL_TIM_ConfigClockSource+0x15a>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8003772:	e062      	b.n	800383a <HAL_TIM_ConfigClockSource+0x16c>
      TIM_ETR_SetConfig(htim->Instance,
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	6818      	ldr	r0, [r3, #0]
 8003778:	683b      	ldr	r3, [r7, #0]
 800377a:	6899      	ldr	r1, [r3, #8]
 800377c:	683b      	ldr	r3, [r7, #0]
 800377e:	685a      	ldr	r2, [r3, #4]
 8003780:	683b      	ldr	r3, [r7, #0]
 8003782:	68db      	ldr	r3, [r3, #12]
 8003784:	f000 f98e 	bl	8003aa4 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	689b      	ldr	r3, [r3, #8]
 800378e:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003796:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	68fa      	ldr	r2, [r7, #12]
 800379e:	609a      	str	r2, [r3, #8]
      break;
 80037a0:	e04e      	b.n	8003840 <HAL_TIM_ConfigClockSource+0x172>
      TIM_ETR_SetConfig(htim->Instance,
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	6818      	ldr	r0, [r3, #0]
 80037a6:	683b      	ldr	r3, [r7, #0]
 80037a8:	6899      	ldr	r1, [r3, #8]
 80037aa:	683b      	ldr	r3, [r7, #0]
 80037ac:	685a      	ldr	r2, [r3, #4]
 80037ae:	683b      	ldr	r3, [r7, #0]
 80037b0:	68db      	ldr	r3, [r3, #12]
 80037b2:	f000 f977 	bl	8003aa4 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	689a      	ldr	r2, [r3, #8]
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80037c4:	609a      	str	r2, [r3, #8]
      break;
 80037c6:	e03b      	b.n	8003840 <HAL_TIM_ConfigClockSource+0x172>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	6818      	ldr	r0, [r3, #0]
 80037cc:	683b      	ldr	r3, [r7, #0]
 80037ce:	6859      	ldr	r1, [r3, #4]
 80037d0:	683b      	ldr	r3, [r7, #0]
 80037d2:	68db      	ldr	r3, [r3, #12]
 80037d4:	461a      	mov	r2, r3
 80037d6:	f000 f8eb 	bl	80039b0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	2150      	movs	r1, #80	; 0x50
 80037e0:	4618      	mov	r0, r3
 80037e2:	f000 f944 	bl	8003a6e <TIM_ITRx_SetConfig>
      break;
 80037e6:	e02b      	b.n	8003840 <HAL_TIM_ConfigClockSource+0x172>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	6818      	ldr	r0, [r3, #0]
 80037ec:	683b      	ldr	r3, [r7, #0]
 80037ee:	6859      	ldr	r1, [r3, #4]
 80037f0:	683b      	ldr	r3, [r7, #0]
 80037f2:	68db      	ldr	r3, [r3, #12]
 80037f4:	461a      	mov	r2, r3
 80037f6:	f000 f90a 	bl	8003a0e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	2160      	movs	r1, #96	; 0x60
 8003800:	4618      	mov	r0, r3
 8003802:	f000 f934 	bl	8003a6e <TIM_ITRx_SetConfig>
      break;
 8003806:	e01b      	b.n	8003840 <HAL_TIM_ConfigClockSource+0x172>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	6818      	ldr	r0, [r3, #0]
 800380c:	683b      	ldr	r3, [r7, #0]
 800380e:	6859      	ldr	r1, [r3, #4]
 8003810:	683b      	ldr	r3, [r7, #0]
 8003812:	68db      	ldr	r3, [r3, #12]
 8003814:	461a      	mov	r2, r3
 8003816:	f000 f8cb 	bl	80039b0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	2140      	movs	r1, #64	; 0x40
 8003820:	4618      	mov	r0, r3
 8003822:	f000 f924 	bl	8003a6e <TIM_ITRx_SetConfig>
      break;
 8003826:	e00b      	b.n	8003840 <HAL_TIM_ConfigClockSource+0x172>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681a      	ldr	r2, [r3, #0]
 800382c:	683b      	ldr	r3, [r7, #0]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	4619      	mov	r1, r3
 8003832:	4610      	mov	r0, r2
 8003834:	f000 f91b 	bl	8003a6e <TIM_ITRx_SetConfig>
        break;
 8003838:	e002      	b.n	8003840 <HAL_TIM_ConfigClockSource+0x172>
      break;
 800383a:	bf00      	nop
 800383c:	e000      	b.n	8003840 <HAL_TIM_ConfigClockSource+0x172>
      break;
 800383e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	2201      	movs	r2, #1
 8003844:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	2200      	movs	r2, #0
 800384c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003850:	2300      	movs	r3, #0
}
 8003852:	4618      	mov	r0, r3
 8003854:	3710      	adds	r7, #16
 8003856:	46bd      	mov	sp, r7
 8003858:	bd80      	pop	{r7, pc}

0800385a <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800385a:	b480      	push	{r7}
 800385c:	b083      	sub	sp, #12
 800385e:	af00      	add	r7, sp, #0
 8003860:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8003862:	bf00      	nop
 8003864:	370c      	adds	r7, #12
 8003866:	46bd      	mov	sp, r7
 8003868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800386c:	4770      	bx	lr

0800386e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800386e:	b480      	push	{r7}
 8003870:	b083      	sub	sp, #12
 8003872:	af00      	add	r7, sp, #0
 8003874:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003876:	bf00      	nop
 8003878:	370c      	adds	r7, #12
 800387a:	46bd      	mov	sp, r7
 800387c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003880:	4770      	bx	lr

08003882 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003882:	b480      	push	{r7}
 8003884:	b083      	sub	sp, #12
 8003886:	af00      	add	r7, sp, #0
 8003888:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800388a:	bf00      	nop
 800388c:	370c      	adds	r7, #12
 800388e:	46bd      	mov	sp, r7
 8003890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003894:	4770      	bx	lr

08003896 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003896:	b480      	push	{r7}
 8003898:	b083      	sub	sp, #12
 800389a:	af00      	add	r7, sp, #0
 800389c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800389e:	bf00      	nop
 80038a0:	370c      	adds	r7, #12
 80038a2:	46bd      	mov	sp, r7
 80038a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038a8:	4770      	bx	lr

080038aa <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80038aa:	b480      	push	{r7}
 80038ac:	b083      	sub	sp, #12
 80038ae:	af00      	add	r7, sp, #0
 80038b0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80038b2:	bf00      	nop
 80038b4:	370c      	adds	r7, #12
 80038b6:	46bd      	mov	sp, r7
 80038b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038bc:	4770      	bx	lr
	...

080038c0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80038c0:	b480      	push	{r7}
 80038c2:	b085      	sub	sp, #20
 80038c4:	af00      	add	r7, sp, #0
 80038c6:	6078      	str	r0, [r7, #4]
 80038c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	4a32      	ldr	r2, [pc, #200]	; (800399c <TIM_Base_SetConfig+0xdc>)
 80038d4:	4293      	cmp	r3, r2
 80038d6:	d007      	beq.n	80038e8 <TIM_Base_SetConfig+0x28>
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80038de:	d003      	beq.n	80038e8 <TIM_Base_SetConfig+0x28>
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	4a2f      	ldr	r2, [pc, #188]	; (80039a0 <TIM_Base_SetConfig+0xe0>)
 80038e4:	4293      	cmp	r3, r2
 80038e6:	d108      	bne.n	80038fa <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80038ee:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80038f0:	683b      	ldr	r3, [r7, #0]
 80038f2:	685b      	ldr	r3, [r3, #4]
 80038f4:	68fa      	ldr	r2, [r7, #12]
 80038f6:	4313      	orrs	r3, r2
 80038f8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	4a27      	ldr	r2, [pc, #156]	; (800399c <TIM_Base_SetConfig+0xdc>)
 80038fe:	4293      	cmp	r3, r2
 8003900:	d013      	beq.n	800392a <TIM_Base_SetConfig+0x6a>
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003908:	d00f      	beq.n	800392a <TIM_Base_SetConfig+0x6a>
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	4a24      	ldr	r2, [pc, #144]	; (80039a0 <TIM_Base_SetConfig+0xe0>)
 800390e:	4293      	cmp	r3, r2
 8003910:	d00b      	beq.n	800392a <TIM_Base_SetConfig+0x6a>
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	4a23      	ldr	r2, [pc, #140]	; (80039a4 <TIM_Base_SetConfig+0xe4>)
 8003916:	4293      	cmp	r3, r2
 8003918:	d007      	beq.n	800392a <TIM_Base_SetConfig+0x6a>
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	4a22      	ldr	r2, [pc, #136]	; (80039a8 <TIM_Base_SetConfig+0xe8>)
 800391e:	4293      	cmp	r3, r2
 8003920:	d003      	beq.n	800392a <TIM_Base_SetConfig+0x6a>
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	4a21      	ldr	r2, [pc, #132]	; (80039ac <TIM_Base_SetConfig+0xec>)
 8003926:	4293      	cmp	r3, r2
 8003928:	d108      	bne.n	800393c <TIM_Base_SetConfig+0x7c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003930:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003932:	683b      	ldr	r3, [r7, #0]
 8003934:	68db      	ldr	r3, [r3, #12]
 8003936:	68fa      	ldr	r2, [r7, #12]
 8003938:	4313      	orrs	r3, r2
 800393a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003942:	683b      	ldr	r3, [r7, #0]
 8003944:	695b      	ldr	r3, [r3, #20]
 8003946:	4313      	orrs	r3, r2
 8003948:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	68fa      	ldr	r2, [r7, #12]
 800394e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003950:	683b      	ldr	r3, [r7, #0]
 8003952:	689a      	ldr	r2, [r3, #8]
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003958:	683b      	ldr	r3, [r7, #0]
 800395a:	681a      	ldr	r2, [r3, #0]
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	4a0e      	ldr	r2, [pc, #56]	; (800399c <TIM_Base_SetConfig+0xdc>)
 8003964:	4293      	cmp	r3, r2
 8003966:	d00b      	beq.n	8003980 <TIM_Base_SetConfig+0xc0>
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	4a0e      	ldr	r2, [pc, #56]	; (80039a4 <TIM_Base_SetConfig+0xe4>)
 800396c:	4293      	cmp	r3, r2
 800396e:	d007      	beq.n	8003980 <TIM_Base_SetConfig+0xc0>
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	4a0d      	ldr	r2, [pc, #52]	; (80039a8 <TIM_Base_SetConfig+0xe8>)
 8003974:	4293      	cmp	r3, r2
 8003976:	d003      	beq.n	8003980 <TIM_Base_SetConfig+0xc0>
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	4a0c      	ldr	r2, [pc, #48]	; (80039ac <TIM_Base_SetConfig+0xec>)
 800397c:	4293      	cmp	r3, r2
 800397e:	d103      	bne.n	8003988 <TIM_Base_SetConfig+0xc8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003980:	683b      	ldr	r3, [r7, #0]
 8003982:	691a      	ldr	r2, [r3, #16]
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	2201      	movs	r2, #1
 800398c:	615a      	str	r2, [r3, #20]
}
 800398e:	bf00      	nop
 8003990:	3714      	adds	r7, #20
 8003992:	46bd      	mov	sp, r7
 8003994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003998:	4770      	bx	lr
 800399a:	bf00      	nop
 800399c:	40012c00 	.word	0x40012c00
 80039a0:	40000400 	.word	0x40000400
 80039a4:	40014000 	.word	0x40014000
 80039a8:	40014400 	.word	0x40014400
 80039ac:	40014800 	.word	0x40014800

080039b0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80039b0:	b480      	push	{r7}
 80039b2:	b087      	sub	sp, #28
 80039b4:	af00      	add	r7, sp, #0
 80039b6:	60f8      	str	r0, [r7, #12]
 80039b8:	60b9      	str	r1, [r7, #8]
 80039ba:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	6a1b      	ldr	r3, [r3, #32]
 80039c0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	6a1b      	ldr	r3, [r3, #32]
 80039c6:	f023 0201 	bic.w	r2, r3, #1
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	699b      	ldr	r3, [r3, #24]
 80039d2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80039d4:	693b      	ldr	r3, [r7, #16]
 80039d6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80039da:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	011b      	lsls	r3, r3, #4
 80039e0:	693a      	ldr	r2, [r7, #16]
 80039e2:	4313      	orrs	r3, r2
 80039e4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80039e6:	697b      	ldr	r3, [r7, #20]
 80039e8:	f023 030a 	bic.w	r3, r3, #10
 80039ec:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80039ee:	697a      	ldr	r2, [r7, #20]
 80039f0:	68bb      	ldr	r3, [r7, #8]
 80039f2:	4313      	orrs	r3, r2
 80039f4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	693a      	ldr	r2, [r7, #16]
 80039fa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	697a      	ldr	r2, [r7, #20]
 8003a00:	621a      	str	r2, [r3, #32]
}
 8003a02:	bf00      	nop
 8003a04:	371c      	adds	r7, #28
 8003a06:	46bd      	mov	sp, r7
 8003a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a0c:	4770      	bx	lr

08003a0e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003a0e:	b480      	push	{r7}
 8003a10:	b087      	sub	sp, #28
 8003a12:	af00      	add	r7, sp, #0
 8003a14:	60f8      	str	r0, [r7, #12]
 8003a16:	60b9      	str	r1, [r7, #8]
 8003a18:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	6a1b      	ldr	r3, [r3, #32]
 8003a1e:	f023 0210 	bic.w	r2, r3, #16
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	699b      	ldr	r3, [r3, #24]
 8003a2a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	6a1b      	ldr	r3, [r3, #32]
 8003a30:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003a32:	697b      	ldr	r3, [r7, #20]
 8003a34:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003a38:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	031b      	lsls	r3, r3, #12
 8003a3e:	697a      	ldr	r2, [r7, #20]
 8003a40:	4313      	orrs	r3, r2
 8003a42:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003a44:	693b      	ldr	r3, [r7, #16]
 8003a46:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003a4a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003a4c:	68bb      	ldr	r3, [r7, #8]
 8003a4e:	011b      	lsls	r3, r3, #4
 8003a50:	693a      	ldr	r2, [r7, #16]
 8003a52:	4313      	orrs	r3, r2
 8003a54:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	697a      	ldr	r2, [r7, #20]
 8003a5a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	693a      	ldr	r2, [r7, #16]
 8003a60:	621a      	str	r2, [r3, #32]
}
 8003a62:	bf00      	nop
 8003a64:	371c      	adds	r7, #28
 8003a66:	46bd      	mov	sp, r7
 8003a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a6c:	4770      	bx	lr

08003a6e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003a6e:	b480      	push	{r7}
 8003a70:	b085      	sub	sp, #20
 8003a72:	af00      	add	r7, sp, #0
 8003a74:	6078      	str	r0, [r7, #4]
 8003a76:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	689b      	ldr	r3, [r3, #8]
 8003a7c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a84:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003a86:	683a      	ldr	r2, [r7, #0]
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	4313      	orrs	r3, r2
 8003a8c:	f043 0307 	orr.w	r3, r3, #7
 8003a90:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	68fa      	ldr	r2, [r7, #12]
 8003a96:	609a      	str	r2, [r3, #8]
}
 8003a98:	bf00      	nop
 8003a9a:	3714      	adds	r7, #20
 8003a9c:	46bd      	mov	sp, r7
 8003a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aa2:	4770      	bx	lr

08003aa4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003aa4:	b480      	push	{r7}
 8003aa6:	b087      	sub	sp, #28
 8003aa8:	af00      	add	r7, sp, #0
 8003aaa:	60f8      	str	r0, [r7, #12]
 8003aac:	60b9      	str	r1, [r7, #8]
 8003aae:	607a      	str	r2, [r7, #4]
 8003ab0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	689b      	ldr	r3, [r3, #8]
 8003ab6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003ab8:	697b      	ldr	r3, [r7, #20]
 8003aba:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003abe:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003ac0:	683b      	ldr	r3, [r7, #0]
 8003ac2:	021a      	lsls	r2, r3, #8
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	431a      	orrs	r2, r3
 8003ac8:	68bb      	ldr	r3, [r7, #8]
 8003aca:	4313      	orrs	r3, r2
 8003acc:	697a      	ldr	r2, [r7, #20]
 8003ace:	4313      	orrs	r3, r2
 8003ad0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	697a      	ldr	r2, [r7, #20]
 8003ad6:	609a      	str	r2, [r3, #8]
}
 8003ad8:	bf00      	nop
 8003ada:	371c      	adds	r7, #28
 8003adc:	46bd      	mov	sp, r7
 8003ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ae2:	4770      	bx	lr

08003ae4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003ae4:	b480      	push	{r7}
 8003ae6:	b085      	sub	sp, #20
 8003ae8:	af00      	add	r7, sp, #0
 8003aea:	6078      	str	r0, [r7, #4]
 8003aec:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003af4:	2b01      	cmp	r3, #1
 8003af6:	d101      	bne.n	8003afc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003af8:	2302      	movs	r3, #2
 8003afa:	e054      	b.n	8003ba6 <HAL_TIMEx_MasterConfigSynchronization+0xc2>
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	2201      	movs	r2, #1
 8003b00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	2202      	movs	r2, #2
 8003b08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	685b      	ldr	r3, [r3, #4]
 8003b12:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	689b      	ldr	r3, [r3, #8]
 8003b1a:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	4a24      	ldr	r2, [pc, #144]	; (8003bb4 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8003b22:	4293      	cmp	r3, r2
 8003b24:	d108      	bne.n	8003b38 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8003b2c:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003b2e:	683b      	ldr	r3, [r7, #0]
 8003b30:	685b      	ldr	r3, [r3, #4]
 8003b32:	68fa      	ldr	r2, [r7, #12]
 8003b34:	4313      	orrs	r3, r2
 8003b36:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b3e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003b40:	683b      	ldr	r3, [r7, #0]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	68fa      	ldr	r2, [r7, #12]
 8003b46:	4313      	orrs	r3, r2
 8003b48:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	68fa      	ldr	r2, [r7, #12]
 8003b50:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	4a17      	ldr	r2, [pc, #92]	; (8003bb4 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8003b58:	4293      	cmp	r3, r2
 8003b5a:	d00e      	beq.n	8003b7a <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003b64:	d009      	beq.n	8003b7a <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	4a13      	ldr	r2, [pc, #76]	; (8003bb8 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8003b6c:	4293      	cmp	r3, r2
 8003b6e:	d004      	beq.n	8003b7a <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	4a11      	ldr	r2, [pc, #68]	; (8003bbc <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8003b76:	4293      	cmp	r3, r2
 8003b78:	d10c      	bne.n	8003b94 <HAL_TIMEx_MasterConfigSynchronization+0xb0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003b7a:	68bb      	ldr	r3, [r7, #8]
 8003b7c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003b80:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003b82:	683b      	ldr	r3, [r7, #0]
 8003b84:	689b      	ldr	r3, [r3, #8]
 8003b86:	68ba      	ldr	r2, [r7, #8]
 8003b88:	4313      	orrs	r3, r2
 8003b8a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	68ba      	ldr	r2, [r7, #8]
 8003b92:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	2201      	movs	r2, #1
 8003b98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	2200      	movs	r2, #0
 8003ba0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003ba4:	2300      	movs	r3, #0
}
 8003ba6:	4618      	mov	r0, r3
 8003ba8:	3714      	adds	r7, #20
 8003baa:	46bd      	mov	sp, r7
 8003bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bb0:	4770      	bx	lr
 8003bb2:	bf00      	nop
 8003bb4:	40012c00 	.word	0x40012c00
 8003bb8:	40000400 	.word	0x40000400
 8003bbc:	40014000 	.word	0x40014000

08003bc0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003bc0:	b480      	push	{r7}
 8003bc2:	b083      	sub	sp, #12
 8003bc4:	af00      	add	r7, sp, #0
 8003bc6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003bc8:	bf00      	nop
 8003bca:	370c      	adds	r7, #12
 8003bcc:	46bd      	mov	sp, r7
 8003bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bd2:	4770      	bx	lr

08003bd4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003bd4:	b480      	push	{r7}
 8003bd6:	b083      	sub	sp, #12
 8003bd8:	af00      	add	r7, sp, #0
 8003bda:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003bdc:	bf00      	nop
 8003bde:	370c      	adds	r7, #12
 8003be0:	46bd      	mov	sp, r7
 8003be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003be6:	4770      	bx	lr

08003be8 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8003be8:	b480      	push	{r7}
 8003bea:	b083      	sub	sp, #12
 8003bec:	af00      	add	r7, sp, #0
 8003bee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8003bf0:	bf00      	nop
 8003bf2:	370c      	adds	r7, #12
 8003bf4:	46bd      	mov	sp, r7
 8003bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bfa:	4770      	bx	lr

08003bfc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003bfc:	b580      	push	{r7, lr}
 8003bfe:	b082      	sub	sp, #8
 8003c00:	af00      	add	r7, sp, #0
 8003c02:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d101      	bne.n	8003c0e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003c0a:	2301      	movs	r3, #1
 8003c0c:	e040      	b.n	8003c90 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d106      	bne.n	8003c24 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	2200      	movs	r2, #0
 8003c1a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003c1e:	6878      	ldr	r0, [r7, #4]
 8003c20:	f7fc fe46 	bl	80008b0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	2224      	movs	r2, #36	; 0x24
 8003c28:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	681a      	ldr	r2, [r3, #0]
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	f022 0201 	bic.w	r2, r2, #1
 8003c38:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003c3a:	6878      	ldr	r0, [r7, #4]
 8003c3c:	f000 f992 	bl	8003f64 <UART_SetConfig>
 8003c40:	4603      	mov	r3, r0
 8003c42:	2b01      	cmp	r3, #1
 8003c44:	d101      	bne.n	8003c4a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8003c46:	2301      	movs	r3, #1
 8003c48:	e022      	b.n	8003c90 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d002      	beq.n	8003c58 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8003c52:	6878      	ldr	r0, [r7, #4]
 8003c54:	f000 fabc 	bl	80041d0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	685a      	ldr	r2, [r3, #4]
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003c66:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	689a      	ldr	r2, [r3, #8]
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003c76:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	681a      	ldr	r2, [r3, #0]
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	f042 0201 	orr.w	r2, r2, #1
 8003c86:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003c88:	6878      	ldr	r0, [r7, #4]
 8003c8a:	f000 fb43 	bl	8004314 <UART_CheckIdleState>
 8003c8e:	4603      	mov	r3, r0
}
 8003c90:	4618      	mov	r0, r3
 8003c92:	3708      	adds	r7, #8
 8003c94:	46bd      	mov	sp, r7
 8003c96:	bd80      	pop	{r7, pc}

08003c98 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003c98:	b580      	push	{r7, lr}
 8003c9a:	b08a      	sub	sp, #40	; 0x28
 8003c9c:	af02      	add	r7, sp, #8
 8003c9e:	60f8      	str	r0, [r7, #12]
 8003ca0:	60b9      	str	r1, [r7, #8]
 8003ca2:	603b      	str	r3, [r7, #0]
 8003ca4:	4613      	mov	r3, r2
 8003ca6:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003cac:	2b20      	cmp	r3, #32
 8003cae:	f040 8082 	bne.w	8003db6 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8003cb2:	68bb      	ldr	r3, [r7, #8]
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d002      	beq.n	8003cbe <HAL_UART_Transmit+0x26>
 8003cb8:	88fb      	ldrh	r3, [r7, #6]
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d101      	bne.n	8003cc2 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8003cbe:	2301      	movs	r3, #1
 8003cc0:	e07a      	b.n	8003db8 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8003cc8:	2b01      	cmp	r3, #1
 8003cca:	d101      	bne.n	8003cd0 <HAL_UART_Transmit+0x38>
 8003ccc:	2302      	movs	r3, #2
 8003cce:	e073      	b.n	8003db8 <HAL_UART_Transmit+0x120>
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	2201      	movs	r2, #1
 8003cd4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	2200      	movs	r2, #0
 8003cdc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	2221      	movs	r2, #33	; 0x21
 8003ce4:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003ce6:	f7fc ff2f 	bl	8000b48 <HAL_GetTick>
 8003cea:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	88fa      	ldrh	r2, [r7, #6]
 8003cf0:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	88fa      	ldrh	r2, [r7, #6]
 8003cf8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	689b      	ldr	r3, [r3, #8]
 8003d00:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003d04:	d108      	bne.n	8003d18 <HAL_UART_Transmit+0x80>
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	691b      	ldr	r3, [r3, #16]
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d104      	bne.n	8003d18 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8003d0e:	2300      	movs	r3, #0
 8003d10:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003d12:	68bb      	ldr	r3, [r7, #8]
 8003d14:	61bb      	str	r3, [r7, #24]
 8003d16:	e003      	b.n	8003d20 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8003d18:	68bb      	ldr	r3, [r7, #8]
 8003d1a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003d1c:	2300      	movs	r3, #0
 8003d1e:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	2200      	movs	r2, #0
 8003d24:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8003d28:	e02d      	b.n	8003d86 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003d2a:	683b      	ldr	r3, [r7, #0]
 8003d2c:	9300      	str	r3, [sp, #0]
 8003d2e:	697b      	ldr	r3, [r7, #20]
 8003d30:	2200      	movs	r2, #0
 8003d32:	2180      	movs	r1, #128	; 0x80
 8003d34:	68f8      	ldr	r0, [r7, #12]
 8003d36:	f000 fb36 	bl	80043a6 <UART_WaitOnFlagUntilTimeout>
 8003d3a:	4603      	mov	r3, r0
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d001      	beq.n	8003d44 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8003d40:	2303      	movs	r3, #3
 8003d42:	e039      	b.n	8003db8 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8003d44:	69fb      	ldr	r3, [r7, #28]
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d10b      	bne.n	8003d62 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003d4a:	69bb      	ldr	r3, [r7, #24]
 8003d4c:	881a      	ldrh	r2, [r3, #0]
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003d56:	b292      	uxth	r2, r2
 8003d58:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8003d5a:	69bb      	ldr	r3, [r7, #24]
 8003d5c:	3302      	adds	r3, #2
 8003d5e:	61bb      	str	r3, [r7, #24]
 8003d60:	e008      	b.n	8003d74 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003d62:	69fb      	ldr	r3, [r7, #28]
 8003d64:	781a      	ldrb	r2, [r3, #0]
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	b292      	uxth	r2, r2
 8003d6c:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8003d6e:	69fb      	ldr	r3, [r7, #28]
 8003d70:	3301      	adds	r3, #1
 8003d72:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003d7a:	b29b      	uxth	r3, r3
 8003d7c:	3b01      	subs	r3, #1
 8003d7e:	b29a      	uxth	r2, r3
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003d8c:	b29b      	uxth	r3, r3
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d1cb      	bne.n	8003d2a <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003d92:	683b      	ldr	r3, [r7, #0]
 8003d94:	9300      	str	r3, [sp, #0]
 8003d96:	697b      	ldr	r3, [r7, #20]
 8003d98:	2200      	movs	r2, #0
 8003d9a:	2140      	movs	r1, #64	; 0x40
 8003d9c:	68f8      	ldr	r0, [r7, #12]
 8003d9e:	f000 fb02 	bl	80043a6 <UART_WaitOnFlagUntilTimeout>
 8003da2:	4603      	mov	r3, r0
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d001      	beq.n	8003dac <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8003da8:	2303      	movs	r3, #3
 8003daa:	e005      	b.n	8003db8 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	2220      	movs	r2, #32
 8003db0:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8003db2:	2300      	movs	r3, #0
 8003db4:	e000      	b.n	8003db8 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8003db6:	2302      	movs	r3, #2
  }
}
 8003db8:	4618      	mov	r0, r3
 8003dba:	3720      	adds	r7, #32
 8003dbc:	46bd      	mov	sp, r7
 8003dbe:	bd80      	pop	{r7, pc}

08003dc0 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003dc0:	b580      	push	{r7, lr}
 8003dc2:	b08a      	sub	sp, #40	; 0x28
 8003dc4:	af02      	add	r7, sp, #8
 8003dc6:	60f8      	str	r0, [r7, #12]
 8003dc8:	60b9      	str	r1, [r7, #8]
 8003dca:	603b      	str	r3, [r7, #0]
 8003dcc:	4613      	mov	r3, r2
 8003dce:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003dd4:	2b20      	cmp	r3, #32
 8003dd6:	f040 80bf 	bne.w	8003f58 <HAL_UART_Receive+0x198>
  {
    if ((pData == NULL) || (Size == 0U))
 8003dda:	68bb      	ldr	r3, [r7, #8]
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d002      	beq.n	8003de6 <HAL_UART_Receive+0x26>
 8003de0:	88fb      	ldrh	r3, [r7, #6]
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d101      	bne.n	8003dea <HAL_UART_Receive+0x2a>
    {
      return  HAL_ERROR;
 8003de6:	2301      	movs	r3, #1
 8003de8:	e0b7      	b.n	8003f5a <HAL_UART_Receive+0x19a>
    }

    __HAL_LOCK(huart);
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8003df0:	2b01      	cmp	r3, #1
 8003df2:	d101      	bne.n	8003df8 <HAL_UART_Receive+0x38>
 8003df4:	2302      	movs	r3, #2
 8003df6:	e0b0      	b.n	8003f5a <HAL_UART_Receive+0x19a>
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	2201      	movs	r2, #1
 8003dfc:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	2200      	movs	r2, #0
 8003e04:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	2222      	movs	r2, #34	; 0x22
 8003e0c:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	2200      	movs	r2, #0
 8003e12:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003e14:	f7fc fe98 	bl	8000b48 <HAL_GetTick>
 8003e18:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	88fa      	ldrh	r2, [r7, #6]
 8003e1e:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	88fa      	ldrh	r2, [r7, #6]
 8003e26:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	689b      	ldr	r3, [r3, #8]
 8003e2e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003e32:	d10e      	bne.n	8003e52 <HAL_UART_Receive+0x92>
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	691b      	ldr	r3, [r3, #16]
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d105      	bne.n	8003e48 <HAL_UART_Receive+0x88>
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	f240 12ff 	movw	r2, #511	; 0x1ff
 8003e42:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003e46:	e02d      	b.n	8003ea4 <HAL_UART_Receive+0xe4>
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	22ff      	movs	r2, #255	; 0xff
 8003e4c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003e50:	e028      	b.n	8003ea4 <HAL_UART_Receive+0xe4>
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	689b      	ldr	r3, [r3, #8]
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d10d      	bne.n	8003e76 <HAL_UART_Receive+0xb6>
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	691b      	ldr	r3, [r3, #16]
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d104      	bne.n	8003e6c <HAL_UART_Receive+0xac>
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	22ff      	movs	r2, #255	; 0xff
 8003e66:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003e6a:	e01b      	b.n	8003ea4 <HAL_UART_Receive+0xe4>
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	227f      	movs	r2, #127	; 0x7f
 8003e70:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003e74:	e016      	b.n	8003ea4 <HAL_UART_Receive+0xe4>
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	689b      	ldr	r3, [r3, #8]
 8003e7a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003e7e:	d10d      	bne.n	8003e9c <HAL_UART_Receive+0xdc>
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	691b      	ldr	r3, [r3, #16]
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d104      	bne.n	8003e92 <HAL_UART_Receive+0xd2>
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	227f      	movs	r2, #127	; 0x7f
 8003e8c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003e90:	e008      	b.n	8003ea4 <HAL_UART_Receive+0xe4>
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	223f      	movs	r2, #63	; 0x3f
 8003e96:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003e9a:	e003      	b.n	8003ea4 <HAL_UART_Receive+0xe4>
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	2200      	movs	r2, #0
 8003ea0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8003eaa:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	689b      	ldr	r3, [r3, #8]
 8003eb0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003eb4:	d108      	bne.n	8003ec8 <HAL_UART_Receive+0x108>
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	691b      	ldr	r3, [r3, #16]
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d104      	bne.n	8003ec8 <HAL_UART_Receive+0x108>
    {
      pdata8bits  = NULL;
 8003ebe:	2300      	movs	r3, #0
 8003ec0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003ec2:	68bb      	ldr	r3, [r7, #8]
 8003ec4:	61bb      	str	r3, [r7, #24]
 8003ec6:	e003      	b.n	8003ed0 <HAL_UART_Receive+0x110>
    }
    else
    {
      pdata8bits  = pData;
 8003ec8:	68bb      	ldr	r3, [r7, #8]
 8003eca:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003ecc:	2300      	movs	r3, #0
 8003ece:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	2200      	movs	r2, #0
 8003ed4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8003ed8:	e033      	b.n	8003f42 <HAL_UART_Receive+0x182>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8003eda:	683b      	ldr	r3, [r7, #0]
 8003edc:	9300      	str	r3, [sp, #0]
 8003ede:	697b      	ldr	r3, [r7, #20]
 8003ee0:	2200      	movs	r2, #0
 8003ee2:	2120      	movs	r1, #32
 8003ee4:	68f8      	ldr	r0, [r7, #12]
 8003ee6:	f000 fa5e 	bl	80043a6 <UART_WaitOnFlagUntilTimeout>
 8003eea:	4603      	mov	r3, r0
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d001      	beq.n	8003ef4 <HAL_UART_Receive+0x134>
      {
        return HAL_TIMEOUT;
 8003ef0:	2303      	movs	r3, #3
 8003ef2:	e032      	b.n	8003f5a <HAL_UART_Receive+0x19a>
      }
      if (pdata8bits == NULL)
 8003ef4:	69fb      	ldr	r3, [r7, #28]
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d10c      	bne.n	8003f14 <HAL_UART_Receive+0x154>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8003f00:	b29a      	uxth	r2, r3
 8003f02:	8a7b      	ldrh	r3, [r7, #18]
 8003f04:	4013      	ands	r3, r2
 8003f06:	b29a      	uxth	r2, r3
 8003f08:	69bb      	ldr	r3, [r7, #24]
 8003f0a:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8003f0c:	69bb      	ldr	r3, [r7, #24]
 8003f0e:	3302      	adds	r3, #2
 8003f10:	61bb      	str	r3, [r7, #24]
 8003f12:	e00d      	b.n	8003f30 <HAL_UART_Receive+0x170>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8003f1a:	b29b      	uxth	r3, r3
 8003f1c:	b2da      	uxtb	r2, r3
 8003f1e:	8a7b      	ldrh	r3, [r7, #18]
 8003f20:	b2db      	uxtb	r3, r3
 8003f22:	4013      	ands	r3, r2
 8003f24:	b2da      	uxtb	r2, r3
 8003f26:	69fb      	ldr	r3, [r7, #28]
 8003f28:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8003f2a:	69fb      	ldr	r3, [r7, #28]
 8003f2c:	3301      	adds	r3, #1
 8003f2e:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003f36:	b29b      	uxth	r3, r3
 8003f38:	3b01      	subs	r3, #1
 8003f3a:	b29a      	uxth	r2, r3
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003f48:	b29b      	uxth	r3, r3
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d1c5      	bne.n	8003eda <HAL_UART_Receive+0x11a>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	2220      	movs	r2, #32
 8003f52:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8003f54:	2300      	movs	r3, #0
 8003f56:	e000      	b.n	8003f5a <HAL_UART_Receive+0x19a>
  }
  else
  {
    return HAL_BUSY;
 8003f58:	2302      	movs	r3, #2
  }
}
 8003f5a:	4618      	mov	r0, r3
 8003f5c:	3720      	adds	r7, #32
 8003f5e:	46bd      	mov	sp, r7
 8003f60:	bd80      	pop	{r7, pc}
	...

08003f64 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003f64:	b580      	push	{r7, lr}
 8003f66:	b088      	sub	sp, #32
 8003f68:	af00      	add	r7, sp, #0
 8003f6a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003f6c:	2300      	movs	r3, #0
 8003f6e:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	689a      	ldr	r2, [r3, #8]
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	691b      	ldr	r3, [r3, #16]
 8003f78:	431a      	orrs	r2, r3
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	695b      	ldr	r3, [r3, #20]
 8003f7e:	431a      	orrs	r2, r3
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	69db      	ldr	r3, [r3, #28]
 8003f84:	4313      	orrs	r3, r2
 8003f86:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	681a      	ldr	r2, [r3, #0]
 8003f8e:	4b8a      	ldr	r3, [pc, #552]	; (80041b8 <UART_SetConfig+0x254>)
 8003f90:	4013      	ands	r3, r2
 8003f92:	687a      	ldr	r2, [r7, #4]
 8003f94:	6812      	ldr	r2, [r2, #0]
 8003f96:	6979      	ldr	r1, [r7, #20]
 8003f98:	430b      	orrs	r3, r1
 8003f9a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	685b      	ldr	r3, [r3, #4]
 8003fa2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	68da      	ldr	r2, [r3, #12]
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	430a      	orrs	r2, r1
 8003fb0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	699b      	ldr	r3, [r3, #24]
 8003fb6:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	6a1b      	ldr	r3, [r3, #32]
 8003fbc:	697a      	ldr	r2, [r7, #20]
 8003fbe:	4313      	orrs	r3, r2
 8003fc0:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	689b      	ldr	r3, [r3, #8]
 8003fc8:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	697a      	ldr	r2, [r7, #20]
 8003fd2:	430a      	orrs	r2, r1
 8003fd4:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	4a78      	ldr	r2, [pc, #480]	; (80041bc <UART_SetConfig+0x258>)
 8003fdc:	4293      	cmp	r3, r2
 8003fde:	d120      	bne.n	8004022 <UART_SetConfig+0xbe>
 8003fe0:	4b77      	ldr	r3, [pc, #476]	; (80041c0 <UART_SetConfig+0x25c>)
 8003fe2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fe4:	f003 0303 	and.w	r3, r3, #3
 8003fe8:	2b03      	cmp	r3, #3
 8003fea:	d817      	bhi.n	800401c <UART_SetConfig+0xb8>
 8003fec:	a201      	add	r2, pc, #4	; (adr r2, 8003ff4 <UART_SetConfig+0x90>)
 8003fee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ff2:	bf00      	nop
 8003ff4:	08004005 	.word	0x08004005
 8003ff8:	08004011 	.word	0x08004011
 8003ffc:	08004017 	.word	0x08004017
 8004000:	0800400b 	.word	0x0800400b
 8004004:	2300      	movs	r3, #0
 8004006:	77fb      	strb	r3, [r7, #31]
 8004008:	e01d      	b.n	8004046 <UART_SetConfig+0xe2>
 800400a:	2302      	movs	r3, #2
 800400c:	77fb      	strb	r3, [r7, #31]
 800400e:	e01a      	b.n	8004046 <UART_SetConfig+0xe2>
 8004010:	2304      	movs	r3, #4
 8004012:	77fb      	strb	r3, [r7, #31]
 8004014:	e017      	b.n	8004046 <UART_SetConfig+0xe2>
 8004016:	2308      	movs	r3, #8
 8004018:	77fb      	strb	r3, [r7, #31]
 800401a:	e014      	b.n	8004046 <UART_SetConfig+0xe2>
 800401c:	2310      	movs	r3, #16
 800401e:	77fb      	strb	r3, [r7, #31]
 8004020:	e011      	b.n	8004046 <UART_SetConfig+0xe2>
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	4a67      	ldr	r2, [pc, #412]	; (80041c4 <UART_SetConfig+0x260>)
 8004028:	4293      	cmp	r3, r2
 800402a:	d102      	bne.n	8004032 <UART_SetConfig+0xce>
 800402c:	2300      	movs	r3, #0
 800402e:	77fb      	strb	r3, [r7, #31]
 8004030:	e009      	b.n	8004046 <UART_SetConfig+0xe2>
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	4a64      	ldr	r2, [pc, #400]	; (80041c8 <UART_SetConfig+0x264>)
 8004038:	4293      	cmp	r3, r2
 800403a:	d102      	bne.n	8004042 <UART_SetConfig+0xde>
 800403c:	2300      	movs	r3, #0
 800403e:	77fb      	strb	r3, [r7, #31]
 8004040:	e001      	b.n	8004046 <UART_SetConfig+0xe2>
 8004042:	2310      	movs	r3, #16
 8004044:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	69db      	ldr	r3, [r3, #28]
 800404a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800404e:	d15b      	bne.n	8004108 <UART_SetConfig+0x1a4>
  {
    switch (clocksource)
 8004050:	7ffb      	ldrb	r3, [r7, #31]
 8004052:	2b08      	cmp	r3, #8
 8004054:	d827      	bhi.n	80040a6 <UART_SetConfig+0x142>
 8004056:	a201      	add	r2, pc, #4	; (adr r2, 800405c <UART_SetConfig+0xf8>)
 8004058:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800405c:	08004081 	.word	0x08004081
 8004060:	08004089 	.word	0x08004089
 8004064:	08004091 	.word	0x08004091
 8004068:	080040a7 	.word	0x080040a7
 800406c:	08004097 	.word	0x08004097
 8004070:	080040a7 	.word	0x080040a7
 8004074:	080040a7 	.word	0x080040a7
 8004078:	080040a7 	.word	0x080040a7
 800407c:	0800409f 	.word	0x0800409f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004080:	f7fe ffe8 	bl	8003054 <HAL_RCC_GetPCLK1Freq>
 8004084:	61b8      	str	r0, [r7, #24]
        break;
 8004086:	e013      	b.n	80040b0 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004088:	f7ff f806 	bl	8003098 <HAL_RCC_GetPCLK2Freq>
 800408c:	61b8      	str	r0, [r7, #24]
        break;
 800408e:	e00f      	b.n	80040b0 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004090:	4b4e      	ldr	r3, [pc, #312]	; (80041cc <UART_SetConfig+0x268>)
 8004092:	61bb      	str	r3, [r7, #24]
        break;
 8004094:	e00c      	b.n	80040b0 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004096:	f7fe ff67 	bl	8002f68 <HAL_RCC_GetSysClockFreq>
 800409a:	61b8      	str	r0, [r7, #24]
        break;
 800409c:	e008      	b.n	80040b0 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800409e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80040a2:	61bb      	str	r3, [r7, #24]
        break;
 80040a4:	e004      	b.n	80040b0 <UART_SetConfig+0x14c>
      default:
        pclk = 0U;
 80040a6:	2300      	movs	r3, #0
 80040a8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80040aa:	2301      	movs	r3, #1
 80040ac:	77bb      	strb	r3, [r7, #30]
        break;
 80040ae:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80040b0:	69bb      	ldr	r3, [r7, #24]
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d074      	beq.n	80041a0 <UART_SetConfig+0x23c>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80040b6:	69bb      	ldr	r3, [r7, #24]
 80040b8:	005a      	lsls	r2, r3, #1
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	685b      	ldr	r3, [r3, #4]
 80040be:	085b      	lsrs	r3, r3, #1
 80040c0:	441a      	add	r2, r3
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	685b      	ldr	r3, [r3, #4]
 80040c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80040ca:	b29b      	uxth	r3, r3
 80040cc:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80040ce:	693b      	ldr	r3, [r7, #16]
 80040d0:	2b0f      	cmp	r3, #15
 80040d2:	d916      	bls.n	8004102 <UART_SetConfig+0x19e>
 80040d4:	693b      	ldr	r3, [r7, #16]
 80040d6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80040da:	d212      	bcs.n	8004102 <UART_SetConfig+0x19e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80040dc:	693b      	ldr	r3, [r7, #16]
 80040de:	b29b      	uxth	r3, r3
 80040e0:	f023 030f 	bic.w	r3, r3, #15
 80040e4:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80040e6:	693b      	ldr	r3, [r7, #16]
 80040e8:	085b      	lsrs	r3, r3, #1
 80040ea:	b29b      	uxth	r3, r3
 80040ec:	f003 0307 	and.w	r3, r3, #7
 80040f0:	b29a      	uxth	r2, r3
 80040f2:	89fb      	ldrh	r3, [r7, #14]
 80040f4:	4313      	orrs	r3, r2
 80040f6:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	89fa      	ldrh	r2, [r7, #14]
 80040fe:	60da      	str	r2, [r3, #12]
 8004100:	e04e      	b.n	80041a0 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8004102:	2301      	movs	r3, #1
 8004104:	77bb      	strb	r3, [r7, #30]
 8004106:	e04b      	b.n	80041a0 <UART_SetConfig+0x23c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004108:	7ffb      	ldrb	r3, [r7, #31]
 800410a:	2b08      	cmp	r3, #8
 800410c:	d827      	bhi.n	800415e <UART_SetConfig+0x1fa>
 800410e:	a201      	add	r2, pc, #4	; (adr r2, 8004114 <UART_SetConfig+0x1b0>)
 8004110:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004114:	08004139 	.word	0x08004139
 8004118:	08004141 	.word	0x08004141
 800411c:	08004149 	.word	0x08004149
 8004120:	0800415f 	.word	0x0800415f
 8004124:	0800414f 	.word	0x0800414f
 8004128:	0800415f 	.word	0x0800415f
 800412c:	0800415f 	.word	0x0800415f
 8004130:	0800415f 	.word	0x0800415f
 8004134:	08004157 	.word	0x08004157
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004138:	f7fe ff8c 	bl	8003054 <HAL_RCC_GetPCLK1Freq>
 800413c:	61b8      	str	r0, [r7, #24]
        break;
 800413e:	e013      	b.n	8004168 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004140:	f7fe ffaa 	bl	8003098 <HAL_RCC_GetPCLK2Freq>
 8004144:	61b8      	str	r0, [r7, #24]
        break;
 8004146:	e00f      	b.n	8004168 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004148:	4b20      	ldr	r3, [pc, #128]	; (80041cc <UART_SetConfig+0x268>)
 800414a:	61bb      	str	r3, [r7, #24]
        break;
 800414c:	e00c      	b.n	8004168 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800414e:	f7fe ff0b 	bl	8002f68 <HAL_RCC_GetSysClockFreq>
 8004152:	61b8      	str	r0, [r7, #24]
        break;
 8004154:	e008      	b.n	8004168 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004156:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800415a:	61bb      	str	r3, [r7, #24]
        break;
 800415c:	e004      	b.n	8004168 <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 800415e:	2300      	movs	r3, #0
 8004160:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004162:	2301      	movs	r3, #1
 8004164:	77bb      	strb	r3, [r7, #30]
        break;
 8004166:	bf00      	nop
    }

    if (pclk != 0U)
 8004168:	69bb      	ldr	r3, [r7, #24]
 800416a:	2b00      	cmp	r3, #0
 800416c:	d018      	beq.n	80041a0 <UART_SetConfig+0x23c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	685b      	ldr	r3, [r3, #4]
 8004172:	085a      	lsrs	r2, r3, #1
 8004174:	69bb      	ldr	r3, [r7, #24]
 8004176:	441a      	add	r2, r3
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	685b      	ldr	r3, [r3, #4]
 800417c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004180:	b29b      	uxth	r3, r3
 8004182:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004184:	693b      	ldr	r3, [r7, #16]
 8004186:	2b0f      	cmp	r3, #15
 8004188:	d908      	bls.n	800419c <UART_SetConfig+0x238>
 800418a:	693b      	ldr	r3, [r7, #16]
 800418c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004190:	d204      	bcs.n	800419c <UART_SetConfig+0x238>
      {
        huart->Instance->BRR = usartdiv;
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	693a      	ldr	r2, [r7, #16]
 8004198:	60da      	str	r2, [r3, #12]
 800419a:	e001      	b.n	80041a0 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 800419c:	2301      	movs	r3, #1
 800419e:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	2200      	movs	r2, #0
 80041a4:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	2200      	movs	r2, #0
 80041aa:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80041ac:	7fbb      	ldrb	r3, [r7, #30]
}
 80041ae:	4618      	mov	r0, r3
 80041b0:	3720      	adds	r7, #32
 80041b2:	46bd      	mov	sp, r7
 80041b4:	bd80      	pop	{r7, pc}
 80041b6:	bf00      	nop
 80041b8:	efff69f3 	.word	0xefff69f3
 80041bc:	40013800 	.word	0x40013800
 80041c0:	40021000 	.word	0x40021000
 80041c4:	40004400 	.word	0x40004400
 80041c8:	40004800 	.word	0x40004800
 80041cc:	007a1200 	.word	0x007a1200

080041d0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80041d0:	b480      	push	{r7}
 80041d2:	b083      	sub	sp, #12
 80041d4:	af00      	add	r7, sp, #0
 80041d6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041dc:	f003 0301 	and.w	r3, r3, #1
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d00a      	beq.n	80041fa <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	685b      	ldr	r3, [r3, #4]
 80041ea:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	430a      	orrs	r2, r1
 80041f8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041fe:	f003 0302 	and.w	r3, r3, #2
 8004202:	2b00      	cmp	r3, #0
 8004204:	d00a      	beq.n	800421c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	685b      	ldr	r3, [r3, #4]
 800420c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	430a      	orrs	r2, r1
 800421a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004220:	f003 0304 	and.w	r3, r3, #4
 8004224:	2b00      	cmp	r3, #0
 8004226:	d00a      	beq.n	800423e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	685b      	ldr	r3, [r3, #4]
 800422e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	430a      	orrs	r2, r1
 800423c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004242:	f003 0308 	and.w	r3, r3, #8
 8004246:	2b00      	cmp	r3, #0
 8004248:	d00a      	beq.n	8004260 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	685b      	ldr	r3, [r3, #4]
 8004250:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	430a      	orrs	r2, r1
 800425e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004264:	f003 0310 	and.w	r3, r3, #16
 8004268:	2b00      	cmp	r3, #0
 800426a:	d00a      	beq.n	8004282 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	689b      	ldr	r3, [r3, #8]
 8004272:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	430a      	orrs	r2, r1
 8004280:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004286:	f003 0320 	and.w	r3, r3, #32
 800428a:	2b00      	cmp	r3, #0
 800428c:	d00a      	beq.n	80042a4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	689b      	ldr	r3, [r3, #8]
 8004294:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	430a      	orrs	r2, r1
 80042a2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d01a      	beq.n	80042e6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	685b      	ldr	r3, [r3, #4]
 80042b6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	430a      	orrs	r2, r1
 80042c4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042ca:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80042ce:	d10a      	bne.n	80042e6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	685b      	ldr	r3, [r3, #4]
 80042d6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	430a      	orrs	r2, r1
 80042e4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d00a      	beq.n	8004308 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	685b      	ldr	r3, [r3, #4]
 80042f8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	430a      	orrs	r2, r1
 8004306:	605a      	str	r2, [r3, #4]
  }
}
 8004308:	bf00      	nop
 800430a:	370c      	adds	r7, #12
 800430c:	46bd      	mov	sp, r7
 800430e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004312:	4770      	bx	lr

08004314 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004314:	b580      	push	{r7, lr}
 8004316:	b086      	sub	sp, #24
 8004318:	af02      	add	r7, sp, #8
 800431a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	2200      	movs	r2, #0
 8004320:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004324:	f7fc fc10 	bl	8000b48 <HAL_GetTick>
 8004328:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	f003 0308 	and.w	r3, r3, #8
 8004334:	2b08      	cmp	r3, #8
 8004336:	d10e      	bne.n	8004356 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004338:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800433c:	9300      	str	r3, [sp, #0]
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	2200      	movs	r2, #0
 8004342:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004346:	6878      	ldr	r0, [r7, #4]
 8004348:	f000 f82d 	bl	80043a6 <UART_WaitOnFlagUntilTimeout>
 800434c:	4603      	mov	r3, r0
 800434e:	2b00      	cmp	r3, #0
 8004350:	d001      	beq.n	8004356 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004352:	2303      	movs	r3, #3
 8004354:	e023      	b.n	800439e <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	f003 0304 	and.w	r3, r3, #4
 8004360:	2b04      	cmp	r3, #4
 8004362:	d10e      	bne.n	8004382 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004364:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004368:	9300      	str	r3, [sp, #0]
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	2200      	movs	r2, #0
 800436e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004372:	6878      	ldr	r0, [r7, #4]
 8004374:	f000 f817 	bl	80043a6 <UART_WaitOnFlagUntilTimeout>
 8004378:	4603      	mov	r3, r0
 800437a:	2b00      	cmp	r3, #0
 800437c:	d001      	beq.n	8004382 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800437e:	2303      	movs	r3, #3
 8004380:	e00d      	b.n	800439e <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	2220      	movs	r2, #32
 8004386:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	2220      	movs	r2, #32
 800438c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	2200      	movs	r2, #0
 8004392:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	2200      	movs	r2, #0
 8004398:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 800439c:	2300      	movs	r3, #0
}
 800439e:	4618      	mov	r0, r3
 80043a0:	3710      	adds	r7, #16
 80043a2:	46bd      	mov	sp, r7
 80043a4:	bd80      	pop	{r7, pc}

080043a6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80043a6:	b580      	push	{r7, lr}
 80043a8:	b084      	sub	sp, #16
 80043aa:	af00      	add	r7, sp, #0
 80043ac:	60f8      	str	r0, [r7, #12]
 80043ae:	60b9      	str	r1, [r7, #8]
 80043b0:	603b      	str	r3, [r7, #0]
 80043b2:	4613      	mov	r3, r2
 80043b4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80043b6:	e05e      	b.n	8004476 <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80043b8:	69bb      	ldr	r3, [r7, #24]
 80043ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043be:	d05a      	beq.n	8004476 <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80043c0:	f7fc fbc2 	bl	8000b48 <HAL_GetTick>
 80043c4:	4602      	mov	r2, r0
 80043c6:	683b      	ldr	r3, [r7, #0]
 80043c8:	1ad3      	subs	r3, r2, r3
 80043ca:	69ba      	ldr	r2, [r7, #24]
 80043cc:	429a      	cmp	r2, r3
 80043ce:	d302      	bcc.n	80043d6 <UART_WaitOnFlagUntilTimeout+0x30>
 80043d0:	69bb      	ldr	r3, [r7, #24]
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d11b      	bne.n	800440e <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	681a      	ldr	r2, [r3, #0]
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80043e4:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	689a      	ldr	r2, [r3, #8]
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	f022 0201 	bic.w	r2, r2, #1
 80043f4:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	2220      	movs	r2, #32
 80043fa:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	2220      	movs	r2, #32
 8004400:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	2200      	movs	r2, #0
 8004406:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800440a:	2303      	movs	r3, #3
 800440c:	e043      	b.n	8004496 <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	f003 0304 	and.w	r3, r3, #4
 8004418:	2b00      	cmp	r3, #0
 800441a:	d02c      	beq.n	8004476 <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	69db      	ldr	r3, [r3, #28]
 8004422:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004426:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800442a:	d124      	bne.n	8004476 <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004434:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	681a      	ldr	r2, [r3, #0]
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004444:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	689a      	ldr	r2, [r3, #8]
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	f022 0201 	bic.w	r2, r2, #1
 8004454:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	2220      	movs	r2, #32
 800445a:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	2220      	movs	r2, #32
 8004460:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	2220      	movs	r2, #32
 8004466:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	2200      	movs	r2, #0
 800446e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8004472:	2303      	movs	r3, #3
 8004474:	e00f      	b.n	8004496 <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	69da      	ldr	r2, [r3, #28]
 800447c:	68bb      	ldr	r3, [r7, #8]
 800447e:	4013      	ands	r3, r2
 8004480:	68ba      	ldr	r2, [r7, #8]
 8004482:	429a      	cmp	r2, r3
 8004484:	bf0c      	ite	eq
 8004486:	2301      	moveq	r3, #1
 8004488:	2300      	movne	r3, #0
 800448a:	b2db      	uxtb	r3, r3
 800448c:	461a      	mov	r2, r3
 800448e:	79fb      	ldrb	r3, [r7, #7]
 8004490:	429a      	cmp	r2, r3
 8004492:	d091      	beq.n	80043b8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004494:	2300      	movs	r3, #0
}
 8004496:	4618      	mov	r0, r3
 8004498:	3710      	adds	r7, #16
 800449a:	46bd      	mov	sp, r7
 800449c:	bd80      	pop	{r7, pc}
	...

080044a0 <__libc_init_array>:
 80044a0:	b570      	push	{r4, r5, r6, lr}
 80044a2:	4d0d      	ldr	r5, [pc, #52]	; (80044d8 <__libc_init_array+0x38>)
 80044a4:	4c0d      	ldr	r4, [pc, #52]	; (80044dc <__libc_init_array+0x3c>)
 80044a6:	1b64      	subs	r4, r4, r5
 80044a8:	10a4      	asrs	r4, r4, #2
 80044aa:	2600      	movs	r6, #0
 80044ac:	42a6      	cmp	r6, r4
 80044ae:	d109      	bne.n	80044c4 <__libc_init_array+0x24>
 80044b0:	4d0b      	ldr	r5, [pc, #44]	; (80044e0 <__libc_init_array+0x40>)
 80044b2:	4c0c      	ldr	r4, [pc, #48]	; (80044e4 <__libc_init_array+0x44>)
 80044b4:	f000 f820 	bl	80044f8 <_init>
 80044b8:	1b64      	subs	r4, r4, r5
 80044ba:	10a4      	asrs	r4, r4, #2
 80044bc:	2600      	movs	r6, #0
 80044be:	42a6      	cmp	r6, r4
 80044c0:	d105      	bne.n	80044ce <__libc_init_array+0x2e>
 80044c2:	bd70      	pop	{r4, r5, r6, pc}
 80044c4:	f855 3b04 	ldr.w	r3, [r5], #4
 80044c8:	4798      	blx	r3
 80044ca:	3601      	adds	r6, #1
 80044cc:	e7ee      	b.n	80044ac <__libc_init_array+0xc>
 80044ce:	f855 3b04 	ldr.w	r3, [r5], #4
 80044d2:	4798      	blx	r3
 80044d4:	3601      	adds	r6, #1
 80044d6:	e7f2      	b.n	80044be <__libc_init_array+0x1e>
 80044d8:	08004548 	.word	0x08004548
 80044dc:	08004548 	.word	0x08004548
 80044e0:	08004548 	.word	0x08004548
 80044e4:	0800454c 	.word	0x0800454c

080044e8 <memset>:
 80044e8:	4402      	add	r2, r0
 80044ea:	4603      	mov	r3, r0
 80044ec:	4293      	cmp	r3, r2
 80044ee:	d100      	bne.n	80044f2 <memset+0xa>
 80044f0:	4770      	bx	lr
 80044f2:	f803 1b01 	strb.w	r1, [r3], #1
 80044f6:	e7f9      	b.n	80044ec <memset+0x4>

080044f8 <_init>:
 80044f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80044fa:	bf00      	nop
 80044fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80044fe:	bc08      	pop	{r3}
 8004500:	469e      	mov	lr, r3
 8004502:	4770      	bx	lr

08004504 <_fini>:
 8004504:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004506:	bf00      	nop
 8004508:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800450a:	bc08      	pop	{r3}
 800450c:	469e      	mov	lr, r3
 800450e:	4770      	bx	lr
